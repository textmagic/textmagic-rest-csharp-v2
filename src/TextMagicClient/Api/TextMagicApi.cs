/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TextMagicClient.Client;
using TextMagicClient.Model;

namespace TextMagicClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextMagicApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign contacts to a list
        /// </summary>
        /// <remarks>
        /// &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse AssignContactsToList (AssignContactsToListInputObject assignContactsToListInputObject, int? id);

        /// <summary>
        /// Assign contacts to a list
        /// </summary>
        /// <remarks>
        /// &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> AssignContactsToListWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id);
        /// <summary>
        /// Block a contact by phone number
        /// </summary>
        /// <remarks>
        /// Block a contact from inbound and outbound communication by phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse BlockContact (BlockContactInputObject blockContactInputObject);

        /// <summary>
        /// Block a contact by phone number
        /// </summary>
        /// <remarks>
        /// Block a contact from inbound and outbound communication by phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> BlockContactWithHttpInfo (BlockContactInputObject blockContactInputObject);
        /// <summary>
        /// Buy a dedicated number
        /// </summary>
        /// <remarks>
        /// To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns></returns>
        void BuyDedicatedNumber (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);

        /// <summary>
        /// Buy a dedicated number
        /// </summary>
        /// <remarks>
        /// To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuyDedicatedNumberWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);
        /// <summary>
        /// Cancel verification process
        /// </summary>
        /// <remarks>
        /// You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns></returns>
        void CancelVerification (string verifyId);

        /// <summary>
        /// Cancel verification process
        /// </summary>
        /// <remarks>
        /// You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelVerificationWithHttpInfo (string verifyId);
        /// <summary>
        /// Step 2: Check the verification code 
        /// </summary>
        /// <remarks>
        /// Check received code from user with the code which was actually sent.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns></returns>
        void CheckPhoneVerificationCodeTFA (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject);

        /// <summary>
        /// Step 2: Check the verification code 
        /// </summary>
        /// <remarks>
        /// Check received code from user with the code which was actually sent.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckPhoneVerificationCodeTFAWithHttpInfo (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject);
        /// <summary>
        /// Reset list members to the specified contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse ClearAndAssignContactsToList (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);

        /// <summary>
        /// Reset list members to the specified contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> ClearAndAssignContactsToListWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);
        /// <summary>
        /// Close chats (bulk)
        /// </summary>
        /// <remarks>
        /// Close chats by chat IDs or close all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns></returns>
        void CloseChatsBulk (CloseChatsBulkInputObject closeChatsBulkInputObject);

        /// <summary>
        /// Close chats (bulk)
        /// </summary>
        /// <remarks>
        /// Close chats by chat IDs or close all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseChatsBulkWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject);
        /// <summary>
        /// Close read chats
        /// </summary>
        /// <remarks>
        /// Close all chats that have no unread messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CloseReadChats ();

        /// <summary>
        /// Close read chats
        /// </summary>
        /// <remarks>
        /// Close all chats that have no unread messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseReadChatsWithHttpInfo ();
        /// <summary>
        /// Close sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void CloseSubaccount (int? id);

        /// <summary>
        /// Close sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseSubaccountWithHttpInfo (int? id);
        /// <summary>
        /// Add a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateContact (CreateContactInputObject createContactInputObject);

        /// <summary>
        /// Add a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateContactWithHttpInfo (CreateContactInputObject createContactInputObject);
        /// <summary>
        /// Create a new contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateContactNote (CreateContactNoteInputObject createContactNoteInputObject, int? id);

        /// <summary>
        /// Create a new contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateContactNoteWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id);
        /// <summary>
        /// Add a new custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateCustomField (CreateCustomFieldInputObject createCustomFieldInputObject);

        /// <summary>
        /// Add a new custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateCustomFieldWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject);
        /// <summary>
        /// Create a new list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateList (CreateListInputObject createListInputObject);

        /// <summary>
        /// Create a new list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateListWithHttpInfo (CreateListInputObject createListInputObject);
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateTemplate (CreateTemplateInputObject createTemplateInputObject);

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateTemplateWithHttpInfo (CreateTemplateInputObject createTemplateInputObject);
        /// <summary>
        /// Delete contacts (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllContacts ();

        /// <summary>
        /// Delete contacts (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllContactsWithHttpInfo ();
        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllOutboundMessages ();

        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllOutboundMessagesWithHttpInfo ();
        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAvatar ();

        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAvatarWithHttpInfo ();
        /// <summary>
        /// Delete chat messages by ID(s)
        /// </summary>
        /// <remarks>
        /// Delete messages from chat by given message IDs.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteChatMessages (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);

        /// <summary>
        /// Delete chat messages by ID(s)
        /// </summary>
        /// <remarks>
        /// Delete messages from chat by given message IDs.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChatMessagesWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);
        /// <summary>
        /// Delete chats (bulk)
        /// </summary>
        /// <remarks>
        /// Delete chats by given IDs or delete all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns></returns>
        void DeleteChatsBulk (DeleteChatsBulkInputObject deleteChatsBulkInputObject);

        /// <summary>
        /// Delete chats (bulk)
        /// </summary>
        /// <remarks>
        /// Delete chats by given IDs or delete all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChatsBulkWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject);
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContact (int? id);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactAvatar (int? id);

        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactAvatarWithHttpInfo (int? id);
        /// <summary>
        /// Delete a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactNote (int? id);

        /// <summary>
        /// Delete a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactNoteWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact notes (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteContactNotesBulk (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);

        /// <summary>
        /// Delete contact notes (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactNotesBulkWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);
        /// <summary>
        /// Delete contacts by IDs (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns></returns>
        void DeleteContactsByIds (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);

        /// <summary>
        /// Delete contacts by IDs (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsByIdsWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);
        /// <summary>
        /// Unassign contacts from a list
        /// </summary>
        /// <remarks>
        /// &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactsFromList (DeleteContacsFromListObject deleteContacsFromListObject, int? id);

        /// <summary>
        /// Unassign contacts from a list
        /// </summary>
        /// <remarks>
        /// &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsFromListWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id);
        /// <summary>
        /// Delete a custom field
        /// </summary>
        /// <remarks>
        /// &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteCustomField (int? id);

        /// <summary>
        /// Delete a custom field
        /// </summary>
        /// <remarks>
        /// &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomFieldWithHttpInfo (int? id);
        /// <summary>
        /// Cancel a dedicated number subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteDedicatedNumber (int? id);

        /// <summary>
        /// Cancel a dedicated number subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDedicatedNumberWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single inbound message
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns></returns>
        void DeleteInboundMessage (int? id);

        /// <summary>
        /// Delete a single inbound message
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete inbound messages (bulk)
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteInboundMessagesBulk (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);

        /// <summary>
        /// Delete inbound messages (bulk)
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboundMessagesBulkWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteList (int? id);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for a list
        /// </summary>
        /// <remarks>
        /// Delete an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteListAvatar (int? id);

        /// <summary>
        /// Delete an avatar for a list
        /// </summary>
        /// <remarks>
        /// Delete an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListAvatarWithHttpInfo (int? id);
        /// <summary>
        /// Delete contacts from a list (bulk)
        /// </summary>
        /// <remarks>
        /// Delete contacts from a list (bulk)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteListContactsBulk (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);

        /// <summary>
        /// Delete contacts from a list (bulk)
        /// </summary>
        /// <remarks>
        /// Delete contacts from a list (bulk)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListContactsBulkWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);
        /// <summary>
        /// Delete lists (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns></returns>
        void DeleteListsBulk (DeleteListsBulkInputObject deleteListsBulkInputObject);

        /// <summary>
        /// Delete lists (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListsBulkWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject);
        /// <summary>
        /// Delete a session
        /// </summary>
        /// <remarks>
        /// Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteMessageSession (int? id);

        /// <summary>
        /// Delete a session
        /// </summary>
        /// <remarks>
        /// Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageSessionWithHttpInfo (int? id);
        /// <summary>
        /// Delete sessions (bulk)
        /// </summary>
        /// <remarks>
        /// Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns></returns>
        void DeleteMessageSessionsBulk (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);

        /// <summary>
        /// Delete sessions (bulk)
        /// </summary>
        /// <remarks>
        /// Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageSessionsBulkWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);
        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteOutboundMessage (int? id);

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOutboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages (bulk)
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteOutboundMessagesBulk (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);

        /// <summary>
        /// Delete messages (bulk)
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOutboundMessagesBulkWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteScheduledMessage (int? id);

        /// <summary>
        /// Delete a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete scheduled messages (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteScheduledMessagesBulk (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);

        /// <summary>
        /// Delete scheduled messages (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledMessagesBulkWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);
        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSenderId (int? id);

        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSenderIdWithHttpInfo (int? id);
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteTemplate (int? id);

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (int? id);
        /// <summary>
        /// Delete templates (bulk)
        /// </summary>
        /// <remarks>
        /// Delete templates by given IDs or delete all templates.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteTemplatesBulk (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);

        /// <summary>
        /// Delete templates (bulk)
        /// </summary>
        /// <remarks>
        /// Delete templates by given IDs or delete all templates.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplatesBulkWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);
        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>DoCarrierLookupResponse</returns>
        DoCarrierLookupResponse DoCarrierLookup (string phone, string country = null);

        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>ApiResponse of DoCarrierLookupResponse</returns>
        ApiResponse<DoCarrierLookupResponse> DoCarrierLookupWithHttpInfo (string phone, string country = null);
        /// <summary>
        /// Email Lookup
        /// </summary>
        /// <remarks>
        /// To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>DoEmailLookupResponse</returns>
        DoEmailLookupResponse DoEmailLookup (string email);

        /// <summary>
        /// Email Lookup
        /// </summary>
        /// <remarks>
        /// To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>ApiResponse of DoEmailLookupResponse</returns>
        ApiResponse<DoEmailLookupResponse> DoEmailLookupWithHttpInfo (string email);
        /// <summary>
        /// Get all bulk sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetAllBulkSessionsPaginatedResponse</returns>
        GetAllBulkSessionsPaginatedResponse GetAllBulkSessions (int? page = null, int? limit = null);

        /// <summary>
        /// Get all bulk sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllBulkSessionsPaginatedResponse</returns>
        ApiResponse<GetAllBulkSessionsPaginatedResponse> GetAllBulkSessionsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>GetAllChatsPaginatedResponse</returns>
        GetAllChatsPaginatedResponse GetAllChats (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);

        /// <summary>
        /// Get all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAllChatsPaginatedResponse</returns>
        ApiResponse<GetAllChatsPaginatedResponse> GetAllChatsWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);
        /// <summary>
        /// Get all inbound messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetAllInboundMessagesPaginatedResponse</returns>
        GetAllInboundMessagesPaginatedResponse GetAllInboundMessages (int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all inbound messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllInboundMessagesPaginatedResponse</returns>
        ApiResponse<GetAllInboundMessagesPaginatedResponse> GetAllInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all sessions
        /// </summary>
        /// <remarks>
        /// Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetAllMessageSessionsPaginatedResponse</returns>
        GetAllMessageSessionsPaginatedResponse GetAllMessageSessions (int? page = null, int? limit = null);

        /// <summary>
        /// Get all sessions
        /// </summary>
        /// <remarks>
        /// Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllMessageSessionsPaginatedResponse</returns>
        ApiResponse<GetAllMessageSessionsPaginatedResponse> GetAllMessageSessionsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>GetAllOutboundMessagesPaginatedResponse</returns>
        GetAllOutboundMessagesPaginatedResponse GetAllOutboundMessages (int? page = null, int? limit = null, int? lastId = null);

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>ApiResponse of GetAllOutboundMessagesPaginatedResponse</returns>
        ApiResponse<GetAllOutboundMessagesPaginatedResponse> GetAllOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null);
        /// <summary>
        /// Get all scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetAllScheduledMessagesPaginatedResponse</returns>
        GetAllScheduledMessagesPaginatedResponse GetAllScheduledMessages (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllScheduledMessagesPaginatedResponse</returns>
        ApiResponse<GetAllScheduledMessagesPaginatedResponse> GetAllScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>GetAllTemplatesPaginatedResponse</returns>
        GetAllTemplatesPaginatedResponse GetAllTemplates (int? page = null, int? limit = null);

        /// <summary>
        /// Get all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>ApiResponse of GetAllTemplatesPaginatedResponse</returns>
        ApiResponse<GetAllTemplatesPaginatedResponse> GetAllTemplatesWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Find dedicated numbers available for purchase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>GetAvailableDedicatedNumbersResponse</returns>
        GetAvailableDedicatedNumbersResponse GetAvailableDedicatedNumbers (string country, int? prefix = null, int? tollfree = null);

        /// <summary>
        /// Find dedicated numbers available for purchase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAvailableDedicatedNumbersResponse</returns>
        ApiResponse<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersWithHttpInfo (string country, int? prefix = null, int? tollfree = null);
        /// <summary>
        /// Get available sender settings
        /// </summary>
        /// <remarks>
        /// Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>GetAvailableSenderSettingOptionsResponse</returns>
        GetAvailableSenderSettingOptionsResponse GetAvailableSenderSettingOptions (string country = null);

        /// <summary>
        /// Get available sender settings
        /// </summary>
        /// <remarks>
        /// Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>ApiResponse of GetAvailableSenderSettingOptionsResponse</returns>
        ApiResponse<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsWithHttpInfo (string country = null);
        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationOptionsResponse</returns>
        GetBalanceNotificationOptionsResponse GetBalanceNotificationOptions ();

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationOptionsResponse</returns>
        ApiResponse<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsWithHttpInfo ();
        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationSettingsResponse</returns>
        GetBalanceNotificationSettingsResponse GetBalanceNotificationSettings ();

        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationSettingsResponse</returns>
        ApiResponse<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// Get blocked contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetBlockedContactsPaginatedResponse</returns>
        GetBlockedContactsPaginatedResponse GetBlockedContacts (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get blocked contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetBlockedContactsPaginatedResponse</returns>
        ApiResponse<GetBlockedContactsPaginatedResponse> GetBlockedContactsWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get bulk session status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>BulkSession</returns>
        BulkSession GetBulkSession (int? id);

        /// <summary>
        /// Get bulk session status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of BulkSession</returns>
        ApiResponse<BulkSession> GetBulkSessionWithHttpInfo (int? id);
        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallbackSettingsResponse</returns>
        GetCallbackSettingsResponse GetCallbackSettings ();

        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallbackSettingsResponse</returns>
        ApiResponse<GetCallbackSettingsResponse> GetCallbackSettingsWithHttpInfo ();
        /// <summary>
        /// Get a single chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        Chat GetChat (int? id);

        /// <summary>
        /// Get a single chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by phone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>Chat</returns>
        Chat GetChatByPhone (string phone, int? upsert = null, int? reopen = null);

        /// <summary>
        /// Find chats by phone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatByPhoneWithHttpInfo (string phone, int? upsert = null, int? reopen = null);
        /// <summary>
        /// Get chat messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>GetChatMessagesPaginatedResponse</returns>
        GetChatMessagesPaginatedResponse GetChatMessages (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null);

        /// <summary>
        /// Get chat messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChatMessagesPaginatedResponse</returns>
        ApiResponse<GetChatMessagesPaginatedResponse> GetChatMessagesWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null);
        /// <summary>
        /// Get the details of a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>Contact</returns>
        Contact GetContact (int? id);

        /// <summary>
        /// Get the details of a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactWithHttpInfo (int? id);
        /// <summary>
        /// Get the details of a specific contact by phone number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Contact</returns>
        Contact GetContactByPhone (string phone);

        /// <summary>
        /// Get the details of a specific contact by phone number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactByPhoneWithHttpInfo (string phone);
        /// <summary>
        /// Check if a phone number is blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>Contact</returns>
        Contact GetContactIfBlocked (string phone);

        /// <summary>
        /// Check if a phone number is blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactIfBlockedWithHttpInfo (string phone);
        /// <summary>
        /// Check import progress
        /// </summary>
        /// <remarks>
        /// Get contact import session progress.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetContactImportSessionProgressResponse</returns>
        GetContactImportSessionProgressResponse GetContactImportSessionProgress (int? id);

        /// <summary>
        /// Check import progress
        /// </summary>
        /// <remarks>
        /// Get contact import session progress.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetContactImportSessionProgressResponse</returns>
        ApiResponse<GetContactImportSessionProgressResponse> GetContactImportSessionProgressWithHttpInfo (int? id);
        /// <summary>
        /// Get a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactNote</returns>
        ContactNote GetContactNote (int? id);

        /// <summary>
        /// Get a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactNote</returns>
        ApiResponse<ContactNote> GetContactNoteWithHttpInfo (int? id);
        /// <summary>
        /// Fetch notes assigned to a given contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetContactNotesPaginatedResponse</returns>
        GetContactNotesPaginatedResponse GetContactNotes (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Fetch notes assigned to a given contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetContactNotesPaginatedResponse</returns>
        ApiResponse<GetContactNotesPaginatedResponse> GetContactNotesWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetContactsPaginatedResponse</returns>
        GetContactsPaginatedResponse GetContacts (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsPaginatedResponse</returns>
        ApiResponse<GetContactsPaginatedResponse> GetContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get contacts autocomplete suggestions
        /// </summary>
        /// <remarks>
        /// Get contacts autocomplete suggestions by given search terms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>GetContactsAutocompleteResponse</returns>
        GetContactsAutocompleteResponse GetContactsAutocomplete (string query, int? limit = null, int? lists = null);

        /// <summary>
        /// Get contacts autocomplete suggestions
        /// </summary>
        /// <remarks>
        /// Get contacts autocomplete suggestions by given search terms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>ApiResponse of GetContactsAutocompleteResponse</returns>
        ApiResponse<GetContactsAutocompleteResponse> GetContactsAutocompleteWithHttpInfo (string query, int? limit = null, int? lists = null);
        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetContactsByListIdPaginatedResponse</returns>
        GetContactsByListIdPaginatedResponse GetContactsByListId (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsByListIdPaginatedResponse</returns>
        ApiResponse<GetContactsByListIdPaginatedResponse> GetContactsByListIdWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCountriesResponse</returns>
        GetCountriesResponse GetCountries ();

        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCountriesResponse</returns>
        ApiResponse<GetCountriesResponse> GetCountriesWithHttpInfo ();
        /// <summary>
        /// Get current account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetCurrentUser ();

        /// <summary>
        /// Get current account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Get the details of a specific custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserCustomField</returns>
        UserCustomField GetCustomField (int? id);

        /// <summary>
        /// Get the details of a specific custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserCustomField</returns>
        ApiResponse<UserCustomField> GetCustomFieldWithHttpInfo (int? id);
        /// <summary>
        /// Get all custom fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetCustomFieldsPaginatedResponse</returns>
        GetCustomFieldsPaginatedResponse GetCustomFields (int? page = null, int? limit = null);

        /// <summary>
        /// Get all custom fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetCustomFieldsPaginatedResponse</returns>
        ApiResponse<GetCustomFieldsPaginatedResponse> GetCustomFieldsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get the details of a specific dedicated number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UsersInbound</returns>
        UsersInbound GetDedicatedNumber (int? id);

        /// <summary>
        /// Get the details of a specific dedicated number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UsersInbound</returns>
        ApiResponse<UsersInbound> GetDedicatedNumberWithHttpInfo (int? id);
        /// <summary>
        /// Get favorite contacts and lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>GetFavoritesPaginatedResponse</returns>
        GetFavoritesPaginatedResponse GetFavorites (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Get favorite contacts and lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>ApiResponse of GetFavoritesPaginatedResponse</returns>
        ApiResponse<GetFavoritesPaginatedResponse> GetFavoritesWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Get a single inbound message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>MessageIn</returns>
        MessageIn GetInboundMessage (int? id);

        /// <summary>
        /// Get a single inbound message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>ApiResponse of MessageIn</returns>
        ApiResponse<MessageIn> GetInboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInboundMessagesNotificationSettingsResponse</returns>
        GetInboundMessagesNotificationSettingsResponse GetInboundMessagesNotificationSettings ();

        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetInboundMessagesNotificationSettingsResponse</returns>
        ApiResponse<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// Get all invoices
        /// </summary>
        /// <remarks>
        /// With the TextMagic API, you can check the invoices and transactions for your account.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetInvoicesPaginatedResponse</returns>
        GetInvoicesPaginatedResponse GetInvoices (int? page = null, int? limit = null);

        /// <summary>
        /// Get all invoices
        /// </summary>
        /// <remarks>
        /// With the TextMagic API, you can check the invoices and transactions for your account.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetInvoicesPaginatedResponse</returns>
        ApiResponse<GetInvoicesPaginatedResponse> GetInvoicesWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get the details of a specific list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List</returns>
        List GetList (int? id);

        /// <summary>
        /// Get the details of a specific list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List</returns>
        ApiResponse<List> GetListWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact IDs in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetListContactsIdsResponse</returns>
        GetListContactsIdsResponse GetListContactsIds (int? id);

        /// <summary>
        /// Get all contact IDs in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetListContactsIdsResponse</returns>
        ApiResponse<GetListContactsIdsResponse> GetListContactsIdsWithHttpInfo (int? id);
        /// <summary>
        /// Get all lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>GetListsPaginatedResponse</returns>
        GetListsPaginatedResponse GetLists (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);

        /// <summary>
        /// Get all lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetListsPaginatedResponse</returns>
        ApiResponse<GetListsPaginatedResponse> GetListsWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);
        /// <summary>
        /// Get a contact&#39;s lists
        /// </summary>
        /// <remarks>
        /// Get all the lists in which a contact is included.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetListsOfContactPaginatedResponse</returns>
        GetListsOfContactPaginatedResponse GetListsOfContact (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Get a contact&#39;s lists
        /// </summary>
        /// <remarks>
        /// Get all the lists in which a contact is included.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetListsOfContactPaginatedResponse</returns>
        ApiResponse<GetListsOfContactPaginatedResponse> GetListsOfContactWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>GetMessagePreviewResponse</returns>
        GetMessagePreviewResponse GetMessagePreview (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>ApiResponse of GetMessagePreviewResponse</returns>
        ApiResponse<GetMessagePreviewResponse> GetMessagePreviewWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Check message price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>GetMessagePriceResponse</returns>
        GetMessagePriceResponse GetMessagePrice (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Check message price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>ApiResponse of GetMessagePriceResponse</returns>
        ApiResponse<GetMessagePriceResponse> GetMessagePriceWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Get a session&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a specific session’s details.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>MessageSession</returns>
        MessageSession GetMessageSession (int? id);

        /// <summary>
        /// Get a session&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a specific session’s details.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>ApiResponse of MessageSession</returns>
        ApiResponse<MessageSession> GetMessageSessionWithHttpInfo (int? id);
        /// <summary>
        /// Get a session&#x60;s statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>GetMessageSessionStatResponse</returns>
        GetMessageSessionStatResponse GetMessageSessionStat (int? id, int? includeDeleted = null);

        /// <summary>
        /// Get a session&#x60;s statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessageSessionStatResponse</returns>
        ApiResponse<GetMessageSessionStatResponse> GetMessageSessionStatWithHttpInfo (int? id, int? includeDeleted = null);
        /// <summary>
        /// Get a session&#x60;s messages
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>GetMessagesBySessionIdPaginatedResponse</returns>
        GetMessagesBySessionIdPaginatedResponse GetMessagesBySessionId (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);

        /// <summary>
        /// Get a session&#x60;s messages
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessagesBySessionIdPaginatedResponse</returns>
        ApiResponse<GetMessagesBySessionIdPaginatedResponse> GetMessagesBySessionIdWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);
        /// <summary>
        /// Get sent/received messages counters values
        /// </summary>
        /// <remarks>
        /// Get total contacts, sent messages and received messages counters values.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagingCountersResponse</returns>
        GetMessagingCountersResponse GetMessagingCounters ();

        /// <summary>
        /// Get sent/received messages counters values
        /// </summary>
        /// <remarks>
        /// Get total contacts, sent messages and received messages counters values.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagingCountersResponse</returns>
        ApiResponse<GetMessagingCountersResponse> GetMessagingCountersWithHttpInfo ();
        /// <summary>
        /// Get messaging statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>GetMessagingStatResponse</returns>
        GetMessagingStatResponse GetMessagingStat (string by = null, int? start = null, int? end = null);

        /// <summary>
        /// Get messaging statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>ApiResponse of GetMessagingStatResponse</returns>
        ApiResponse<GetMessagingStatResponse> GetMessagingStatWithHttpInfo (string by = null, int? start = null, int? end = null);
        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageOut</returns>
        MessageOut GetOutboundMessage (int? id);

        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageOut</returns>
        ApiResponse<MessageOut> GetOutboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get the outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetOutboundMessagesHistoryPaginatedResponse</returns>
        GetOutboundMessagesHistoryPaginatedResponse GetOutboundMessagesHistory (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get the outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetOutboundMessagesHistoryPaginatedResponse</returns>
        ApiResponse<GetOutboundMessagesHistoryPaginatedResponse> GetOutboundMessagesHistoryWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessagesIcs</returns>
        MessagesIcs GetScheduledMessage (int? id);

        /// <summary>
        /// Get a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessagesIcs</returns>
        ApiResponse<MessagesIcs> GetScheduledMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get the details of a specific Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SenderId</returns>
        SenderId GetSenderId (int? id);

        /// <summary>
        /// Get the details of a specific Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SenderId</returns>
        ApiResponse<SenderId> GetSenderIdWithHttpInfo (int? id);
        /// <summary>
        /// Get all your approved Sender IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetSenderIdsPaginatedResponse</returns>
        GetSenderIdsPaginatedResponse GetSenderIds (int? page = null, int? limit = null);

        /// <summary>
        /// Get all your approved Sender IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSenderIdsPaginatedResponse</returns>
        ApiResponse<GetSenderIdsPaginatedResponse> GetSenderIdsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get current sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>GetSenderSettingsResponse</returns>
        GetSenderSettingsResponse GetSenderSettings (string country = null);

        /// <summary>
        /// Get current sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>ApiResponse of GetSenderSettingsResponse</returns>
        ApiResponse<GetSenderSettingsResponse> GetSenderSettingsWithHttpInfo (string country = null);
        /// <summary>
        /// Get spending statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>GetSpendingStatPaginatedResponse</returns>
        GetSpendingStatPaginatedResponse GetSpendingStat (int? page = null, int? limit = null, string start = null, string end = null);

        /// <summary>
        /// Get spending statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>ApiResponse of GetSpendingStatPaginatedResponse</returns>
        ApiResponse<GetSpendingStatPaginatedResponse> GetSpendingStatWithHttpInfo (int? page = null, int? limit = null, string start = null, string end = null);
        /// <summary>
        /// Get sub-account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        User GetSubaccount (int? id);

        /// <summary>
        /// Get sub-account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSubaccountWithHttpInfo (int? id);
        /// <summary>
        /// Get a sub-accounts list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>User</returns>
        User GetSubaccounts (int? page = null, int? limit = null);

        /// <summary>
        /// Get a sub-accounts list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSubaccountsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name
        /// </summary>
        /// <remarks>
        /// Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetSubaccountsWithTokensResponse</returns>
        GetSubaccountsWithTokensResponse GetSubaccountsWithTokens (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);

        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name
        /// </summary>
        /// <remarks>
        /// Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSubaccountsWithTokensResponse</returns>
        ApiResponse<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);
        /// <summary>
        /// Get a template&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a single template.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageTemplate</returns>
        MessageTemplate GetTemplate (int? id);

        /// <summary>
        /// Get a template&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a single template.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        ApiResponse<MessageTemplate> GetTemplateWithHttpInfo (int? id);
        /// <summary>
        /// Get timezones
        /// </summary>
        /// <remarks>
        /// Return all available timezone IDs
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>GetTimezonesResponse</returns>
        GetTimezonesResponse GetTimezones (int? full = null);

        /// <summary>
        /// Get timezones
        /// </summary>
        /// <remarks>
        /// Return all available timezone IDs
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetTimezonesResponse</returns>
        ApiResponse<GetTimezonesResponse> GetTimezonesWithHttpInfo (int? full = null);
        /// <summary>
        /// Get unread messages number
        /// </summary>
        /// <remarks>
        /// Get the total amount of unread messages in the current user chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadMessagesTotalResponse</returns>
        GetUnreadMessagesTotalResponse GetUnreadMessagesTotal ();

        /// <summary>
        /// Get unread messages number
        /// </summary>
        /// <remarks>
        /// Get the total amount of unread messages in the current user chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadMessagesTotalResponse</returns>
        ApiResponse<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalWithHttpInfo ();
        /// <summary>
        /// Get the details of a specific unsubscribed contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnsubscribedContact</returns>
        UnsubscribedContact GetUnsubscribedContact (int? id);

        /// <summary>
        /// Get the details of a specific unsubscribed contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnsubscribedContact</returns>
        ApiResponse<UnsubscribedContact> GetUnsubscribedContactWithHttpInfo (int? id);
        /// <summary>
        /// Get all unsubscribed contacts
        /// </summary>
        /// <remarks>
        /// When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetUnsubscribersPaginatedResponse</returns>
        GetUnsubscribersPaginatedResponse GetUnsubscribers (int? page = null, int? limit = null);

        /// <summary>
        /// Get all unsubscribed contacts
        /// </summary>
        /// <remarks>
        /// When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetUnsubscribersPaginatedResponse</returns>
        ApiResponse<GetUnsubscribersPaginatedResponse> GetUnsubscribersWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all your dedicated numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>GetUserDedicatedNumbersPaginatedResponse</returns>
        GetUserDedicatedNumbersPaginatedResponse GetUserDedicatedNumbers (int? page = null, int? limit = null, int? surveyId = null);

        /// <summary>
        /// Get all your dedicated numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>ApiResponse of GetUserDedicatedNumbersPaginatedResponse</returns>
        ApiResponse<GetUserDedicatedNumbersPaginatedResponse> GetUserDedicatedNumbersWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null);
        /// <summary>
        /// Import contacts
        /// </summary>
        /// <remarks>
        /// Import contacts from the CSV, XLS or XLSX file.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse ImportContacts (System.IO.Stream file, string column, int? listId = null, string listName = null);

        /// <summary>
        /// Import contacts
        /// </summary>
        /// <remarks>
        /// Import contacts from the CSV, XLS or XLSX file.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> ImportContactsWithHttpInfo (System.IO.Stream file, string column, int? listId = null, string listName = null);
        /// <summary>
        /// Invite a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns></returns>
        void InviteSubaccount (InviteSubaccountInputObject inviteSubaccountInputObject);

        /// <summary>
        /// Invite a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteSubaccountWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject);
        /// <summary>
        /// Mark chats as read (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as read by chat IDs or mark all chats as read
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns></returns>
        void MarkChatsReadBulk (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);

        /// <summary>
        /// Mark chats as read (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as read by chat IDs or mark all chats as read
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatsReadBulkWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);
        /// <summary>
        /// Mark chats as unread (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns></returns>
        void MarkChatsUnreadBulk (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);

        /// <summary>
        /// Mark chats as unread (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatsUnreadBulkWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);
        /// <summary>
        /// Mute chat sounds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse MuteChat (MuteChatInputObject muteChatInputObject);

        /// <summary>
        /// Mute chat sounds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> MuteChatWithHttpInfo (MuteChatInputObject muteChatInputObject);
        /// <summary>
        /// Mute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Mute several chats by chat ids or mute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns></returns>
        void MuteChatsBulk (MuteChatsBulkInputObject muteChatsBulkInputObject);

        /// <summary>
        /// Mute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Mute several chats by chat ids or mute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MuteChatsBulkWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject);
        /// <summary>
        /// Ping
        /// </summary>
        /// <remarks>
        /// Make a simple ping request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PingResponse</returns>
        PingResponse Ping ();

        /// <summary>
        /// Ping
        /// </summary>
        /// <remarks>
        /// Make a simple ping request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PingResponse</returns>
        ApiResponse<PingResponse> PingWithHttpInfo ();
        /// <summary>
        /// Reopen chats (bulk)
        /// </summary>
        /// <remarks>
        /// Reopen chats by chat IDs or reopen all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns></returns>
        void ReopenChatsBulk (ReopenChatsBulkInputObject reopenChatsBulkInputObject);

        /// <summary>
        /// Reopen chats (bulk)
        /// </summary>
        /// <remarks>
        /// Reopen chats by chat IDs or reopen all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReopenChatsBulkWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject);
        /// <summary>
        /// Request a new REST API token for sub-account
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>User</returns>
        User RequestNewSubaccountToken (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);

        /// <summary>
        /// Request a new REST API token for sub-account
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> RequestNewSubaccountTokenWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);
        /// <summary>
        /// Apply for a new Sender ID
        /// </summary>
        /// <remarks>
        /// &gt; Sender IDs are shared among all of your sub-accounts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse RequestSenderId (RequestSenderIdInputObject requestSenderIdInputObject);

        /// <summary>
        /// Apply for a new Sender ID
        /// </summary>
        /// <remarks>
        /// &gt; Sender IDs are shared among all of your sub-accounts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> RequestSenderIdWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject);
        /// <summary>
        /// Find chats by message text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>SearchChatsPaginatedResponse</returns>
        SearchChatsPaginatedResponse SearchChats (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Find chats by message text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>ApiResponse of SearchChatsPaginatedResponse</returns>
        ApiResponse<SearchChatsPaginatedResponse> SearchChatsWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Find chats (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>SearchChatsByIdsPaginatedResponse</returns>
        SearchChatsByIdsPaginatedResponse SearchChatsByIds (int? page = null, int? limit = null, string ids = null);

        /// <summary>
        /// Find chats (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>ApiResponse of SearchChatsByIdsPaginatedResponse</returns>
        ApiResponse<SearchChatsByIdsPaginatedResponse> SearchChatsByIdsWithHttpInfo (int? page = null, int? limit = null, string ids = null);
        /// <summary>
        /// Find chats by recipient
        /// </summary>
        /// <remarks>
        /// Find chats by recipient (contact, list name or phone number).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>SearchChatsByReceipentPaginatedResponse</returns>
        SearchChatsByReceipentPaginatedResponse SearchChatsByReceipent (int? page = null, int? limit = null, string query = null, string orderBy = null);

        /// <summary>
        /// Find chats by recipient
        /// </summary>
        /// <remarks>
        /// Find chats by recipient (contact, list name or phone number).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>ApiResponse of SearchChatsByReceipentPaginatedResponse</returns>
        ApiResponse<SearchChatsByReceipentPaginatedResponse> SearchChatsByReceipentWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null);
        /// <summary>
        /// Find contacts by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>SearchContactsPaginatedResponse</returns>
        SearchContactsPaginatedResponse SearchContacts (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find contacts by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchContactsPaginatedResponse</returns>
        ApiResponse<SearchContactsPaginatedResponse> SearchContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find inbound messages
        /// </summary>
        /// <remarks>
        /// Find inbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>SearchInboundMessagesPaginatedResponse</returns>
        SearchInboundMessagesPaginatedResponse SearchInboundMessages (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);

        /// <summary>
        /// Find inbound messages
        /// </summary>
        /// <remarks>
        /// Find inbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>ApiResponse of SearchInboundMessagesPaginatedResponse</returns>
        ApiResponse<SearchInboundMessagesPaginatedResponse> SearchInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);
        /// <summary>
        /// Find lists by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>SearchListsPaginatedResponse</returns>
        SearchListsPaginatedResponse SearchLists (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find lists by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchListsPaginatedResponse</returns>
        ApiResponse<SearchListsPaginatedResponse> SearchListsWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>SearchOutboundMessagesPaginatedResponse</returns>
        SearchOutboundMessagesPaginatedResponse SearchOutboundMessages (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);

        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>ApiResponse of SearchOutboundMessagesPaginatedResponse</returns>
        ApiResponse<SearchOutboundMessagesPaginatedResponse> SearchOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);
        /// <summary>
        /// Find scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>SearchScheduledMessagesPaginatedResponse</returns>
        SearchScheduledMessagesPaginatedResponse SearchScheduledMessages (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchScheduledMessagesPaginatedResponse</returns>
        ApiResponse<SearchScheduledMessagesPaginatedResponse> SearchScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find templates by criteria
        /// </summary>
        /// <remarks>
        /// Find user templates by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>SearchTemplatesPaginatedResponse</returns>
        SearchTemplatesPaginatedResponse SearchTemplates (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);

        /// <summary>
        /// Find templates by criteria
        /// </summary>
        /// <remarks>
        /// Find user templates by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>ApiResponse of SearchTemplatesPaginatedResponse</returns>
        ApiResponse<SearchTemplatesPaginatedResponse> SearchTemplatesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// This is the main entrypoint to send messages. See the examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse SendMessage (SendMessageInputObject sendMessageInputObject);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// This is the main entrypoint to send messages. See the examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> SendMessageWithHttpInfo (SendMessageInputObject sendMessageInputObject);
        /// <summary>
        /// Step 1: Send a verification code 
        /// </summary>
        /// <remarks>
        /// Sends a verification code to a specified phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>SendPhoneVerificationCodeResponse</returns>
        SendPhoneVerificationCodeResponse SendPhoneVerificationCodeTFA (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject);

        /// <summary>
        /// Step 1: Send a verification code 
        /// </summary>
        /// <remarks>
        /// Sends a verification code to a specified phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>ApiResponse of SendPhoneVerificationCodeResponse</returns>
        ApiResponse<SendPhoneVerificationCodeResponse> SendPhoneVerificationCodeTFAWithHttpInfo (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject);
        /// <summary>
        /// Change chat status
        /// </summary>
        /// <remarks>
        /// Set the status of the chat given by ID.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse SetChatStatus (SetChatStatusInputObject setChatStatusInputObject);

        /// <summary>
        /// Change chat status
        /// </summary>
        /// <remarks>
        /// Set the status of the chat given by ID.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> SetChatStatusWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject);
        /// <summary>
        /// Unblock a contact by phone number
        /// </summary>
        /// <remarks>
        /// Unblock a contact by phone number
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns></returns>
        void UnblockContact (UnblockContactInputObject unblockContactInputObject);

        /// <summary>
        /// Unblock a contact by phone number
        /// </summary>
        /// <remarks>
        /// Unblock a contact by phone number
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockContactWithHttpInfo (UnblockContactInputObject unblockContactInputObject);
        /// <summary>
        /// Unblock contacts (bulk)
        /// </summary>
        /// <remarks>
        /// Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns></returns>
        void UnblockContactsBulk (UnblockContactsBulkInputObject unblockContactsBulkInputObject);

        /// <summary>
        /// Unblock contacts (bulk)
        /// </summary>
        /// <remarks>
        /// Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockContactsBulkWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject);
        /// <summary>
        /// Unmute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Unmute several chats by chat ids or unmute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns></returns>
        void UnmuteChatsBulk (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);

        /// <summary>
        /// Unmute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Unmute several chats by chat ids or unmute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnmuteChatsBulkWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);
        /// <summary>
        /// Manually unsubscribe a contact
        /// </summary>
        /// <remarks>
        /// &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UnsubscribeContact (UnsubscribeContactInputObject unsubscribeContactInputObject);

        /// <summary>
        /// Manually unsubscribe a contact
        /// </summary>
        /// <remarks>
        /// &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UnsubscribeContactWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject);
        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateBalanceNotificationSettings (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);

        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBalanceNotificationSettingsWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);
        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateCallbackSettings (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);

        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallbackSettingsWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);
        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateChatDesktopNotificationSettings (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);

        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateChatDesktopNotificationSettingsWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);
        /// <summary>
        /// Edit a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateContact (UpdateContactInputObject updateContactInputObject, int? id);

        /// <summary>
        /// Edit a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateContactWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id);
        /// <summary>
        /// Update a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateContactNote (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);

        /// <summary>
        /// Update a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateContactNoteWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);
        /// <summary>
        /// Edit current account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>UpdateCurrentUserResponse</returns>
        UpdateCurrentUserResponse UpdateCurrentUser (UpdateCurrentUserInputObject updateCurrentUserInputObject);

        /// <summary>
        /// Edit current account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>ApiResponse of UpdateCurrentUserResponse</returns>
        ApiResponse<UpdateCurrentUserResponse> UpdateCurrentUserWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject);
        /// <summary>
        /// Edit a custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateCustomField (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);

        /// <summary>
        /// Edit a custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateCustomFieldWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);
        /// <summary>
        /// Edit the custom field value of a specified contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateCustomFieldValue (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id);

        /// <summary>
        /// Edit the custom field value of a specified contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateCustomFieldValueWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id);
        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateInboundMessagesNotificationSettings (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);

        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateInboundMessagesNotificationSettingsWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);
        /// <summary>
        /// Edit a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateList (int? id, UpdateListObject updateListObject = null);

        /// <summary>
        /// Edit a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateListWithHttpInfo (int? id, UpdateListObject updateListObject = null);
        /// <summary>
        /// Change sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns></returns>
        void UpdateSenderSetting (UpdateSenderSettingInputObject updateSenderSettingInputObject);

        /// <summary>
        /// Change sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSenderSettingWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject);
        /// <summary>
        /// Update a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateTemplate (UpdateTemplateInputObject updateTemplateInputObject, int? id);

        /// <summary>
        /// Update a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateTemplateWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id);
        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns></returns>
        void UploadAvatar (System.IO.Stream image);

        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadAvatarWithHttpInfo (System.IO.Stream image);
        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UploadContactAvatar (System.IO.Stream image, int? id);

        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UploadContactAvatarWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Add an avatar for a list
        /// </summary>
        /// <remarks>
        /// Add an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UploadListAvatar (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for a list
        /// </summary>
        /// <remarks>
        /// Add an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UploadListAvatarWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        UploadMessageAttachmentResponse UploadMessageAttachment (System.IO.Stream file);

        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        ApiResponse<UploadMessageAttachmentResponse> UploadMessageAttachmentWithHttpInfo (System.IO.Stream file);
        /// <summary>
        /// Upload message mms attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to mms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        UploadMessageAttachmentResponse UploadMessageMMSAttachment (System.IO.Stream file);

        /// <summary>
        /// Upload message mms attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to mms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        ApiResponse<UploadMessageAttachmentResponse> UploadMessageMMSAttachmentWithHttpInfo (System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign contacts to a list
        /// </summary>
        /// <remarks>
        /// &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> AssignContactsToListAsync (AssignContactsToListInputObject assignContactsToListInputObject, int? id);

        /// <summary>
        /// Assign contacts to a list
        /// </summary>
        /// <remarks>
        /// &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> AssignContactsToListAsyncWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id);
        /// <summary>
        /// Block a contact by phone number
        /// </summary>
        /// <remarks>
        /// Block a contact from inbound and outbound communication by phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> BlockContactAsync (BlockContactInputObject blockContactInputObject);

        /// <summary>
        /// Block a contact by phone number
        /// </summary>
        /// <remarks>
        /// Block a contact from inbound and outbound communication by phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> BlockContactAsyncWithHttpInfo (BlockContactInputObject blockContactInputObject);
        /// <summary>
        /// Buy a dedicated number
        /// </summary>
        /// <remarks>
        /// To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuyDedicatedNumberAsync (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);

        /// <summary>
        /// Buy a dedicated number
        /// </summary>
        /// <remarks>
        /// To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuyDedicatedNumberAsyncWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);
        /// <summary>
        /// Cancel verification process
        /// </summary>
        /// <remarks>
        /// You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelVerificationAsync (string verifyId);

        /// <summary>
        /// Cancel verification process
        /// </summary>
        /// <remarks>
        /// You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelVerificationAsyncWithHttpInfo (string verifyId);
        /// <summary>
        /// Step 2: Check the verification code 
        /// </summary>
        /// <remarks>
        /// Check received code from user with the code which was actually sent.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckPhoneVerificationCodeTFAAsync (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject);

        /// <summary>
        /// Step 2: Check the verification code 
        /// </summary>
        /// <remarks>
        /// Check received code from user with the code which was actually sent.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckPhoneVerificationCodeTFAAsyncWithHttpInfo (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject);
        /// <summary>
        /// Reset list members to the specified contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> ClearAndAssignContactsToListAsync (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);

        /// <summary>
        /// Reset list members to the specified contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ClearAndAssignContactsToListAsyncWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);
        /// <summary>
        /// Close chats (bulk)
        /// </summary>
        /// <remarks>
        /// Close chats by chat IDs or close all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseChatsBulkAsync (CloseChatsBulkInputObject closeChatsBulkInputObject);

        /// <summary>
        /// Close chats (bulk)
        /// </summary>
        /// <remarks>
        /// Close chats by chat IDs or close all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseChatsBulkAsyncWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject);
        /// <summary>
        /// Close read chats
        /// </summary>
        /// <remarks>
        /// Close all chats that have no unread messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseReadChatsAsync ();

        /// <summary>
        /// Close read chats
        /// </summary>
        /// <remarks>
        /// Close all chats that have no unread messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseReadChatsAsyncWithHttpInfo ();
        /// <summary>
        /// Close sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseSubaccountAsync (int? id);

        /// <summary>
        /// Close sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseSubaccountAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Add a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactAsync (CreateContactInputObject createContactInputObject);

        /// <summary>
        /// Add a new contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactAsyncWithHttpInfo (CreateContactInputObject createContactInputObject);
        /// <summary>
        /// Create a new contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactNoteAsync (CreateContactNoteInputObject createContactNoteInputObject, int? id);

        /// <summary>
        /// Create a new contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactNoteAsyncWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id);
        /// <summary>
        /// Add a new custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateCustomFieldAsync (CreateCustomFieldInputObject createCustomFieldInputObject);

        /// <summary>
        /// Add a new custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateCustomFieldAsyncWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject);
        /// <summary>
        /// Create a new list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateListAsync (CreateListInputObject createListInputObject);

        /// <summary>
        /// Create a new list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateListAsyncWithHttpInfo (CreateListInputObject createListInputObject);
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateTemplateAsync (CreateTemplateInputObject createTemplateInputObject);

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateTemplateAsyncWithHttpInfo (CreateTemplateInputObject createTemplateInputObject);
        /// <summary>
        /// Delete contacts (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllContactsAsync ();

        /// <summary>
        /// Delete contacts (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllContactsAsyncWithHttpInfo ();
        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllOutboundMessagesAsync ();

        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOutboundMessagesAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAvatarAsync ();

        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvatarAsyncWithHttpInfo ();
        /// <summary>
        /// Delete chat messages by ID(s)
        /// </summary>
        /// <remarks>
        /// Delete messages from chat by given message IDs.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChatMessagesAsync (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);

        /// <summary>
        /// Delete chat messages by ID(s)
        /// </summary>
        /// <remarks>
        /// Delete messages from chat by given message IDs.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatMessagesAsyncWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);
        /// <summary>
        /// Delete chats (bulk)
        /// </summary>
        /// <remarks>
        /// Delete chats by given IDs or delete all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChatsBulkAsync (DeleteChatsBulkInputObject deleteChatsBulkInputObject);

        /// <summary>
        /// Delete chats (bulk)
        /// </summary>
        /// <remarks>
        /// Delete chats by given IDs or delete all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatsBulkAsyncWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject);
        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync (int? id);

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>
        /// &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAvatarAsync (int? id);

        /// <summary>
        /// Delete an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAvatarAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactNoteAsync (int? id);

        /// <summary>
        /// Delete a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNoteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact notes (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactNotesBulkAsync (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);

        /// <summary>
        /// Delete contact notes (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNotesBulkAsyncWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);
        /// <summary>
        /// Delete contacts by IDs (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsByIdsAsync (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);

        /// <summary>
        /// Delete contacts by IDs (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsByIdsAsyncWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);
        /// <summary>
        /// Unassign contacts from a list
        /// </summary>
        /// <remarks>
        /// &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsFromListAsync (DeleteContacsFromListObject deleteContacsFromListObject, int? id);

        /// <summary>
        /// Unassign contacts from a list
        /// </summary>
        /// <remarks>
        /// &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsFromListAsyncWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id);
        /// <summary>
        /// Delete a custom field
        /// </summary>
        /// <remarks>
        /// &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomFieldAsync (int? id);

        /// <summary>
        /// Delete a custom field
        /// </summary>
        /// <remarks>
        /// &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Cancel a dedicated number subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDedicatedNumberAsync (int? id);

        /// <summary>
        /// Cancel a dedicated number subscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDedicatedNumberAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single inbound message
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboundMessageAsync (int? id);

        /// <summary>
        /// Delete a single inbound message
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete inbound messages (bulk)
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboundMessagesBulkAsync (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);

        /// <summary>
        /// Delete inbound messages (bulk)
        /// </summary>
        /// <remarks>
        /// &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessagesBulkAsyncWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAsync (int? id);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for a list
        /// </summary>
        /// <remarks>
        /// Delete an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAvatarAsync (int? id);

        /// <summary>
        /// Delete an avatar for a list
        /// </summary>
        /// <remarks>
        /// Delete an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAvatarAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete contacts from a list (bulk)
        /// </summary>
        /// <remarks>
        /// Delete contacts from a list (bulk)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListContactsBulkAsync (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);

        /// <summary>
        /// Delete contacts from a list (bulk)
        /// </summary>
        /// <remarks>
        /// Delete contacts from a list (bulk)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListContactsBulkAsyncWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);
        /// <summary>
        /// Delete lists (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListsBulkAsync (DeleteListsBulkInputObject deleteListsBulkInputObject);

        /// <summary>
        /// Delete lists (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListsBulkAsyncWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject);
        /// <summary>
        /// Delete a session
        /// </summary>
        /// <remarks>
        /// Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageSessionAsync (int? id);

        /// <summary>
        /// Delete a session
        /// </summary>
        /// <remarks>
        /// Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete sessions (bulk)
        /// </summary>
        /// <remarks>
        /// Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageSessionsBulkAsync (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);

        /// <summary>
        /// Delete sessions (bulk)
        /// </summary>
        /// <remarks>
        /// Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionsBulkAsyncWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);
        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOutboundMessageAsync (int? id);

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages (bulk)
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOutboundMessagesBulkAsync (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);

        /// <summary>
        /// Delete messages (bulk)
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessagesBulkAsyncWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledMessageAsync (int? id);

        /// <summary>
        /// Delete a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete scheduled messages (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledMessagesBulkAsync (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);

        /// <summary>
        /// Delete scheduled messages (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessagesBulkAsyncWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);
        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSenderIdAsync (int? id);

        /// <summary>
        /// Delete a Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateAsync (int? id);

        /// <summary>
        /// Delete a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete templates (bulk)
        /// </summary>
        /// <remarks>
        /// Delete templates by given IDs or delete all templates.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplatesBulkAsync (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);

        /// <summary>
        /// Delete templates (bulk)
        /// </summary>
        /// <remarks>
        /// Delete templates by given IDs or delete all templates.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplatesBulkAsyncWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);
        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>Task of DoCarrierLookupResponse</returns>
        System.Threading.Tasks.Task<DoCarrierLookupResponse> DoCarrierLookupAsync (string phone, string country = null);

        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>Task of ApiResponse (DoCarrierLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoCarrierLookupResponse>> DoCarrierLookupAsyncWithHttpInfo (string phone, string country = null);
        /// <summary>
        /// Email Lookup
        /// </summary>
        /// <remarks>
        /// To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>Task of DoEmailLookupResponse</returns>
        System.Threading.Tasks.Task<DoEmailLookupResponse> DoEmailLookupAsync (string email);

        /// <summary>
        /// Email Lookup
        /// </summary>
        /// <remarks>
        /// To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>Task of ApiResponse (DoEmailLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoEmailLookupResponse>> DoEmailLookupAsyncWithHttpInfo (string email);
        /// <summary>
        /// Get all bulk sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetAllBulkSessionsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllBulkSessionsPaginatedResponse> GetAllBulkSessionsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all bulk sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllBulkSessionsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllBulkSessionsPaginatedResponse>> GetAllBulkSessionsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>Task of GetAllChatsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllChatsPaginatedResponse> GetAllChatsAsync (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);

        /// <summary>
        /// Get all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAllChatsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllChatsPaginatedResponse>> GetAllChatsAsyncWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);
        /// <summary>
        /// Get all inbound messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetAllInboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllInboundMessagesPaginatedResponse> GetAllInboundMessagesAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all inbound messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllInboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInboundMessagesPaginatedResponse>> GetAllInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all sessions
        /// </summary>
        /// <remarks>
        /// Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetAllMessageSessionsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllMessageSessionsPaginatedResponse> GetAllMessageSessionsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all sessions
        /// </summary>
        /// <remarks>
        /// Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllMessageSessionsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllMessageSessionsPaginatedResponse>> GetAllMessageSessionsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>Task of GetAllOutboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllOutboundMessagesPaginatedResponse> GetAllOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null);

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllOutboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllOutboundMessagesPaginatedResponse>> GetAllOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null);
        /// <summary>
        /// Get all scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetAllScheduledMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllScheduledMessagesPaginatedResponse> GetAllScheduledMessagesAsync (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllScheduledMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllScheduledMessagesPaginatedResponse>> GetAllScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>Task of GetAllTemplatesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllTemplatesPaginatedResponse> GetAllTemplatesAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTemplatesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTemplatesPaginatedResponse>> GetAllTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Find dedicated numbers available for purchase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>Task of GetAvailableDedicatedNumbersResponse</returns>
        System.Threading.Tasks.Task<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersAsync (string country, int? prefix = null, int? tollfree = null);

        /// <summary>
        /// Find dedicated numbers available for purchase
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAvailableDedicatedNumbersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableDedicatedNumbersResponse>> GetAvailableDedicatedNumbersAsyncWithHttpInfo (string country, int? prefix = null, int? tollfree = null);
        /// <summary>
        /// Get available sender settings
        /// </summary>
        /// <remarks>
        /// Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>Task of GetAvailableSenderSettingOptionsResponse</returns>
        System.Threading.Tasks.Task<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsAsync (string country = null);

        /// <summary>
        /// Get available sender settings
        /// </summary>
        /// <remarks>
        /// Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableSenderSettingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableSenderSettingOptionsResponse>> GetAvailableSenderSettingOptionsAsyncWithHttpInfo (string country = null);
        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationOptionsResponse</returns>
        System.Threading.Tasks.Task<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsAsync ();

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationOptionsResponse>> GetBalanceNotificationOptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationSettingsResponse</returns>
        System.Threading.Tasks.Task<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsAsync ();

        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationSettingsResponse>> GetBalanceNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get blocked contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetBlockedContactsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetBlockedContactsPaginatedResponse> GetBlockedContactsAsync (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get blocked contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetBlockedContactsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBlockedContactsPaginatedResponse>> GetBlockedContactsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get bulk session status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of BulkSession</returns>
        System.Threading.Tasks.Task<BulkSession> GetBulkSessionAsync (int? id);

        /// <summary>
        /// Get bulk session status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (BulkSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkSession>> GetBulkSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallbackSettingsResponse</returns>
        System.Threading.Tasks.Task<GetCallbackSettingsResponse> GetCallbackSettingsAsync ();

        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallbackSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCallbackSettingsResponse>> GetCallbackSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatAsync (int? id);

        /// <summary>
        /// Get a single chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by phone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatByPhoneAsync (string phone, int? upsert = null, int? reopen = null);

        /// <summary>
        /// Find chats by phone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatByPhoneAsyncWithHttpInfo (string phone, int? upsert = null, int? reopen = null);
        /// <summary>
        /// Get chat messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>Task of GetChatMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetChatMessagesPaginatedResponse> GetChatMessagesAsync (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null);

        /// <summary>
        /// Get chat messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChatMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChatMessagesPaginatedResponse>> GetChatMessagesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null);
        /// <summary>
        /// Get the details of a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactAsync (int? id);

        /// <summary>
        /// Get the details of a specific contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get the details of a specific contact by phone number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactByPhoneAsync (string phone);

        /// <summary>
        /// Get the details of a specific contact by phone number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByPhoneAsyncWithHttpInfo (string phone);
        /// <summary>
        /// Check if a phone number is blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactIfBlockedAsync (string phone);

        /// <summary>
        /// Check if a phone number is blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactIfBlockedAsyncWithHttpInfo (string phone);
        /// <summary>
        /// Check import progress
        /// </summary>
        /// <remarks>
        /// Get contact import session progress.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetContactImportSessionProgressResponse</returns>
        System.Threading.Tasks.Task<GetContactImportSessionProgressResponse> GetContactImportSessionProgressAsync (int? id);

        /// <summary>
        /// Check import progress
        /// </summary>
        /// <remarks>
        /// Get contact import session progress.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetContactImportSessionProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactImportSessionProgressResponse>> GetContactImportSessionProgressAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactNote</returns>
        System.Threading.Tasks.Task<ContactNote> GetContactNoteAsync (int? id);

        /// <summary>
        /// Get a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNote>> GetContactNoteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch notes assigned to a given contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetContactNotesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetContactNotesPaginatedResponse> GetContactNotesAsync (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Fetch notes assigned to a given contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetContactNotesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactNotesPaginatedResponse>> GetContactNotesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetContactsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetContactsPaginatedResponse> GetContactsAsync (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsPaginatedResponse>> GetContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get contacts autocomplete suggestions
        /// </summary>
        /// <remarks>
        /// Get contacts autocomplete suggestions by given search terms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>Task of GetContactsAutocompleteResponse</returns>
        System.Threading.Tasks.Task<GetContactsAutocompleteResponse> GetContactsAutocompleteAsync (string query, int? limit = null, int? lists = null);

        /// <summary>
        /// Get contacts autocomplete suggestions
        /// </summary>
        /// <remarks>
        /// Get contacts autocomplete suggestions by given search terms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetContactsAutocompleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsAutocompleteResponse>> GetContactsAutocompleteAsyncWithHttpInfo (string query, int? limit = null, int? lists = null);
        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetContactsByListIdPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetContactsByListIdPaginatedResponse> GetContactsByListIdAsync (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all contacts in a list
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsByListIdPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsByListIdPaginatedResponse>> GetContactsByListIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCountriesResponse</returns>
        System.Threading.Tasks.Task<GetCountriesResponse> GetCountriesAsync ();

        /// <summary>
        /// Get countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCountriesResponse>> GetCountriesAsyncWithHttpInfo ();
        /// <summary>
        /// Get current account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetCurrentUserAsync ();

        /// <summary>
        /// Get current account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// Get the details of a specific custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserCustomField</returns>
        System.Threading.Tasks.Task<UserCustomField> GetCustomFieldAsync (int? id);

        /// <summary>
        /// Get the details of a specific custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserCustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCustomField>> GetCustomFieldAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all custom fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetCustomFieldsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetCustomFieldsPaginatedResponse> GetCustomFieldsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all custom fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetCustomFieldsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomFieldsPaginatedResponse>> GetCustomFieldsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get the details of a specific dedicated number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UsersInbound</returns>
        System.Threading.Tasks.Task<UsersInbound> GetDedicatedNumberAsync (int? id);

        /// <summary>
        /// Get the details of a specific dedicated number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UsersInbound)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersInbound>> GetDedicatedNumberAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get favorite contacts and lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>Task of GetFavoritesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetFavoritesPaginatedResponse> GetFavoritesAsync (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Get favorite contacts and lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>Task of ApiResponse (GetFavoritesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFavoritesPaginatedResponse>> GetFavoritesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Get a single inbound message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of MessageIn</returns>
        System.Threading.Tasks.Task<MessageIn> GetInboundMessageAsync (int? id);

        /// <summary>
        /// Get a single inbound message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of ApiResponse (MessageIn)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageIn>> GetInboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInboundMessagesNotificationSettingsResponse</returns>
        System.Threading.Tasks.Task<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsAsync ();

        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInboundMessagesNotificationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInboundMessagesNotificationSettingsResponse>> GetInboundMessagesNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get all invoices
        /// </summary>
        /// <remarks>
        /// With the TextMagic API, you can check the invoices and transactions for your account.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetInvoicesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetInvoicesPaginatedResponse> GetInvoicesAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all invoices
        /// </summary>
        /// <remarks>
        /// With the TextMagic API, you can check the invoices and transactions for your account.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetInvoicesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoicesPaginatedResponse>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get the details of a specific list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List</returns>
        System.Threading.Tasks.Task<List> GetListAsync (int? id);

        /// <summary>
        /// Get the details of a specific list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List)</returns>
        System.Threading.Tasks.Task<ApiResponse<List>> GetListAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact IDs in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetListContactsIdsResponse</returns>
        System.Threading.Tasks.Task<GetListContactsIdsResponse> GetListContactsIdsAsync (int? id);

        /// <summary>
        /// Get all contact IDs in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetListContactsIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListContactsIdsResponse>> GetListContactsIdsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>Task of GetListsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetListsPaginatedResponse> GetListsAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);

        /// <summary>
        /// Get all lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetListsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListsPaginatedResponse>> GetListsAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);
        /// <summary>
        /// Get a contact&#39;s lists
        /// </summary>
        /// <remarks>
        /// Get all the lists in which a contact is included.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetListsOfContactPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetListsOfContactPaginatedResponse> GetListsOfContactAsync (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Get a contact&#39;s lists
        /// </summary>
        /// <remarks>
        /// Get all the lists in which a contact is included.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetListsOfContactPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListsOfContactPaginatedResponse>> GetListsOfContactAsyncWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of GetMessagePreviewResponse</returns>
        System.Threading.Tasks.Task<GetMessagePreviewResponse> GetMessagePreviewAsync (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePreviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePreviewResponse>> GetMessagePreviewAsyncWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Check message price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of GetMessagePriceResponse</returns>
        System.Threading.Tasks.Task<GetMessagePriceResponse> GetMessagePriceAsync (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Check message price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePriceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePriceResponse>> GetMessagePriceAsyncWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Get a session&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a specific session’s details.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>Task of MessageSession</returns>
        System.Threading.Tasks.Task<MessageSession> GetMessageSessionAsync (int? id);

        /// <summary>
        /// Get a session&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a specific session’s details.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>Task of ApiResponse (MessageSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSession>> GetMessageSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a session&#x60;s statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of GetMessageSessionStatResponse</returns>
        System.Threading.Tasks.Task<GetMessageSessionStatResponse> GetMessageSessionStatAsync (int? id, int? includeDeleted = null);

        /// <summary>
        /// Get a session&#x60;s statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessageSessionStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageSessionStatResponse>> GetMessageSessionStatAsyncWithHttpInfo (int? id, int? includeDeleted = null);
        /// <summary>
        /// Get a session&#x60;s messages
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of GetMessagesBySessionIdPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetMessagesBySessionIdPaginatedResponse> GetMessagesBySessionIdAsync (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);

        /// <summary>
        /// Get a session&#x60;s messages
        /// </summary>
        /// <remarks>
        /// A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessagesBySessionIdPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagesBySessionIdPaginatedResponse>> GetMessagesBySessionIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);
        /// <summary>
        /// Get sent/received messages counters values
        /// </summary>
        /// <remarks>
        /// Get total contacts, sent messages and received messages counters values.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagingCountersResponse</returns>
        System.Threading.Tasks.Task<GetMessagingCountersResponse> GetMessagingCountersAsync ();

        /// <summary>
        /// Get sent/received messages counters values
        /// </summary>
        /// <remarks>
        /// Get total contacts, sent messages and received messages counters values.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagingCountersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagingCountersResponse>> GetMessagingCountersAsyncWithHttpInfo ();
        /// <summary>
        /// Get messaging statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of GetMessagingStatResponse</returns>
        System.Threading.Tasks.Task<GetMessagingStatResponse> GetMessagingStatAsync (string by = null, int? start = null, int? end = null);

        /// <summary>
        /// Get messaging statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagingStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagingStatResponse>> GetMessagingStatAsyncWithHttpInfo (string by = null, int? start = null, int? end = null);
        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageOut</returns>
        System.Threading.Tasks.Task<MessageOut> GetOutboundMessageAsync (int? id);

        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageOut>> GetOutboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get the outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetOutboundMessagesHistoryPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetOutboundMessagesHistoryPaginatedResponse> GetOutboundMessagesHistoryAsync (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get the outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetOutboundMessagesHistoryPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>> GetOutboundMessagesHistoryAsyncWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessagesIcs</returns>
        System.Threading.Tasks.Task<MessagesIcs> GetScheduledMessageAsync (int? id);

        /// <summary>
        /// Get a single scheduled message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessagesIcs)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesIcs>> GetScheduledMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get the details of a specific Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SenderId</returns>
        System.Threading.Tasks.Task<SenderId> GetSenderIdAsync (int? id);

        /// <summary>
        /// Get the details of a specific Sender ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SenderId)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderId>> GetSenderIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all your approved Sender IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetSenderIdsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetSenderIdsPaginatedResponse> GetSenderIdsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all your approved Sender IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSenderIdsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSenderIdsPaginatedResponse>> GetSenderIdsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get current sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>Task of GetSenderSettingsResponse</returns>
        System.Threading.Tasks.Task<GetSenderSettingsResponse> GetSenderSettingsAsync (string country = null);

        /// <summary>
        /// Get current sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>Task of ApiResponse (GetSenderSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSenderSettingsResponse>> GetSenderSettingsAsyncWithHttpInfo (string country = null);
        /// <summary>
        /// Get spending statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of GetSpendingStatPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetSpendingStatPaginatedResponse> GetSpendingStatAsync (int? page = null, int? limit = null, string start = null, string end = null);

        /// <summary>
        /// Get spending statistics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of ApiResponse (GetSpendingStatPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpendingStatPaginatedResponse>> GetSpendingStatAsyncWithHttpInfo (int? page = null, int? limit = null, string start = null, string end = null);
        /// <summary>
        /// Get sub-account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSubaccountAsync (int? id);

        /// <summary>
        /// Get sub-account information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a sub-accounts list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSubaccountsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get a sub-accounts list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name
        /// </summary>
        /// <remarks>
        /// Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetSubaccountsWithTokensResponse</returns>
        System.Threading.Tasks.Task<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensAsync (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);

        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name
        /// </summary>
        /// <remarks>
        /// Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSubaccountsWithTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubaccountsWithTokensResponse>> GetSubaccountsWithTokensAsyncWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);
        /// <summary>
        /// Get a template&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a single template.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageTemplate</returns>
        System.Threading.Tasks.Task<MessageTemplate> GetTemplateAsync (int? id);

        /// <summary>
        /// Get a template&#x60;s details
        /// </summary>
        /// <remarks>
        /// Get a single template.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetTemplateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get timezones
        /// </summary>
        /// <remarks>
        /// Return all available timezone IDs
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>Task of GetTimezonesResponse</returns>
        System.Threading.Tasks.Task<GetTimezonesResponse> GetTimezonesAsync (int? full = null);

        /// <summary>
        /// Get timezones
        /// </summary>
        /// <remarks>
        /// Return all available timezone IDs
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetTimezonesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTimezonesResponse>> GetTimezonesAsyncWithHttpInfo (int? full = null);
        /// <summary>
        /// Get unread messages number
        /// </summary>
        /// <remarks>
        /// Get the total amount of unread messages in the current user chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadMessagesTotalResponse</returns>
        System.Threading.Tasks.Task<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalAsync ();

        /// <summary>
        /// Get unread messages number
        /// </summary>
        /// <remarks>
        /// Get the total amount of unread messages in the current user chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadMessagesTotalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnreadMessagesTotalResponse>> GetUnreadMessagesTotalAsyncWithHttpInfo ();
        /// <summary>
        /// Get the details of a specific unsubscribed contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnsubscribedContact</returns>
        System.Threading.Tasks.Task<UnsubscribedContact> GetUnsubscribedContactAsync (int? id);

        /// <summary>
        /// Get the details of a specific unsubscribed contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnsubscribedContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsubscribedContact>> GetUnsubscribedContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all unsubscribed contacts
        /// </summary>
        /// <remarks>
        /// When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetUnsubscribersPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetUnsubscribersPaginatedResponse> GetUnsubscribersAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all unsubscribed contacts
        /// </summary>
        /// <remarks>
        /// When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetUnsubscribersPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnsubscribersPaginatedResponse>> GetUnsubscribersAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all your dedicated numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>Task of GetUserDedicatedNumbersPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetUserDedicatedNumbersPaginatedResponse> GetUserDedicatedNumbersAsync (int? page = null, int? limit = null, int? surveyId = null);

        /// <summary>
        /// Get all your dedicated numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>Task of ApiResponse (GetUserDedicatedNumbersPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserDedicatedNumbersPaginatedResponse>> GetUserDedicatedNumbersAsyncWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null);
        /// <summary>
        /// Import contacts
        /// </summary>
        /// <remarks>
        /// Import contacts from the CSV, XLS or XLSX file.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> ImportContactsAsync (System.IO.Stream file, string column, int? listId = null, string listName = null);

        /// <summary>
        /// Import contacts
        /// </summary>
        /// <remarks>
        /// Import contacts from the CSV, XLS or XLSX file.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ImportContactsAsyncWithHttpInfo (System.IO.Stream file, string column, int? listId = null, string listName = null);
        /// <summary>
        /// Invite a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteSubaccountAsync (InviteSubaccountInputObject inviteSubaccountInputObject);

        /// <summary>
        /// Invite a new sub-account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteSubaccountAsyncWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject);
        /// <summary>
        /// Mark chats as read (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as read by chat IDs or mark all chats as read
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatsReadBulkAsync (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);

        /// <summary>
        /// Mark chats as read (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as read by chat IDs or mark all chats as read
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsReadBulkAsyncWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);
        /// <summary>
        /// Mark chats as unread (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatsUnreadBulkAsync (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);

        /// <summary>
        /// Mark chats as unread (bulk)
        /// </summary>
        /// <remarks>
        /// Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsUnreadBulkAsyncWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);
        /// <summary>
        /// Mute chat sounds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> MuteChatAsync (MuteChatInputObject muteChatInputObject);

        /// <summary>
        /// Mute chat sounds
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> MuteChatAsyncWithHttpInfo (MuteChatInputObject muteChatInputObject);
        /// <summary>
        /// Mute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Mute several chats by chat ids or mute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MuteChatsBulkAsync (MuteChatsBulkInputObject muteChatsBulkInputObject);

        /// <summary>
        /// Mute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Mute several chats by chat ids or mute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MuteChatsBulkAsyncWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject);
        /// <summary>
        /// Ping
        /// </summary>
        /// <remarks>
        /// Make a simple ping request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PingResponse</returns>
        System.Threading.Tasks.Task<PingResponse> PingAsync ();

        /// <summary>
        /// Ping
        /// </summary>
        /// <remarks>
        /// Make a simple ping request.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PingResponse>> PingAsyncWithHttpInfo ();
        /// <summary>
        /// Reopen chats (bulk)
        /// </summary>
        /// <remarks>
        /// Reopen chats by chat IDs or reopen all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReopenChatsBulkAsync (ReopenChatsBulkInputObject reopenChatsBulkInputObject);

        /// <summary>
        /// Reopen chats (bulk)
        /// </summary>
        /// <remarks>
        /// Reopen chats by chat IDs or reopen all chats
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReopenChatsBulkAsyncWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject);
        /// <summary>
        /// Request a new REST API token for sub-account
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> RequestNewSubaccountTokenAsync (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);

        /// <summary>
        /// Request a new REST API token for sub-account
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> RequestNewSubaccountTokenAsyncWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);
        /// <summary>
        /// Apply for a new Sender ID
        /// </summary>
        /// <remarks>
        /// &gt; Sender IDs are shared among all of your sub-accounts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> RequestSenderIdAsync (RequestSenderIdInputObject requestSenderIdInputObject);

        /// <summary>
        /// Apply for a new Sender ID
        /// </summary>
        /// <remarks>
        /// &gt; Sender IDs are shared among all of your sub-accounts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> RequestSenderIdAsyncWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject);
        /// <summary>
        /// Find chats by message text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>Task of SearchChatsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchChatsPaginatedResponse> SearchChatsAsync (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Find chats by message text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsPaginatedResponse>> SearchChatsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Find chats (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>Task of SearchChatsByIdsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchChatsByIdsPaginatedResponse> SearchChatsByIdsAsync (int? page = null, int? limit = null, string ids = null);

        /// <summary>
        /// Find chats (bulk)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsByIdsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsByIdsPaginatedResponse>> SearchChatsByIdsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null);
        /// <summary>
        /// Find chats by recipient
        /// </summary>
        /// <remarks>
        /// Find chats by recipient (contact, list name or phone number).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>Task of SearchChatsByReceipentPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchChatsByReceipentPaginatedResponse> SearchChatsByReceipentAsync (int? page = null, int? limit = null, string query = null, string orderBy = null);

        /// <summary>
        /// Find chats by recipient
        /// </summary>
        /// <remarks>
        /// Find chats by recipient (contact, list name or phone number).
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>Task of ApiResponse (SearchChatsByReceipentPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsByReceipentPaginatedResponse>> SearchChatsByReceipentAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null);
        /// <summary>
        /// Find contacts by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of SearchContactsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchContactsPaginatedResponse> SearchContactsAsync (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find contacts by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchContactsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchContactsPaginatedResponse>> SearchContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find inbound messages
        /// </summary>
        /// <remarks>
        /// Find inbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>Task of SearchInboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchInboundMessagesPaginatedResponse> SearchInboundMessagesAsync (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);

        /// <summary>
        /// Find inbound messages
        /// </summary>
        /// <remarks>
        /// Find inbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SearchInboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInboundMessagesPaginatedResponse>> SearchInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);
        /// <summary>
        /// Find lists by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of SearchListsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchListsPaginatedResponse> SearchListsAsync (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find lists by given criteria
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchListsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchListsPaginatedResponse>> SearchListsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>Task of SearchOutboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchOutboundMessagesPaginatedResponse> SearchOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);

        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>Task of ApiResponse (SearchOutboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchOutboundMessagesPaginatedResponse>> SearchOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);
        /// <summary>
        /// Find scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of SearchScheduledMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchScheduledMessagesPaginatedResponse> SearchScheduledMessagesAsync (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find scheduled messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchScheduledMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchScheduledMessagesPaginatedResponse>> SearchScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find templates by criteria
        /// </summary>
        /// <remarks>
        /// Find user templates by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>Task of SearchTemplatesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchTemplatesPaginatedResponse> SearchTemplatesAsync (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);

        /// <summary>
        /// Find templates by criteria
        /// </summary>
        /// <remarks>
        /// Find user templates by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>Task of ApiResponse (SearchTemplatesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchTemplatesPaginatedResponse>> SearchTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// This is the main entrypoint to send messages. See the examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (SendMessageInputObject sendMessageInputObject);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// This is the main entrypoint to send messages. See the examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (SendMessageInputObject sendMessageInputObject);
        /// <summary>
        /// Step 1: Send a verification code 
        /// </summary>
        /// <remarks>
        /// Sends a verification code to a specified phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of SendPhoneVerificationCodeResponse</returns>
        System.Threading.Tasks.Task<SendPhoneVerificationCodeResponse> SendPhoneVerificationCodeTFAAsync (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject);

        /// <summary>
        /// Step 1: Send a verification code 
        /// </summary>
        /// <remarks>
        /// Sends a verification code to a specified phone number.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of ApiResponse (SendPhoneVerificationCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendPhoneVerificationCodeResponse>> SendPhoneVerificationCodeTFAAsyncWithHttpInfo (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject);
        /// <summary>
        /// Change chat status
        /// </summary>
        /// <remarks>
        /// Set the status of the chat given by ID.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> SetChatStatusAsync (SetChatStatusInputObject setChatStatusInputObject);

        /// <summary>
        /// Change chat status
        /// </summary>
        /// <remarks>
        /// Set the status of the chat given by ID.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> SetChatStatusAsyncWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject);
        /// <summary>
        /// Unblock a contact by phone number
        /// </summary>
        /// <remarks>
        /// Unblock a contact by phone number
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockContactAsync (UnblockContactInputObject unblockContactInputObject);

        /// <summary>
        /// Unblock a contact by phone number
        /// </summary>
        /// <remarks>
        /// Unblock a contact by phone number
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactAsyncWithHttpInfo (UnblockContactInputObject unblockContactInputObject);
        /// <summary>
        /// Unblock contacts (bulk)
        /// </summary>
        /// <remarks>
        /// Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockContactsBulkAsync (UnblockContactsBulkInputObject unblockContactsBulkInputObject);

        /// <summary>
        /// Unblock contacts (bulk)
        /// </summary>
        /// <remarks>
        /// Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactsBulkAsyncWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject);
        /// <summary>
        /// Unmute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Unmute several chats by chat ids or unmute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnmuteChatsBulkAsync (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);

        /// <summary>
        /// Unmute chats (bulk)
        /// </summary>
        /// <remarks>
        /// Unmute several chats by chat ids or unmute all chats.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteChatsBulkAsyncWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);
        /// <summary>
        /// Manually unsubscribe a contact
        /// </summary>
        /// <remarks>
        /// &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UnsubscribeContactAsync (UnsubscribeContactInputObject unsubscribeContactInputObject);

        /// <summary>
        /// Manually unsubscribe a contact
        /// </summary>
        /// <remarks>
        /// &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UnsubscribeContactAsyncWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject);
        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBalanceNotificationSettingsAsync (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);

        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBalanceNotificationSettingsAsyncWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);
        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallbackSettingsAsync (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);

        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallbackSettingsAsyncWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);
        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateChatDesktopNotificationSettingsAsync (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);

        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);
        /// <summary>
        /// Edit a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactAsync (UpdateContactInputObject updateContactInputObject, int? id);

        /// <summary>
        /// Edit a contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactAsyncWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id);
        /// <summary>
        /// Update a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactNoteAsync (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);

        /// <summary>
        /// Update a contact note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactNoteAsyncWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);
        /// <summary>
        /// Edit current account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of UpdateCurrentUserResponse</returns>
        System.Threading.Tasks.Task<UpdateCurrentUserResponse> UpdateCurrentUserAsync (UpdateCurrentUserInputObject updateCurrentUserInputObject);

        /// <summary>
        /// Edit current account info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of ApiResponse (UpdateCurrentUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCurrentUserResponse>> UpdateCurrentUserAsyncWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject);
        /// <summary>
        /// Edit a custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldAsync (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);

        /// <summary>
        /// Edit a custom field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldAsyncWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);
        /// <summary>
        /// Edit the custom field value of a specified contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldValueAsync (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id);

        /// <summary>
        /// Edit the custom field value of a specified contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldValueAsyncWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id);
        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateInboundMessagesNotificationSettingsAsync (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);

        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);
        /// <summary>
        /// Edit a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateListAsync (int? id, UpdateListObject updateListObject = null);

        /// <summary>
        /// Edit a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateListAsyncWithHttpInfo (int? id, UpdateListObject updateListObject = null);
        /// <summary>
        /// Change sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSenderSettingAsync (UpdateSenderSettingInputObject updateSenderSettingInputObject);

        /// <summary>
        /// Change sender settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderSettingAsyncWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject);
        /// <summary>
        /// Update a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateTemplateAsync (UpdateTemplateInputObject updateTemplateInputObject, int? id);

        /// <summary>
        /// Update a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateTemplateAsyncWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id);
        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadAvatarAsync (System.IO.Stream image);

        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadAvatarAsyncWithHttpInfo (System.IO.Stream image);
        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UploadContactAvatarAsync (System.IO.Stream image, int? id);

        /// <summary>
        /// Upload an avatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadContactAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Add an avatar for a list
        /// </summary>
        /// <remarks>
        /// Add an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UploadListAvatarAsync (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for a list
        /// </summary>
        /// <remarks>
        /// Add an avatar for a list
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadListAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageAttachmentAsync (System.IO.Stream file);

        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageAttachmentAsyncWithHttpInfo (System.IO.Stream file);
        /// <summary>
        /// Upload message mms attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to mms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageMMSAttachmentAsync (System.IO.Stream file);

        /// <summary>
        /// Upload message mms attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to mms.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageMMSAttachmentAsyncWithHttpInfo (System.IO.Stream file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TextMagicApi : ITextMagicApi
    {
        private TextMagicClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TextMagicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextMagicApi(String basePath)
        {
            this.Configuration = new TextMagicClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TextMagicClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextMagicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TextMagicApi(TextMagicClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TextMagicClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TextMagicClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TextMagicClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TextMagicClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign contacts to a list &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse AssignContactsToList (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = AssignContactsToListWithHttpInfo(assignContactsToListInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign contacts to a list &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > AssignContactsToListWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'assignContactsToListInputObject' is set
            if (assignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'assignContactsToListInputObject' when calling TextMagicApi->AssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->AssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignContactsToListInputObject != null && assignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Assign contacts to a list &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> AssignContactsToListAsync (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await AssignContactsToListAsyncWithHttpInfo(assignContactsToListInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign contacts to a list &gt; Unlike all other PUT requests, this command does not need old contact IDs to be submitted. For example, if you have a list with contacts 150, 151 and 152 and you want to add contact ID 153, you only need to submit 153 as a parameter of PUT /api/v2/lists/{id}/contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> AssignContactsToListAsyncWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'assignContactsToListInputObject' is set
            if (assignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'assignContactsToListInputObject' when calling TextMagicApi->AssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->AssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignContactsToListInputObject != null && assignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Block a contact by phone number Block a contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse BlockContact (BlockContactInputObject blockContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = BlockContactWithHttpInfo(blockContactInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Block a contact by phone number Block a contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > BlockContactWithHttpInfo (BlockContactInputObject blockContactInputObject)
        {
            // verify the required parameter 'blockContactInputObject' is set
            if (blockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'blockContactInputObject' when calling TextMagicApi->BlockContact");

            var localVarPath = "/api/v2/contacts/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockContactInputObject != null && blockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Block a contact by phone number Block a contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> BlockContactAsync (BlockContactInputObject blockContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await BlockContactAsyncWithHttpInfo(blockContactInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Block a contact by phone number Block a contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> BlockContactAsyncWithHttpInfo (BlockContactInputObject blockContactInputObject)
        {
            // verify the required parameter 'blockContactInputObject' is set
            if (blockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'blockContactInputObject' when calling TextMagicApi->BlockContact");

            var localVarPath = "/api/v2/contacts/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockContactInputObject != null && blockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Buy a dedicated number To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns></returns>
        public void BuyDedicatedNumber (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
             BuyDedicatedNumberWithHttpInfo(buyDedicatedNumberInputObject);
        }

        /// <summary>
        /// Buy a dedicated number To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BuyDedicatedNumberWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
            // verify the required parameter 'buyDedicatedNumberInputObject' is set
            if (buyDedicatedNumberInputObject == null)
                throw new ApiException(400, "Missing required parameter 'buyDedicatedNumberInputObject' when calling TextMagicApi->BuyDedicatedNumber");

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buyDedicatedNumberInputObject != null && buyDedicatedNumberInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buyDedicatedNumberInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buyDedicatedNumberInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Buy a dedicated number To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuyDedicatedNumberAsync (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
             await BuyDedicatedNumberAsyncWithHttpInfo(buyDedicatedNumberInputObject);

        }

        /// <summary>
        /// Buy a dedicated number To buy a dedicated number, you first need to find an available number matching your criteria using the &#x60;/api/v2/numbers/available&#x60; command described above.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BuyDedicatedNumberAsyncWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
            // verify the required parameter 'buyDedicatedNumberInputObject' is set
            if (buyDedicatedNumberInputObject == null)
                throw new ApiException(400, "Missing required parameter 'buyDedicatedNumberInputObject' when calling TextMagicApi->BuyDedicatedNumber");

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buyDedicatedNumberInputObject != null && buyDedicatedNumberInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buyDedicatedNumberInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buyDedicatedNumberInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel verification process You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns></returns>
        public void CancelVerification (string verifyId)
        {
             CancelVerificationWithHttpInfo(verifyId);
        }

        /// <summary>
        /// Cancel verification process You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelVerificationWithHttpInfo (string verifyId)
        {
            // verify the required parameter 'verifyId' is set
            if (verifyId == null)
                throw new ApiException(400, "Missing required parameter 'verifyId' when calling TextMagicApi->CancelVerification");

            var localVarPath = "/api/v2/verify/{verifyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyId != null) localVarPathParams.Add("verifyId", this.Configuration.ApiClient.ParameterToString(verifyId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelVerification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel verification process You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelVerificationAsync (string verifyId)
        {
             await CancelVerificationAsyncWithHttpInfo(verifyId);

        }

        /// <summary>
        /// Cancel verification process You can cancel the verification not earlier than 30 seconds after the initial request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyId">The verifyId that you received in Step 1.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelVerificationAsyncWithHttpInfo (string verifyId)
        {
            // verify the required parameter 'verifyId' is set
            if (verifyId == null)
                throw new ApiException(400, "Missing required parameter 'verifyId' when calling TextMagicApi->CancelVerification");

            var localVarPath = "/api/v2/verify/{verifyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (verifyId != null) localVarPathParams.Add("verifyId", this.Configuration.ApiClient.ParameterToString(verifyId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelVerification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Step 2: Check the verification code  Check received code from user with the code which was actually sent.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns></returns>
        public void CheckPhoneVerificationCodeTFA (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject)
        {
             CheckPhoneVerificationCodeTFAWithHttpInfo(checkPhoneVerificationCodeTFAInputObject);
        }

        /// <summary>
        /// Step 2: Check the verification code  Check received code from user with the code which was actually sent.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckPhoneVerificationCodeTFAWithHttpInfo (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject)
        {
            // verify the required parameter 'checkPhoneVerificationCodeTFAInputObject' is set
            if (checkPhoneVerificationCodeTFAInputObject == null)
                throw new ApiException(400, "Missing required parameter 'checkPhoneVerificationCodeTFAInputObject' when calling TextMagicApi->CheckPhoneVerificationCodeTFA");

            var localVarPath = "/api/v2/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkPhoneVerificationCodeTFAInputObject != null && checkPhoneVerificationCodeTFAInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkPhoneVerificationCodeTFAInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPhoneVerificationCodeTFAInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPhoneVerificationCodeTFA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Step 2: Check the verification code  Check received code from user with the code which was actually sent.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckPhoneVerificationCodeTFAAsync (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject)
        {
             await CheckPhoneVerificationCodeTFAAsyncWithHttpInfo(checkPhoneVerificationCodeTFAInputObject);

        }

        /// <summary>
        /// Step 2: Check the verification code  Check received code from user with the code which was actually sent.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckPhoneVerificationCodeTFAAsyncWithHttpInfo (CheckPhoneVerificationCodeTFAInputObject checkPhoneVerificationCodeTFAInputObject)
        {
            // verify the required parameter 'checkPhoneVerificationCodeTFAInputObject' is set
            if (checkPhoneVerificationCodeTFAInputObject == null)
                throw new ApiException(400, "Missing required parameter 'checkPhoneVerificationCodeTFAInputObject' when calling TextMagicApi->CheckPhoneVerificationCodeTFA");

            var localVarPath = "/api/v2/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkPhoneVerificationCodeTFAInputObject != null && checkPhoneVerificationCodeTFAInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkPhoneVerificationCodeTFAInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPhoneVerificationCodeTFAInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPhoneVerificationCodeTFA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset list members to the specified contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse ClearAndAssignContactsToList (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = ClearAndAssignContactsToListWithHttpInfo(clearAndAssignContactsToListInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset list members to the specified contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > ClearAndAssignContactsToListWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'clearAndAssignContactsToListInputObject' is set
            if (clearAndAssignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'clearAndAssignContactsToListInputObject' when calling TextMagicApi->ClearAndAssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ClearAndAssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearAndAssignContactsToListInputObject != null && clearAndAssignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clearAndAssignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearAndAssignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAndAssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset list members to the specified contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> ClearAndAssignContactsToListAsync (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await ClearAndAssignContactsToListAsyncWithHttpInfo(clearAndAssignContactsToListInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset list members to the specified contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ClearAndAssignContactsToListAsyncWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'clearAndAssignContactsToListInputObject' is set
            if (clearAndAssignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'clearAndAssignContactsToListInputObject' when calling TextMagicApi->ClearAndAssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ClearAndAssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearAndAssignContactsToListInputObject != null && clearAndAssignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clearAndAssignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearAndAssignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAndAssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Close chats (bulk) Close chats by chat IDs or close all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns></returns>
        public void CloseChatsBulk (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
             CloseChatsBulkWithHttpInfo(closeChatsBulkInputObject);
        }

        /// <summary>
        /// Close chats (bulk) Close chats by chat IDs or close all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseChatsBulkWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
            // verify the required parameter 'closeChatsBulkInputObject' is set
            if (closeChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'closeChatsBulkInputObject' when calling TextMagicApi->CloseChatsBulk");

            var localVarPath = "/api/v2/chats/close/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeChatsBulkInputObject != null && closeChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close chats (bulk) Close chats by chat IDs or close all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseChatsBulkAsync (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
             await CloseChatsBulkAsyncWithHttpInfo(closeChatsBulkInputObject);

        }

        /// <summary>
        /// Close chats (bulk) Close chats by chat IDs or close all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseChatsBulkAsyncWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
            // verify the required parameter 'closeChatsBulkInputObject' is set
            if (closeChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'closeChatsBulkInputObject' when calling TextMagicApi->CloseChatsBulk");

            var localVarPath = "/api/v2/chats/close/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeChatsBulkInputObject != null && closeChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close read chats Close all chats that have no unread messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CloseReadChats ()
        {
             CloseReadChatsWithHttpInfo();
        }

        /// <summary>
        /// Close read chats Close all chats that have no unread messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseReadChatsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/close/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseReadChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close read chats Close all chats that have no unread messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseReadChatsAsync ()
        {
             await CloseReadChatsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Close read chats Close all chats that have no unread messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseReadChatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/close/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseReadChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void CloseSubaccount (int? id)
        {
             CloseSubaccountWithHttpInfo(id);
        }

        /// <summary>
        /// Close sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseSubaccountWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CloseSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseSubaccountAsync (int? id)
        {
             await CloseSubaccountAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Close sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseSubaccountAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CloseSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateContact (CreateContactInputObject createContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateContactWithHttpInfo(createContactInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateContactWithHttpInfo (CreateContactInputObject createContactInputObject)
        {
            // verify the required parameter 'createContactInputObject' is set
            if (createContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactInputObject' when calling TextMagicApi->CreateContact");

            var localVarPath = "/api/v2/contacts/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createContactInputObject != null && createContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add a new contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactAsync (CreateContactInputObject createContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateContactAsyncWithHttpInfo(createContactInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactAsyncWithHttpInfo (CreateContactInputObject createContactInputObject)
        {
            // verify the required parameter 'createContactInputObject' is set
            if (createContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactInputObject' when calling TextMagicApi->CreateContact");

            var localVarPath = "/api/v2/contacts/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createContactInputObject != null && createContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateContactNote (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateContactNoteWithHttpInfo(createContactNoteInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateContactNoteWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
            // verify the required parameter 'createContactNoteInputObject' is set
            if (createContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactNoteInputObject' when calling TextMagicApi->CreateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateContactNote");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (createContactNoteInputObject != null && createContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactNoteAsync (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateContactNoteAsyncWithHttpInfo(createContactNoteInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactNoteAsyncWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
            // verify the required parameter 'createContactNoteInputObject' is set
            if (createContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactNoteInputObject' when calling TextMagicApi->CreateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateContactNote");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (createContactNoteInputObject != null && createContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add a new custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateCustomField (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateCustomFieldWithHttpInfo(createCustomFieldInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateCustomFieldWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
            // verify the required parameter 'createCustomFieldInputObject' is set
            if (createCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFieldInputObject' when calling TextMagicApi->CreateCustomField");

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCustomFieldInputObject != null && createCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add a new custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateCustomFieldAsync (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateCustomFieldAsyncWithHttpInfo(createCustomFieldInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateCustomFieldAsyncWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
            // verify the required parameter 'createCustomFieldInputObject' is set
            if (createCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFieldInputObject' when calling TextMagicApi->CreateCustomField");

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCustomFieldInputObject != null && createCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateList (CreateListInputObject createListInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateListWithHttpInfo(createListInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateListWithHttpInfo (CreateListInputObject createListInputObject)
        {
            // verify the required parameter 'createListInputObject' is set
            if (createListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createListInputObject' when calling TextMagicApi->CreateList");

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createListInputObject != null && createListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateListAsync (CreateListInputObject createListInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateListAsyncWithHttpInfo(createListInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateListAsyncWithHttpInfo (CreateListInputObject createListInputObject)
        {
            // verify the required parameter 'createListInputObject' is set
            if (createListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createListInputObject' when calling TextMagicApi->CreateList");

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createListInputObject != null && createListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a template There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateTemplate (CreateTemplateInputObject createTemplateInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateTemplateWithHttpInfo(createTemplateInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a template There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateTemplateWithHttpInfo (CreateTemplateInputObject createTemplateInputObject)
        {
            // verify the required parameter 'createTemplateInputObject' is set
            if (createTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateInputObject' when calling TextMagicApi->CreateTemplate");

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTemplateInputObject != null && createTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a template There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateTemplateAsync (CreateTemplateInputObject createTemplateInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateTemplateAsyncWithHttpInfo(createTemplateInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a template There are times when creating a new template makes sense (such as when targeting specific clients or improving your business strategies).  You can create new SMS templates for marketing purposes or SMS templates for business campaigns. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateTemplateAsyncWithHttpInfo (CreateTemplateInputObject createTemplateInputObject)
        {
            // verify the required parameter 'createTemplateInputObject' is set
            if (createTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateInputObject' when calling TextMagicApi->CreateTemplate");

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTemplateInputObject != null && createTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Delete contacts (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllContacts ()
        {
             DeleteAllContactsWithHttpInfo();
        }

        /// <summary>
        /// Delete contacts (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllContactsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/contact/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contacts (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllContactsAsync ()
        {
             await DeleteAllContactsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete contacts (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllContactsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/contact/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllOutboundMessages ()
        {
             DeleteAllOutboundMessagesWithHttpInfo();
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllOutboundMessagesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/message/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllOutboundMessagesAsync ()
        {
             await DeleteAllOutboundMessagesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOutboundMessagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/message/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAvatar ()
        {
             DeleteAvatarWithHttpInfo();
        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAvatarWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAvatarAsync ()
        {
             await DeleteAvatarAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvatarAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chat messages by ID(s) Delete messages from chat by given message IDs.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteChatMessages (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
             DeleteChatMessagesWithHttpInfo(deleteChatMessagesBulkInputObject, id);
        }

        /// <summary>
        /// Delete chat messages by ID(s) Delete messages from chat by given message IDs.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChatMessagesWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
            if (deleteChatMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatMessagesBulkInputObject' when calling TextMagicApi->DeleteChatMessages");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteChatMessages");

            var localVarPath = "/api/v2/chats/{id}/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteChatMessagesBulkInputObject != null && deleteChatMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chat messages by ID(s) Delete messages from chat by given message IDs.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChatMessagesAsync (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
             await DeleteChatMessagesAsyncWithHttpInfo(deleteChatMessagesBulkInputObject, id);

        }

        /// <summary>
        /// Delete chat messages by ID(s) Delete messages from chat by given message IDs.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatMessagesAsyncWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
            if (deleteChatMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatMessagesBulkInputObject' when calling TextMagicApi->DeleteChatMessages");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteChatMessages");

            var localVarPath = "/api/v2/chats/{id}/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteChatMessagesBulkInputObject != null && deleteChatMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chats (bulk) Delete chats by given IDs or delete all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteChatsBulk (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
             DeleteChatsBulkWithHttpInfo(deleteChatsBulkInputObject);
        }

        /// <summary>
        /// Delete chats (bulk) Delete chats by given IDs or delete all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChatsBulkWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
            // verify the required parameter 'deleteChatsBulkInputObject' is set
            if (deleteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatsBulkInputObject' when calling TextMagicApi->DeleteChatsBulk");

            var localVarPath = "/api/v2/chats/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteChatsBulkInputObject != null && deleteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chats (bulk) Delete chats by given IDs or delete all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChatsBulkAsync (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
             await DeleteChatsBulkAsyncWithHttpInfo(deleteChatsBulkInputObject);

        }

        /// <summary>
        /// Delete chats (bulk) Delete chats by given IDs or delete all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatsBulkAsyncWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
            // verify the required parameter 'deleteChatsBulkInputObject' is set
            if (deleteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatsBulkInputObject' when calling TextMagicApi->DeleteChatsBulk");

            var localVarPath = "/api/v2/chats/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteChatsBulkInputObject != null && deleteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a contact &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContact (int? id)
        {
             DeleteContactWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a contact &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a contact &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync (int? id)
        {
             await DeleteContactAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a contact &gt; This command removes your contact completely. If it was assigned or saved to a shared list, it will disappear from there too. If you only need to remove a contact from selected lists, use the Contact assignment command in the Lists section instead, rather than deleting the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactAvatar (int? id)
        {
             DeleteContactAvatarWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactAvatarWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAvatarAsync (int? id)
        {
             await DeleteContactAvatarAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAvatarAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactNote (int? id)
        {
             DeleteContactNoteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactNoteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactNoteAsync (int? id)
        {
             await DeleteContactNoteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNoteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact notes (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteContactNotesBulk (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
             DeleteContactNotesBulkWithHttpInfo(id, deleteContactNotesBulkInputObject);
        }

        /// <summary>
        /// Delete contact notes (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactNotesBulkWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNotesBulk");
            // verify the required parameter 'deleteContactNotesBulkInputObject' is set
            if (deleteContactNotesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactNotesBulkInputObject' when calling TextMagicApi->DeleteContactNotesBulk");

            var localVarPath = "/api/v2/contacts/{id}/notes/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContactNotesBulkInputObject != null && deleteContactNotesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactNotesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactNotesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNotesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact notes (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactNotesBulkAsync (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
             await DeleteContactNotesBulkAsyncWithHttpInfo(id, deleteContactNotesBulkInputObject);

        }

        /// <summary>
        /// Delete contact notes (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNotesBulkAsyncWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNotesBulk");
            // verify the required parameter 'deleteContactNotesBulkInputObject' is set
            if (deleteContactNotesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactNotesBulkInputObject' when calling TextMagicApi->DeleteContactNotesBulk");

            var localVarPath = "/api/v2/contacts/{id}/notes/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContactNotesBulkInputObject != null && deleteContactNotesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactNotesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactNotesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNotesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contacts by IDs (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns></returns>
        public void DeleteContactsByIds (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
             DeleteContactsByIdsWithHttpInfo(deleteContactsByIdsInputObject);
        }

        /// <summary>
        /// Delete contacts by IDs (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsByIdsWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
            // verify the required parameter 'deleteContactsByIdsInputObject' is set
            if (deleteContactsByIdsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactsByIdsInputObject' when calling TextMagicApi->DeleteContactsByIds");

            var localVarPath = "/api/v2/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteContactsByIdsInputObject != null && deleteContactsByIdsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactsByIdsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactsByIdsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contacts by IDs (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsByIdsAsync (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
             await DeleteContactsByIdsAsyncWithHttpInfo(deleteContactsByIdsInputObject);

        }

        /// <summary>
        /// Delete contacts by IDs (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsByIdsAsyncWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
            // verify the required parameter 'deleteContactsByIdsInputObject' is set
            if (deleteContactsByIdsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactsByIdsInputObject' when calling TextMagicApi->DeleteContactsByIds");

            var localVarPath = "/api/v2/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteContactsByIdsInputObject != null && deleteContactsByIdsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactsByIdsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactsByIdsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign contacts from a list &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactsFromList (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
             DeleteContactsFromListWithHttpInfo(deleteContacsFromListObject, id);
        }

        /// <summary>
        /// Unassign contacts from a list &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsFromListWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
            // verify the required parameter 'deleteContacsFromListObject' is set
            if (deleteContacsFromListObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContacsFromListObject' when calling TextMagicApi->DeleteContactsFromList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactsFromList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContacsFromListObject != null && deleteContacsFromListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContacsFromListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContacsFromListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign contacts from a list &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsFromListAsync (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
             await DeleteContactsFromListAsyncWithHttpInfo(deleteContacsFromListObject, id);

        }

        /// <summary>
        /// Unassign contacts from a list &gt; When you remove contacts from a specific list, they will be deleted permanently, unless they are first saved in another list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsFromListAsyncWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
            // verify the required parameter 'deleteContacsFromListObject' is set
            if (deleteContacsFromListObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContacsFromListObject' when calling TextMagicApi->DeleteContactsFromList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactsFromList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContacsFromListObject != null && deleteContacsFromListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContacsFromListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContacsFromListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a custom field &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteCustomField (int? id)
        {
             DeleteCustomFieldWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a custom field &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomFieldWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a custom field &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomFieldAsync (int? id)
        {
             await DeleteCustomFieldAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a custom field &gt; When a custom field is deleted, all the information that was added to contacts under this custom field will also be lost. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a dedicated number subscription 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteDedicatedNumber (int? id)
        {
             DeleteDedicatedNumberWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel a dedicated number subscription 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDedicatedNumberWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a dedicated number subscription 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDedicatedNumberAsync (int? id)
        {
             await DeleteDedicatedNumberAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Cancel a dedicated number subscription 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDedicatedNumberAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single inbound message &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns></returns>
        public void DeleteInboundMessage (int? id)
        {
             DeleteInboundMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single inbound message &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single inbound message &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboundMessageAsync (int? id)
        {
             await DeleteInboundMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single inbound message &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete inbound messages (bulk) &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteInboundMessagesBulk (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
             DeleteInboundMessagesBulkWithHttpInfo(deleteInboundMessagesBulkInputObject);
        }

        /// <summary>
        /// Delete inbound messages (bulk) &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboundMessagesBulkWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteInboundMessagesBulkInputObject' is set
            if (deleteInboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteInboundMessagesBulkInputObject' when calling TextMagicApi->DeleteInboundMessagesBulk");

            var localVarPath = "/api/v2/replies/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteInboundMessagesBulkInputObject != null && deleteInboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete inbound messages (bulk) &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboundMessagesBulkAsync (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
             await DeleteInboundMessagesBulkAsyncWithHttpInfo(deleteInboundMessagesBulkInputObject);

        }

        /// <summary>
        /// Delete inbound messages (bulk) &gt; Note: deleted inbound messages will disappear from TextMagic Online, chats, and any other place they are referenced.  So, be careful! 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessagesBulkAsyncWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteInboundMessagesBulkInputObject' is set
            if (deleteInboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteInboundMessagesBulkInputObject' when calling TextMagicApi->DeleteInboundMessagesBulk");

            var localVarPath = "/api/v2/replies/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteInboundMessagesBulkInputObject != null && deleteInboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a list This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteList (int? id)
        {
             DeleteListWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a list This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a list This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAsync (int? id)
        {
             await DeleteListAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a list This command has no parameters. If successful, this command will return the standard delete response (204 No Content); otherwise, a standard error response will be returned.  When you delete a list, the contacts in it are deleted as well, unless they were saved in another list.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for a list Delete an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteListAvatar (int? id)
        {
             DeleteListAvatarWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an avatar for a list Delete an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListAvatarWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for a list Delete an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAvatarAsync (int? id)
        {
             await DeleteListAvatarAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an avatar for a list Delete an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAvatarAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contacts from a list (bulk) Delete contacts from a list (bulk)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteListContactsBulk (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
             DeleteListContactsBulkWithHttpInfo(deleteListContactsBulkInputObject, id);
        }

        /// <summary>
        /// Delete contacts from a list (bulk) Delete contacts from a list (bulk)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListContactsBulkWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteListContactsBulkInputObject' is set
            if (deleteListContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListContactsBulkInputObject' when calling TextMagicApi->DeleteListContactsBulk");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListContactsBulk");

            var localVarPath = "/api/v2/lists/{id}/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteListContactsBulkInputObject != null && deleteListContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contacts from a list (bulk) Delete contacts from a list (bulk)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListContactsBulkAsync (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
             await DeleteListContactsBulkAsyncWithHttpInfo(deleteListContactsBulkInputObject, id);

        }

        /// <summary>
        /// Delete contacts from a list (bulk) Delete contacts from a list (bulk)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListContactsBulkAsyncWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteListContactsBulkInputObject' is set
            if (deleteListContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListContactsBulkInputObject' when calling TextMagicApi->DeleteListContactsBulk");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListContactsBulk");

            var localVarPath = "/api/v2/lists/{id}/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteListContactsBulkInputObject != null && deleteListContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete lists (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteListsBulk (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
             DeleteListsBulkWithHttpInfo(deleteListsBulkInputObject);
        }

        /// <summary>
        /// Delete lists (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListsBulkWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
            // verify the required parameter 'deleteListsBulkInputObject' is set
            if (deleteListsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListsBulkInputObject' when calling TextMagicApi->DeleteListsBulk");

            var localVarPath = "/api/v2/lists/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteListsBulkInputObject != null && deleteListsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete lists (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListsBulkAsync (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
             await DeleteListsBulkAsyncWithHttpInfo(deleteListsBulkInputObject);

        }

        /// <summary>
        /// Delete lists (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListsBulkAsyncWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
            // verify the required parameter 'deleteListsBulkInputObject' is set
            if (deleteListsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListsBulkInputObject' when calling TextMagicApi->DeleteListsBulk");

            var localVarPath = "/api/v2/lists/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteListsBulkInputObject != null && deleteListsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a session Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteMessageSession (int? id)
        {
             DeleteMessageSessionWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a session Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a session Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageSessionAsync (int? id)
        {
             await DeleteMessageSessionAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a session Delete a message session, together with all nested messages. &gt; You will not be refunded for any deleted sent sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete sessions (bulk) Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteMessageSessionsBulk (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
             DeleteMessageSessionsBulkWithHttpInfo(deleteMessageSessionsBulkInputObject);
        }

        /// <summary>
        /// Delete sessions (bulk) Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageSessionsBulkWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
            // verify the required parameter 'deleteMessageSessionsBulkInputObject' is set
            if (deleteMessageSessionsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteMessageSessionsBulkInputObject' when calling TextMagicApi->DeleteMessageSessionsBulk");

            var localVarPath = "/api/v2/sessions/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteMessageSessionsBulkInputObject != null && deleteMessageSessionsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteMessageSessionsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteMessageSessionsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSessionsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete sessions (bulk) Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageSessionsBulkAsync (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
             await DeleteMessageSessionsBulkAsyncWithHttpInfo(deleteMessageSessionsBulkInputObject);

        }

        /// <summary>
        /// Delete sessions (bulk) Delete message sessions, together with all nested messages, by given ID(s) or delete all message sessions.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionsBulkAsyncWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
            // verify the required parameter 'deleteMessageSessionsBulkInputObject' is set
            if (deleteMessageSessionsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteMessageSessionsBulkInputObject' when calling TextMagicApi->DeleteMessageSessionsBulk");

            var localVarPath = "/api/v2/sessions/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteMessageSessionsBulkInputObject != null && deleteMessageSessionsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteMessageSessionsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteMessageSessionsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSessionsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteOutboundMessage (int? id)
        {
             DeleteOutboundMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOutboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOutboundMessageAsync (int? id)
        {
             await DeleteOutboundMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages (bulk) Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteOutboundMessagesBulk (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
             DeleteOutboundMessagesBulkWithHttpInfo(deleteOutboundMessagesBulkInputObject);
        }

        /// <summary>
        /// Delete messages (bulk) Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOutboundMessagesBulkWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
            if (deleteOutboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteOutboundMessagesBulkInputObject' when calling TextMagicApi->DeleteOutboundMessagesBulk");

            var localVarPath = "/api/v2/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteOutboundMessagesBulkInputObject != null && deleteOutboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteOutboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteOutboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages (bulk) Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOutboundMessagesBulkAsync (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
             await DeleteOutboundMessagesBulkAsyncWithHttpInfo(deleteOutboundMessagesBulkInputObject);

        }

        /// <summary>
        /// Delete messages (bulk) Delete outbound messages by the given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessagesBulkAsyncWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
            if (deleteOutboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteOutboundMessagesBulkInputObject' when calling TextMagicApi->DeleteOutboundMessagesBulk");

            var localVarPath = "/api/v2/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteOutboundMessagesBulkInputObject != null && deleteOutboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteOutboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteOutboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteScheduledMessage (int? id)
        {
             DeleteScheduledMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduledMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledMessageAsync (int? id)
        {
             await DeleteScheduledMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete scheduled messages (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteScheduledMessagesBulk (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
             DeleteScheduledMessagesBulkWithHttpInfo(deleteScheduledMessagesBulkInputObject);
        }

        /// <summary>
        /// Delete scheduled messages (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduledMessagesBulkWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
            if (deleteScheduledMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteScheduledMessagesBulkInputObject' when calling TextMagicApi->DeleteScheduledMessagesBulk");

            var localVarPath = "/api/v2/schedules/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteScheduledMessagesBulkInputObject != null && deleteScheduledMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteScheduledMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteScheduledMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete scheduled messages (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledMessagesBulkAsync (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
             await DeleteScheduledMessagesBulkAsyncWithHttpInfo(deleteScheduledMessagesBulkInputObject);

        }

        /// <summary>
        /// Delete scheduled messages (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessagesBulkAsyncWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
            if (deleteScheduledMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteScheduledMessagesBulkInputObject' when calling TextMagicApi->DeleteScheduledMessagesBulk");

            var localVarPath = "/api/v2/schedules/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteScheduledMessagesBulkInputObject != null && deleteScheduledMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteScheduledMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteScheduledMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSenderId (int? id)
        {
             DeleteSenderIdWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSenderIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSenderIdAsync (int? id)
        {
             await DeleteSenderIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteTemplate (int? id)
        {
             DeleteTemplateWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateAsync (int? id)
        {
             await DeleteTemplateAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete templates (bulk) Delete templates by given IDs or delete all templates.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteTemplatesBulk (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
             DeleteTemplatesBulkWithHttpInfo(deleteTemplatesBulkInputObject);
        }

        /// <summary>
        /// Delete templates (bulk) Delete templates by given IDs or delete all templates.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplatesBulkWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
            // verify the required parameter 'deleteTemplatesBulkInputObject' is set
            if (deleteTemplatesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteTemplatesBulkInputObject' when calling TextMagicApi->DeleteTemplatesBulk");

            var localVarPath = "/api/v2/templates/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteTemplatesBulkInputObject != null && deleteTemplatesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteTemplatesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteTemplatesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplatesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete templates (bulk) Delete templates by given IDs or delete all templates.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplatesBulkAsync (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
             await DeleteTemplatesBulkAsyncWithHttpInfo(deleteTemplatesBulkInputObject);

        }

        /// <summary>
        /// Delete templates (bulk) Delete templates by given IDs or delete all templates.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplatesBulkAsyncWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
            // verify the required parameter 'deleteTemplatesBulkInputObject' is set
            if (deleteTemplatesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteTemplatesBulkInputObject' when calling TextMagicApi->DeleteTemplatesBulk");

            var localVarPath = "/api/v2/templates/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteTemplatesBulkInputObject != null && deleteTemplatesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteTemplatesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteTemplatesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplatesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Carrier Lookup This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>DoCarrierLookupResponse</returns>
        public DoCarrierLookupResponse DoCarrierLookup (string phone, string country = null)
        {
             ApiResponse<DoCarrierLookupResponse> localVarResponse = DoCarrierLookupWithHttpInfo(phone, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Carrier Lookup This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>ApiResponse of DoCarrierLookupResponse</returns>
        public ApiResponse< DoCarrierLookupResponse > DoCarrierLookupWithHttpInfo (string phone, string country = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->DoCarrierLookup");

            var localVarPath = "/api/v2/lookups/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoCarrierLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCarrierLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCarrierLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCarrierLookupResponse)));
        }

        /// <summary>
        /// Carrier Lookup This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>Task of DoCarrierLookupResponse</returns>
        public async System.Threading.Tasks.Task<DoCarrierLookupResponse> DoCarrierLookupAsync (string phone, string country = null)
        {
             ApiResponse<DoCarrierLookupResponse> localVarResponse = await DoCarrierLookupAsyncWithHttpInfo(phone, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Carrier Lookup This API call allows you to retrieve additional information about a phone number: region-specific phone number formatting, carrier, phone type (landline/mobile) and country information.  &gt; Numbers must be checked one by one. You cannot check multiple numbers in one request.   
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164) or in [National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). </param>
        /// <param name="country">This option must be specified only if the phone number is in a **[National format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers)**.  (optional)</param>
        /// <returns>Task of ApiResponse (DoCarrierLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoCarrierLookupResponse>> DoCarrierLookupAsyncWithHttpInfo (string phone, string country = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->DoCarrierLookup");

            var localVarPath = "/api/v2/lookups/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoCarrierLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCarrierLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCarrierLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCarrierLookupResponse)));
        }

        /// <summary>
        /// Email Lookup To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>DoEmailLookupResponse</returns>
        public DoEmailLookupResponse DoEmailLookup (string email)
        {
             ApiResponse<DoEmailLookupResponse> localVarResponse = DoEmailLookupWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Email Lookup To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>ApiResponse of DoEmailLookupResponse</returns>
        public ApiResponse< DoEmailLookupResponse > DoEmailLookupWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TextMagicApi->DoEmailLookup");

            var localVarPath = "/api/v2/email-lookups/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEmailLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoEmailLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoEmailLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoEmailLookupResponse)));
        }

        /// <summary>
        /// Email Lookup To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>Task of DoEmailLookupResponse</returns>
        public async System.Threading.Tasks.Task<DoEmailLookupResponse> DoEmailLookupAsync (string email)
        {
             ApiResponse<DoEmailLookupResponse> localVarResponse = await DoEmailLookupAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Email Lookup To get more details about an email address or to check whether it is a valid email or not, you can use the Email Lookup command. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).  This API call allows you to retrieve additional information about an email address, such as mailbox detection, syntax checks, DNS validation, deliverability status, and many more helpful values (see the table below).  &gt; Emails must be checked one by one. You cannot check multiple emails in one request. To upload and check emails in bulk, please use our [Web app](https://my.textmagic.com/online/email-lookup/).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <returns>Task of ApiResponse (DoEmailLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoEmailLookupResponse>> DoEmailLookupAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TextMagicApi->DoEmailLookup");

            var localVarPath = "/api/v2/email-lookups/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEmailLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoEmailLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoEmailLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoEmailLookupResponse)));
        }

        /// <summary>
        /// Get all bulk sessions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetAllBulkSessionsPaginatedResponse</returns>
        public GetAllBulkSessionsPaginatedResponse GetAllBulkSessions (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllBulkSessionsPaginatedResponse> localVarResponse = GetAllBulkSessionsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bulk sessions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllBulkSessionsPaginatedResponse</returns>
        public ApiResponse< GetAllBulkSessionsPaginatedResponse > GetAllBulkSessionsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/bulks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBulkSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllBulkSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllBulkSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllBulkSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all bulk sessions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetAllBulkSessionsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllBulkSessionsPaginatedResponse> GetAllBulkSessionsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllBulkSessionsPaginatedResponse> localVarResponse = await GetAllBulkSessionsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bulk sessions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllBulkSessionsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllBulkSessionsPaginatedResponse>> GetAllBulkSessionsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/bulks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBulkSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllBulkSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllBulkSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllBulkSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>GetAllChatsPaginatedResponse</returns>
        public GetAllChatsPaginatedResponse GetAllChats (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {
             ApiResponse<GetAllChatsPaginatedResponse> localVarResponse = GetAllChatsWithHttpInfo(status, page, limit, orderBy, voice, flat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAllChatsPaginatedResponse</returns>
        public ApiResponse< GetAllChatsPaginatedResponse > GetAllChatsWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {

            var localVarPath = "/api/v2/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllChatsPaginatedResponse)));
        }

        /// <summary>
        /// Get all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>Task of GetAllChatsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllChatsPaginatedResponse> GetAllChatsAsync (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {
             ApiResponse<GetAllChatsPaginatedResponse> localVarResponse = await GetAllChatsAsyncWithHttpInfo(status, page, limit, orderBy, voice, flat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats. (optional)</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included? (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAllChatsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllChatsPaginatedResponse>> GetAllChatsAsyncWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {

            var localVarPath = "/api/v2/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllChatsPaginatedResponse)));
        }

        /// <summary>
        /// Get all inbound messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetAllInboundMessagesPaginatedResponse</returns>
        public GetAllInboundMessagesPaginatedResponse GetAllInboundMessages (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllInboundMessagesPaginatedResponse> localVarResponse = GetAllInboundMessagesWithHttpInfo(page, limit, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbound messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllInboundMessagesPaginatedResponse</returns>
        public ApiResponse< GetAllInboundMessagesPaginatedResponse > GetAllInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/replies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all inbound messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetAllInboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInboundMessagesPaginatedResponse> GetAllInboundMessagesAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllInboundMessagesPaginatedResponse> localVarResponse = await GetAllInboundMessagesAsyncWithHttpInfo(page, limit, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all inbound messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllInboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllInboundMessagesPaginatedResponse>> GetAllInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/replies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all sessions Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetAllMessageSessionsPaginatedResponse</returns>
        public GetAllMessageSessionsPaginatedResponse GetAllMessageSessions (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllMessageSessionsPaginatedResponse> localVarResponse = GetAllMessageSessionsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all sessions Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllMessageSessionsPaginatedResponse</returns>
        public ApiResponse< GetAllMessageSessionsPaginatedResponse > GetAllMessageSessionsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMessageSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllMessageSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllMessageSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllMessageSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all sessions Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetAllMessageSessionsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllMessageSessionsPaginatedResponse> GetAllMessageSessionsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllMessageSessionsPaginatedResponse> localVarResponse = await GetAllMessageSessionsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all sessions Get all message sending sessions. &gt; This list contains all of your sessions, including those which were sent but not via API 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllMessageSessionsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllMessageSessionsPaginatedResponse>> GetAllMessageSessionsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMessageSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllMessageSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllMessageSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllMessageSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>GetAllOutboundMessagesPaginatedResponse</returns>
        public GetAllOutboundMessagesPaginatedResponse GetAllOutboundMessages (int? page = null, int? limit = null, int? lastId = null)
        {
             ApiResponse<GetAllOutboundMessagesPaginatedResponse> localVarResponse = GetAllOutboundMessagesWithHttpInfo(page, limit, lastId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>ApiResponse of GetAllOutboundMessagesPaginatedResponse</returns>
        public ApiResponse< GetAllOutboundMessagesPaginatedResponse > GetAllOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null)
        {

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>Task of GetAllOutboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllOutboundMessagesPaginatedResponse> GetAllOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null)
        {
             ApiResponse<GetAllOutboundMessagesPaginatedResponse> localVarResponse = await GetAllOutboundMessagesAsyncWithHttpInfo(page, limit, lastId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllOutboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllOutboundMessagesPaginatedResponse>> GetAllOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null)
        {

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetAllScheduledMessagesPaginatedResponse</returns>
        public GetAllScheduledMessagesPaginatedResponse GetAllScheduledMessages (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllScheduledMessagesPaginatedResponse> localVarResponse = GetAllScheduledMessagesWithHttpInfo(page, limit, status, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllScheduledMessagesPaginatedResponse</returns>
        public ApiResponse< GetAllScheduledMessagesPaginatedResponse > GetAllScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetAllScheduledMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllScheduledMessagesPaginatedResponse> GetAllScheduledMessagesAsync (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllScheduledMessagesPaginatedResponse> localVarResponse = await GetAllScheduledMessagesAsyncWithHttpInfo(page, limit, status, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllScheduledMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllScheduledMessagesPaginatedResponse>> GetAllScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all templates 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>GetAllTemplatesPaginatedResponse</returns>
        public GetAllTemplatesPaginatedResponse GetAllTemplates (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllTemplatesPaginatedResponse> localVarResponse = GetAllTemplatesWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all templates 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>ApiResponse of GetAllTemplatesPaginatedResponse</returns>
        public ApiResponse< GetAllTemplatesPaginatedResponse > GetAllTemplatesWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Get all templates 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>Task of GetAllTemplatesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTemplatesPaginatedResponse> GetAllTemplatesAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllTemplatesPaginatedResponse> localVarResponse = await GetAllTemplatesAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all templates 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional)</param>
        /// <param name="limit">The number of results per page. (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTemplatesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllTemplatesPaginatedResponse>> GetAllTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Find dedicated numbers available for purchase 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>GetAvailableDedicatedNumbersResponse</returns>
        public GetAvailableDedicatedNumbersResponse GetAvailableDedicatedNumbers (string country, int? prefix = null, int? tollfree = null)
        {
             ApiResponse<GetAvailableDedicatedNumbersResponse> localVarResponse = GetAvailableDedicatedNumbersWithHttpInfo(country, prefix, tollfree);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find dedicated numbers available for purchase 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAvailableDedicatedNumbersResponse</returns>
        public ApiResponse< GetAvailableDedicatedNumbersResponse > GetAvailableDedicatedNumbersWithHttpInfo (string country, int? prefix = null, int? tollfree = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling TextMagicApi->GetAvailableDedicatedNumbers");

            var localVarPath = "/api/v2/numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (tollfree != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tollfree", tollfree)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Find dedicated numbers available for purchase 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>Task of GetAvailableDedicatedNumbersResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersAsync (string country, int? prefix = null, int? tollfree = null)
        {
             ApiResponse<GetAvailableDedicatedNumbersResponse> localVarResponse = await GetAvailableDedicatedNumbersAsyncWithHttpInfo(country, prefix, tollfree);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find dedicated numbers available for purchase 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter dedicated number country ISO code.</param>
        /// <param name="prefix">Desired number prefix. Should include the country code (i.e. 447 for UK phone number format). Leave blank to get all the available numbers for the specified country. (optional)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAvailableDedicatedNumbersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableDedicatedNumbersResponse>> GetAvailableDedicatedNumbersAsyncWithHttpInfo (string country, int? prefix = null, int? tollfree = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling TextMagicApi->GetAvailableDedicatedNumbers");

            var localVarPath = "/api/v2/numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (tollfree != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tollfree", tollfree)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Get available sender settings Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>GetAvailableSenderSettingOptionsResponse</returns>
        public GetAvailableSenderSettingOptionsResponse GetAvailableSenderSettingOptions (string country = null)
        {
             ApiResponse<GetAvailableSenderSettingOptionsResponse> localVarResponse = GetAvailableSenderSettingOptionsWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available sender settings Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>ApiResponse of GetAvailableSenderSettingOptionsResponse</returns>
        public ApiResponse< GetAvailableSenderSettingOptionsResponse > GetAvailableSenderSettingOptionsWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableSenderSettingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableSenderSettingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableSenderSettingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableSenderSettingOptionsResponse)));
        }

        /// <summary>
        /// Get available sender settings Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>Task of GetAvailableSenderSettingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsAsync (string country = null)
        {
             ApiResponse<GetAvailableSenderSettingOptionsResponse> localVarResponse = await GetAvailableSenderSettingOptionsAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available sender settings Get all available sender setting options which can be used in the \&quot;from\&quot; parameter of the POST messages method.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The 2-letter ISO country ID. If not specified, it returns all the available sender settings. (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableSenderSettingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableSenderSettingOptionsResponse>> GetAvailableSenderSettingOptionsAsyncWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableSenderSettingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableSenderSettingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableSenderSettingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableSenderSettingOptionsResponse)));
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationOptionsResponse</returns>
        public GetBalanceNotificationOptionsResponse GetBalanceNotificationOptions ()
        {
             ApiResponse<GetBalanceNotificationOptionsResponse> localVarResponse = GetBalanceNotificationOptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationOptionsResponse</returns>
        public ApiResponse< GetBalanceNotificationOptionsResponse > GetBalanceNotificationOptionsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationOptionsResponse)));
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsAsync ()
        {
             ApiResponse<GetBalanceNotificationOptionsResponse> localVarResponse = await GetBalanceNotificationOptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationOptionsResponse>> GetBalanceNotificationOptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationOptionsResponse)));
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationSettingsResponse</returns>
        public GetBalanceNotificationSettingsResponse GetBalanceNotificationSettings ()
        {
             ApiResponse<GetBalanceNotificationSettingsResponse> localVarResponse = GetBalanceNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationSettingsResponse</returns>
        public ApiResponse< GetBalanceNotificationSettingsResponse > GetBalanceNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsAsync ()
        {
             ApiResponse<GetBalanceNotificationSettingsResponse> localVarResponse = await GetBalanceNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationSettingsResponse>> GetBalanceNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get blocked contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetBlockedContactsPaginatedResponse</returns>
        public GetBlockedContactsPaginatedResponse GetBlockedContacts (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetBlockedContactsPaginatedResponse> localVarResponse = GetBlockedContactsWithHttpInfo(page, limit, query, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get blocked contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetBlockedContactsPaginatedResponse</returns>
        public ApiResponse< GetBlockedContactsPaginatedResponse > GetBlockedContactsWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/block/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockedContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBlockedContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockedContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get blocked contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetBlockedContactsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetBlockedContactsPaginatedResponse> GetBlockedContactsAsync (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetBlockedContactsPaginatedResponse> localVarResponse = await GetBlockedContactsAsyncWithHttpInfo(page, limit, query, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get blocked contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetBlockedContactsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBlockedContactsPaginatedResponse>> GetBlockedContactsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/block/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockedContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBlockedContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockedContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get bulk session status 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>BulkSession</returns>
        public BulkSession GetBulkSession (int? id)
        {
             ApiResponse<BulkSession> localVarResponse = GetBulkSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bulk session status 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of BulkSession</returns>
        public ApiResponse< BulkSession > GetBulkSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetBulkSession");

            var localVarPath = "/api/v2/bulks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkSession)));
        }

        /// <summary>
        /// Get bulk session status 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of BulkSession</returns>
        public async System.Threading.Tasks.Task<BulkSession> GetBulkSessionAsync (int? id)
        {
             ApiResponse<BulkSession> localVarResponse = await GetBulkSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bulk session status 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (BulkSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkSession>> GetBulkSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetBulkSession");

            var localVarPath = "/api/v2/bulks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkSession)));
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallbackSettingsResponse</returns>
        public GetCallbackSettingsResponse GetCallbackSettings ()
        {
             ApiResponse<GetCallbackSettingsResponse> localVarResponse = GetCallbackSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallbackSettingsResponse</returns>
        public ApiResponse< GetCallbackSettingsResponse > GetCallbackSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallbackSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallbackSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallbackSettingsResponse)));
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallbackSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetCallbackSettingsResponse> GetCallbackSettingsAsync ()
        {
             ApiResponse<GetCallbackSettingsResponse> localVarResponse = await GetCallbackSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallbackSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCallbackSettingsResponse>> GetCallbackSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallbackSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallbackSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallbackSettingsResponse)));
        }

        /// <summary>
        /// Get a single chat 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        public Chat GetChat (int? id)
        {
             ApiResponse<Chat> localVarResponse = GetChatWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single chat 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChat");

            var localVarPath = "/api/v2/chats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Get a single chat 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatAsync (int? id)
        {
             ApiResponse<Chat> localVarResponse = await GetChatAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single chat 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChat");

            var localVarPath = "/api/v2/chats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Find chats by phone 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>Chat</returns>
        public Chat GetChatByPhone (string phone, int? upsert = null, int? reopen = null)
        {
             ApiResponse<Chat> localVarResponse = GetChatByPhoneWithHttpInfo(phone, upsert, reopen);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by phone 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatByPhoneWithHttpInfo (string phone, int? upsert = null, int? reopen = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetChatByPhone");

            var localVarPath = "/api/v2/chats/{phone}/by/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (upsert != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsert", upsert)); // query parameter
            if (reopen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reopen", reopen)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Find chats by phone 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatByPhoneAsync (string phone, int? upsert = null, int? reopen = null)
        {
             ApiResponse<Chat> localVarResponse = await GetChatByPhoneAsyncWithHttpInfo(phone, upsert, reopen);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by phone 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found. (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatByPhoneAsyncWithHttpInfo (string phone, int? upsert = null, int? reopen = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetChatByPhone");

            var localVarPath = "/api/v2/chats/{phone}/by/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (upsert != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsert", upsert)); // query parameter
            if (reopen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reopen", reopen)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Get chat messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>GetChatMessagesPaginatedResponse</returns>
        public GetChatMessagesPaginatedResponse GetChatMessages (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null)
        {
             ApiResponse<GetChatMessagesPaginatedResponse> localVarResponse = GetChatMessagesWithHttpInfo(id, page, limit, query, start, end, direction, voice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get chat messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChatMessagesPaginatedResponse</returns>
        public ApiResponse< GetChatMessagesPaginatedResponse > GetChatMessagesWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChatMessages");

            var localVarPath = "/api/v2/chats/{id}/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get chat messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>Task of GetChatMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetChatMessagesPaginatedResponse> GetChatMessagesAsync (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null)
        {
             ApiResponse<GetChatMessagesPaginatedResponse> localVarResponse = await GetChatMessagesAsyncWithHttpInfo(id, page, limit, query, start, end, direction, voice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get chat messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="start">Return messages since specified timestamp only. Required when &#x60;end&#x60; parameter specified. (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only. Required when &#x60;start&#x60; parameter specified. (optional)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChatMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChatMessagesPaginatedResponse>> GetChatMessagesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, string start = null, string end = null, string direction = null, int? voice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChatMessages");

            var localVarPath = "/api/v2/chats/{id}/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get the details of a specific contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>Contact</returns>
        public Contact GetContact (int? id)
        {
             ApiResponse<Contact> localVarResponse = GetContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get the details of a specific contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactAsync (int? id)
        {
             ApiResponse<Contact> localVarResponse = await GetContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Contact ID.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get the details of a specific contact by phone number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Contact</returns>
        public Contact GetContactByPhone (string phone)
        {
             ApiResponse<Contact> localVarResponse = GetContactByPhoneWithHttpInfo(phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific contact by phone number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactByPhoneWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactByPhone");

            var localVarPath = "/api/v2/contacts/phone/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get the details of a specific contact by phone number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactByPhoneAsync (string phone)
        {
             ApiResponse<Contact> localVarResponse = await GetContactByPhoneAsyncWithHttpInfo(phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific contact by phone number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByPhoneAsyncWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactByPhone");

            var localVarPath = "/api/v2/contacts/phone/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check if a phone number is blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>Contact</returns>
        public Contact GetContactIfBlocked (string phone)
        {
             ApiResponse<Contact> localVarResponse = GetContactIfBlockedWithHttpInfo(phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if a phone number is blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactIfBlockedWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactIfBlocked");

            var localVarPath = "/api/v2/contacts/block/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactIfBlocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check if a phone number is blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactIfBlockedAsync (string phone)
        {
             ApiResponse<Contact> localVarResponse = await GetContactIfBlockedAsyncWithHttpInfo(phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if a phone number is blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check.</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactIfBlockedAsyncWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactIfBlocked");

            var localVarPath = "/api/v2/contacts/block/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactIfBlocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check import progress Get contact import session progress.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetContactImportSessionProgressResponse</returns>
        public GetContactImportSessionProgressResponse GetContactImportSessionProgress (int? id)
        {
             ApiResponse<GetContactImportSessionProgressResponse> localVarResponse = GetContactImportSessionProgressWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check import progress Get contact import session progress.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetContactImportSessionProgressResponse</returns>
        public ApiResponse< GetContactImportSessionProgressResponse > GetContactImportSessionProgressWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactImportSessionProgress");

            var localVarPath = "/api/v2/contacts/import/progress/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactImportSessionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactImportSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactImportSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactImportSessionProgressResponse)));
        }

        /// <summary>
        /// Check import progress Get contact import session progress.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetContactImportSessionProgressResponse</returns>
        public async System.Threading.Tasks.Task<GetContactImportSessionProgressResponse> GetContactImportSessionProgressAsync (int? id)
        {
             ApiResponse<GetContactImportSessionProgressResponse> localVarResponse = await GetContactImportSessionProgressAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check import progress Get contact import session progress.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetContactImportSessionProgressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactImportSessionProgressResponse>> GetContactImportSessionProgressAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactImportSessionProgress");

            var localVarPath = "/api/v2/contacts/import/progress/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactImportSessionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactImportSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactImportSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactImportSessionProgressResponse)));
        }

        /// <summary>
        /// Get a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactNote</returns>
        public ContactNote GetContactNote (int? id)
        {
             ApiResponse<ContactNote> localVarResponse = GetContactNoteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactNote</returns>
        public ApiResponse< ContactNote > GetContactNoteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNote)));
        }

        /// <summary>
        /// Get a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactNote</returns>
        public async System.Threading.Tasks.Task<ContactNote> GetContactNoteAsync (int? id)
        {
             ApiResponse<ContactNote> localVarResponse = await GetContactNoteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNote>> GetContactNoteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNote)));
        }

        /// <summary>
        /// Fetch notes assigned to a given contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetContactNotesPaginatedResponse</returns>
        public GetContactNotesPaginatedResponse GetContactNotes (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetContactNotesPaginatedResponse> localVarResponse = GetContactNotesWithHttpInfo(id, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch notes assigned to a given contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetContactNotesPaginatedResponse</returns>
        public ApiResponse< GetContactNotesPaginatedResponse > GetContactNotesWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNotes");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactNotesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactNotesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactNotesPaginatedResponse)));
        }

        /// <summary>
        /// Fetch notes assigned to a given contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetContactNotesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetContactNotesPaginatedResponse> GetContactNotesAsync (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetContactNotesPaginatedResponse> localVarResponse = await GetContactNotesAsyncWithHttpInfo(id, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch notes assigned to a given contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetContactNotesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactNotesPaginatedResponse>> GetContactNotesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNotes");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactNotesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactNotesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactNotesPaginatedResponse)));
        }

        /// <summary>
        /// Get all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetContactsPaginatedResponse</returns>
        public GetContactsPaginatedResponse GetContacts (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsPaginatedResponse> localVarResponse = GetContactsWithHttpInfo(page, limit, shared, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsPaginatedResponse</returns>
        public ApiResponse< GetContactsPaginatedResponse > GetContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetContactsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsPaginatedResponse> GetContactsAsync (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsPaginatedResponse> localVarResponse = await GetContactsAsyncWithHttpInfo(page, limit, shared, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsPaginatedResponse>> GetContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get contacts autocomplete suggestions Get contacts autocomplete suggestions by given search terms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>GetContactsAutocompleteResponse</returns>
        public GetContactsAutocompleteResponse GetContactsAutocomplete (string query, int? limit = null, int? lists = null)
        {
             ApiResponse<GetContactsAutocompleteResponse> localVarResponse = GetContactsAutocompleteWithHttpInfo(query, limit, lists);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contacts autocomplete suggestions Get contacts autocomplete suggestions by given search terms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>ApiResponse of GetContactsAutocompleteResponse</returns>
        public ApiResponse< GetContactsAutocompleteResponse > GetContactsAutocompleteWithHttpInfo (string query, int? limit = null, int? lists = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling TextMagicApi->GetContactsAutocomplete");

            var localVarPath = "/api/v2/contacts/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsAutocompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsAutocompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsAutocompleteResponse)));
        }

        /// <summary>
        /// Get contacts autocomplete suggestions Get contacts autocomplete suggestions by given search terms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>Task of GetContactsAutocompleteResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsAutocompleteResponse> GetContactsAutocompleteAsync (string query, int? limit = null, int? lists = null)
        {
             ApiResponse<GetContactsAutocompleteResponse> localVarResponse = await GetContactsAutocompleteAsyncWithHttpInfo(query, limit, lists);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contacts autocomplete suggestions Get contacts autocomplete suggestions by given search terms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query.</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not? (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetContactsAutocompleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsAutocompleteResponse>> GetContactsAutocompleteAsyncWithHttpInfo (string query, int? limit = null, int? lists = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling TextMagicApi->GetContactsAutocomplete");

            var localVarPath = "/api/v2/contacts/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsAutocompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsAutocompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsAutocompleteResponse)));
        }

        /// <summary>
        /// Get all contacts in a list A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetContactsByListIdPaginatedResponse</returns>
        public GetContactsByListIdPaginatedResponse GetContactsByListId (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsByListIdPaginatedResponse> localVarResponse = GetContactsByListIdWithHttpInfo(id, page, limit, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts in a list A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsByListIdPaginatedResponse</returns>
        public ApiResponse< GetContactsByListIdPaginatedResponse > GetContactsByListIdWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactsByListId");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByListId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsByListIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsByListIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsByListIdPaginatedResponse)));
        }

        /// <summary>
        /// Get all contacts in a list A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetContactsByListIdPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsByListIdPaginatedResponse> GetContactsByListIdAsync (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsByListIdPaginatedResponse> localVarResponse = await GetContactsByListIdAsyncWithHttpInfo(id, page, limit, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contacts in a list A useful synonym for the \&quot;contacts/search\&quot; command with the provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group ID.</param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsByListIdPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsByListIdPaginatedResponse>> GetContactsByListIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactsByListId");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByListId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsByListIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsByListIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsByListIdPaginatedResponse)));
        }

        /// <summary>
        /// Get countries 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCountriesResponse</returns>
        public GetCountriesResponse GetCountries ()
        {
             ApiResponse<GetCountriesResponse> localVarResponse = GetCountriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get countries 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCountriesResponse</returns>
        public ApiResponse< GetCountriesResponse > GetCountriesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountriesResponse)));
        }

        /// <summary>
        /// Get countries 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCountriesResponse</returns>
        public async System.Threading.Tasks.Task<GetCountriesResponse> GetCountriesAsync ()
        {
             ApiResponse<GetCountriesResponse> localVarResponse = await GetCountriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get countries 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCountriesResponse>> GetCountriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountriesResponse)));
        }

        /// <summary>
        /// Get current account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetCurrentUser ()
        {
             ApiResponse<User> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get current account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetCurrentUserAsync ()
        {
             ApiResponse<User> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get the details of a specific custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserCustomField</returns>
        public UserCustomField GetCustomField (int? id)
        {
             ApiResponse<UserCustomField> localVarResponse = GetCustomFieldWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserCustomField</returns>
        public ApiResponse< UserCustomField > GetCustomFieldWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCustomField)));
        }

        /// <summary>
        /// Get the details of a specific custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserCustomField</returns>
        public async System.Threading.Tasks.Task<UserCustomField> GetCustomFieldAsync (int? id)
        {
             ApiResponse<UserCustomField> localVarResponse = await GetCustomFieldAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserCustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCustomField>> GetCustomFieldAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCustomField)));
        }

        /// <summary>
        /// Get all custom fields 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetCustomFieldsPaginatedResponse</returns>
        public GetCustomFieldsPaginatedResponse GetCustomFields (int? page = null, int? limit = null)
        {
             ApiResponse<GetCustomFieldsPaginatedResponse> localVarResponse = GetCustomFieldsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all custom fields 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetCustomFieldsPaginatedResponse</returns>
        public ApiResponse< GetCustomFieldsPaginatedResponse > GetCustomFieldsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomFieldsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCustomFieldsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomFieldsPaginatedResponse)));
        }

        /// <summary>
        /// Get all custom fields 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetCustomFieldsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetCustomFieldsPaginatedResponse> GetCustomFieldsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetCustomFieldsPaginatedResponse> localVarResponse = await GetCustomFieldsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all custom fields 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetCustomFieldsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCustomFieldsPaginatedResponse>> GetCustomFieldsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomFieldsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCustomFieldsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomFieldsPaginatedResponse)));
        }

        /// <summary>
        /// Get the details of a specific dedicated number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UsersInbound</returns>
        public UsersInbound GetDedicatedNumber (int? id)
        {
             ApiResponse<UsersInbound> localVarResponse = GetDedicatedNumberWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific dedicated number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UsersInbound</returns>
        public ApiResponse< UsersInbound > GetDedicatedNumberWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersInbound>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersInbound) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersInbound)));
        }

        /// <summary>
        /// Get the details of a specific dedicated number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UsersInbound</returns>
        public async System.Threading.Tasks.Task<UsersInbound> GetDedicatedNumberAsync (int? id)
        {
             ApiResponse<UsersInbound> localVarResponse = await GetDedicatedNumberAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific dedicated number 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UsersInbound)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersInbound>> GetDedicatedNumberAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersInbound>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersInbound) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersInbound)));
        }

        /// <summary>
        /// Get favorite contacts and lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>GetFavoritesPaginatedResponse</returns>
        public GetFavoritesPaginatedResponse GetFavorites (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<GetFavoritesPaginatedResponse> localVarResponse = GetFavoritesWithHttpInfo(page, limit, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get favorite contacts and lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>ApiResponse of GetFavoritesPaginatedResponse</returns>
        public ApiResponse< GetFavoritesPaginatedResponse > GetFavoritesWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/contacts/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavoritesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFavoritesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavoritesPaginatedResponse)));
        }

        /// <summary>
        /// Get favorite contacts and lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>Task of GetFavoritesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetFavoritesPaginatedResponse> GetFavoritesAsync (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<GetFavoritesPaginatedResponse> localVarResponse = await GetFavoritesAsyncWithHttpInfo(page, limit, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get favorite contacts and lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query. (optional)</param>
        /// <returns>Task of ApiResponse (GetFavoritesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFavoritesPaginatedResponse>> GetFavoritesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/contacts/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavoritesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFavoritesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavoritesPaginatedResponse)));
        }

        /// <summary>
        /// Get a single inbound message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>MessageIn</returns>
        public MessageIn GetInboundMessage (int? id)
        {
             ApiResponse<MessageIn> localVarResponse = GetInboundMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single inbound message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>ApiResponse of MessageIn</returns>
        public ApiResponse< MessageIn > GetInboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageIn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageIn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageIn)));
        }

        /// <summary>
        /// Get a single inbound message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of MessageIn</returns>
        public async System.Threading.Tasks.Task<MessageIn> GetInboundMessageAsync (int? id)
        {
             ApiResponse<MessageIn> localVarResponse = await GetInboundMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single inbound message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique numeric ID for the inbound message.</param>
        /// <returns>Task of ApiResponse (MessageIn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageIn>> GetInboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageIn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageIn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageIn)));
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInboundMessagesNotificationSettingsResponse</returns>
        public GetInboundMessagesNotificationSettingsResponse GetInboundMessagesNotificationSettings ()
        {
             ApiResponse<GetInboundMessagesNotificationSettingsResponse> localVarResponse = GetInboundMessagesNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetInboundMessagesNotificationSettingsResponse</returns>
        public ApiResponse< GetInboundMessagesNotificationSettingsResponse > GetInboundMessagesNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundMessagesNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundMessagesNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundMessagesNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInboundMessagesNotificationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsAsync ()
        {
             ApiResponse<GetInboundMessagesNotificationSettingsResponse> localVarResponse = await GetInboundMessagesNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInboundMessagesNotificationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInboundMessagesNotificationSettingsResponse>> GetInboundMessagesNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundMessagesNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundMessagesNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundMessagesNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get all invoices With the TextMagic API, you can check the invoices and transactions for your account.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetInvoicesPaginatedResponse</returns>
        public GetInvoicesPaginatedResponse GetInvoices (int? page = null, int? limit = null)
        {
             ApiResponse<GetInvoicesPaginatedResponse> localVarResponse = GetInvoicesWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all invoices With the TextMagic API, you can check the invoices and transactions for your account.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetInvoicesPaginatedResponse</returns>
        public ApiResponse< GetInvoicesPaginatedResponse > GetInvoicesWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvoicesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvoicesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvoicesPaginatedResponse)));
        }

        /// <summary>
        /// Get all invoices With the TextMagic API, you can check the invoices and transactions for your account.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetInvoicesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoicesPaginatedResponse> GetInvoicesAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetInvoicesPaginatedResponse> localVarResponse = await GetInvoicesAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all invoices With the TextMagic API, you can check the invoices and transactions for your account.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetInvoicesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInvoicesPaginatedResponse>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvoicesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvoicesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvoicesPaginatedResponse)));
        }

        /// <summary>
        /// Get the details of a specific list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List</returns>
        public List GetList (int? id)
        {
             ApiResponse<List> localVarResponse = GetListWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List</returns>
        public ApiResponse< List > GetListWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List)));
        }

        /// <summary>
        /// Get the details of a specific list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List</returns>
        public async System.Threading.Tasks.Task<List> GetListAsync (int? id)
        {
             ApiResponse<List> localVarResponse = await GetListAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List>> GetListAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List)));
        }

        /// <summary>
        /// Get all contact IDs in a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetListContactsIdsResponse</returns>
        public GetListContactsIdsResponse GetListContactsIds (int? id)
        {
             ApiResponse<GetListContactsIdsResponse> localVarResponse = GetListContactsIdsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact IDs in a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetListContactsIdsResponse</returns>
        public ApiResponse< GetListContactsIdsResponse > GetListContactsIdsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListContactsIds");

            var localVarPath = "/api/v2/lists/{id}/contacts/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListContactsIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListContactsIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListContactsIdsResponse)));
        }

        /// <summary>
        /// Get all contact IDs in a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetListContactsIdsResponse</returns>
        public async System.Threading.Tasks.Task<GetListContactsIdsResponse> GetListContactsIdsAsync (int? id)
        {
             ApiResponse<GetListContactsIdsResponse> localVarResponse = await GetListContactsIdsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact IDs in a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetListContactsIdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListContactsIdsResponse>> GetListContactsIdsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListContactsIds");

            var localVarPath = "/api/v2/lists/{id}/contacts/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListContactsIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListContactsIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListContactsIdsResponse)));
        }

        /// <summary>
        /// Get all lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>GetListsPaginatedResponse</returns>
        public GetListsPaginatedResponse GetLists (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {
             ApiResponse<GetListsPaginatedResponse> localVarResponse = GetListsWithHttpInfo(page, limit, orderBy, direction, favoriteOnly, onlyMine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetListsPaginatedResponse</returns>
        public ApiResponse< GetListsPaginatedResponse > GetListsWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (favoriteOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favoriteOnly", favoriteOnly)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsPaginatedResponse)));
        }

        /// <summary>
        /// Get all lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>Task of GetListsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetListsPaginatedResponse> GetListsAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {
             ApiResponse<GetListsPaginatedResponse> localVarResponse = await GetListsAsyncWithHttpInfo(page, limit, orderBy, direction, favoriteOnly, onlyMine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all lists 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The current fetched page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorited lists. (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetListsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListsPaginatedResponse>> GetListsAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (favoriteOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favoriteOnly", favoriteOnly)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsPaginatedResponse)));
        }

        /// <summary>
        /// Get a contact&#39;s lists Get all the lists in which a contact is included.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetListsOfContactPaginatedResponse</returns>
        public GetListsOfContactPaginatedResponse GetListsOfContact (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetListsOfContactPaginatedResponse> localVarResponse = GetListsOfContactWithHttpInfo(id, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a contact&#39;s lists Get all the lists in which a contact is included.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetListsOfContactPaginatedResponse</returns>
        public ApiResponse< GetListsOfContactPaginatedResponse > GetListsOfContactWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListsOfContact");

            var localVarPath = "/api/v2/contacts/{id}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListsOfContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsOfContactPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsOfContactPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsOfContactPaginatedResponse)));
        }

        /// <summary>
        /// Get a contact&#39;s lists Get all the lists in which a contact is included.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetListsOfContactPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetListsOfContactPaginatedResponse> GetListsOfContactAsync (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetListsOfContactPaginatedResponse> localVarResponse = await GetListsOfContactAsyncWithHttpInfo(id, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a contact&#39;s lists Get all the lists in which a contact is included.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetListsOfContactPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListsOfContactPaginatedResponse>> GetListsOfContactAsyncWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListsOfContact");

            var localVarPath = "/api/v2/contacts/{id}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListsOfContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsOfContactPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsOfContactPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsOfContactPaginatedResponse)));
        }

        /// <summary>
        /// Preview message Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>GetMessagePreviewResponse</returns>
        public GetMessagePreviewResponse GetMessagePreview (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePreviewResponse> localVarResponse = GetMessagePreviewWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preview message Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>ApiResponse of GetMessagePreviewResponse</returns>
        public ApiResponse< GetMessagePreviewResponse > GetMessagePreviewWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePreviewResponse)));
        }

        /// <summary>
        /// Preview message Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of GetMessagePreviewResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePreviewResponse> GetMessagePreviewAsync (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePreviewResponse> localVarResponse = await GetMessagePreviewAsyncWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preview message Get a messages preview (with tags merged) of up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when the sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending of 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat(if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePreviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePreviewResponse>> GetMessagePreviewAsyncWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePreviewResponse)));
        }

        /// <summary>
        /// Check message price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>GetMessagePriceResponse</returns>
        public GetMessagePriceResponse GetMessagePrice (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePriceResponse> localVarResponse = GetMessagePriceWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check message price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>ApiResponse of GetMessagePriceResponse</returns>
        public ApiResponse< GetMessagePriceResponse > GetMessagePriceWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/price/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePriceResponse)));
        }

        /// <summary>
        /// Check message price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of GetMessagePriceResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePriceResponse> GetMessagePriceAsync (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePriceResponse> localVarResponse = await GetMessagePriceAsyncWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check message price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show the pricing for blocked contacts? (optional, default to 0)</param>
        /// <param name="text">Message text. Required if the **template_id** is not set. (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if the **text** is not set. (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using the sendingDateTime and sendingTimezone parameters instead: optional (required with rrule set). Message sending time is in unix timestamp format. Default is now. (optional)</param>
        /// <param name="sendingDateTime">Sending time is in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to the sendingTimezone. (optional)</param>
        /// <param name="sendingTimezone">The ID or ISO-name of the timezone used for sending when sendingDateTime parameter is set, e.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent on May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is the account timezone. (optional)</param>
        /// <param name="contacts">Comma-separated array of contact resources id message will be sent to. (optional)</param>
        /// <param name="lists">Comma-separated array of list resources id message will be sent to. (optional)</param>
        /// <param name="phones">Comma-separated array of E.164 phone numbers message will be sent to. (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (Textmagic allows sending 1 to 6 message parts). (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure. (optional)</param>
        /// <param name="from">One of the allowed Sender ID (phone number or alphanumeric sender ID). If the specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs). (optional)</param>
        /// <param name="rule">An iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as the start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details. (optional)</param>
        /// <param name="createChat">Should the sending method try to create new Chat (if not exist) with specified recipients? (optional, default to 0)</param>
        /// <param name="tts">Send a Text-to-Speech message. (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in the \\&#39;phones\\&#39; field as local. (optional, default to 0)</param>
        /// <param name="localCountry">The 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is the account country. (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePriceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePriceResponse>> GetMessagePriceAsyncWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/price/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePriceResponse)));
        }

        /// <summary>
        /// Get a session&#x60;s details Get a specific session’s details.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>MessageSession</returns>
        public MessageSession GetMessageSession (int? id)
        {
             ApiResponse<MessageSession> localVarResponse = GetMessageSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a session&#x60;s details Get a specific session’s details.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>ApiResponse of MessageSession</returns>
        public ApiResponse< MessageSession > GetMessageSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSession)));
        }

        /// <summary>
        /// Get a session&#x60;s details Get a specific session’s details.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>Task of MessageSession</returns>
        public async System.Threading.Tasks.Task<MessageSession> GetMessageSessionAsync (int? id)
        {
             ApiResponse<MessageSession> localVarResponse = await GetMessageSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a session&#x60;s details Get a specific session’s details.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Session ID.</param>
        /// <returns>Task of ApiResponse (MessageSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageSession>> GetMessageSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSession)));
        }

        /// <summary>
        /// Get a session&#x60;s statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>GetMessageSessionStatResponse</returns>
        public GetMessageSessionStatResponse GetMessageSessionStat (int? id, int? includeDeleted = null)
        {
             ApiResponse<GetMessageSessionStatResponse> localVarResponse = GetMessageSessionStatWithHttpInfo(id, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a session&#x60;s statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessageSessionStatResponse</returns>
        public ApiResponse< GetMessageSessionStatResponse > GetMessageSessionStatWithHttpInfo (int? id, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSessionStat");

            var localVarPath = "/api/v2/sessions/{id}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSessionStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSessionStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessageSessionStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSessionStatResponse)));
        }

        /// <summary>
        /// Get a session&#x60;s statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of GetMessageSessionStatResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageSessionStatResponse> GetMessageSessionStatAsync (int? id, int? includeDeleted = null)
        {
             ApiResponse<GetMessageSessionStatResponse> localVarResponse = await GetMessageSessionStatAsyncWithHttpInfo(id, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a session&#x60;s statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessageSessionStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageSessionStatResponse>> GetMessageSessionStatAsyncWithHttpInfo (int? id, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSessionStat");

            var localVarPath = "/api/v2/sessions/{id}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSessionStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSessionStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessageSessionStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSessionStatResponse)));
        }

        /// <summary>
        /// Get a session&#x60;s messages A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>GetMessagesBySessionIdPaginatedResponse</returns>
        public GetMessagesBySessionIdPaginatedResponse GetMessagesBySessionId (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
             ApiResponse<GetMessagesBySessionIdPaginatedResponse> localVarResponse = GetMessagesBySessionIdWithHttpInfo(id, page, limit, statuses, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a session&#x60;s messages A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessagesBySessionIdPaginatedResponse</returns>
        public ApiResponse< GetMessagesBySessionIdPaginatedResponse > GetMessagesBySessionIdWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessagesBySessionId");

            var localVarPath = "/api/v2/sessions/{id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagesBySessionIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagesBySessionIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagesBySessionIdPaginatedResponse)));
        }

        /// <summary>
        /// Get a session&#x60;s messages A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of GetMessagesBySessionIdPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagesBySessionIdPaginatedResponse> GetMessagesBySessionIdAsync (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
             ApiResponse<GetMessagesBySessionIdPaginatedResponse> localVarResponse = await GetMessagesBySessionIdAsyncWithHttpInfo(id, page, limit, statuses, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a session&#x60;s messages A useful synonym for the \&quot;messages/search\&quot; command with the provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessagesBySessionIdPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagesBySessionIdPaginatedResponse>> GetMessagesBySessionIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessagesBySessionId");

            var localVarPath = "/api/v2/sessions/{id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagesBySessionIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagesBySessionIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagesBySessionIdPaginatedResponse)));
        }

        /// <summary>
        /// Get sent/received messages counters values Get total contacts, sent messages and received messages counters values.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagingCountersResponse</returns>
        public GetMessagingCountersResponse GetMessagingCounters ()
        {
             ApiResponse<GetMessagingCountersResponse> localVarResponse = GetMessagingCountersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sent/received messages counters values Get total contacts, sent messages and received messages counters values.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagingCountersResponse</returns>
        public ApiResponse< GetMessagingCountersResponse > GetMessagingCountersWithHttpInfo ()
        {

            var localVarPath = "/api/v2/stats/messaging/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingCounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingCountersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingCountersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingCountersResponse)));
        }

        /// <summary>
        /// Get sent/received messages counters values Get total contacts, sent messages and received messages counters values.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagingCountersResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagingCountersResponse> GetMessagingCountersAsync ()
        {
             ApiResponse<GetMessagingCountersResponse> localVarResponse = await GetMessagingCountersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sent/received messages counters values Get total contacts, sent messages and received messages counters values.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagingCountersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagingCountersResponse>> GetMessagingCountersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/stats/messaging/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingCounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingCountersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingCountersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingCountersResponse)));
        }

        /// <summary>
        /// Get messaging statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>GetMessagingStatResponse</returns>
        public GetMessagingStatResponse GetMessagingStat (string by = null, int? start = null, int? end = null)
        {
             ApiResponse<GetMessagingStatResponse> localVarResponse = GetMessagingStatWithHttpInfo(by, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get messaging statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>ApiResponse of GetMessagingStatResponse</returns>
        public ApiResponse< GetMessagingStatResponse > GetMessagingStatWithHttpInfo (string by = null, int? start = null, int? end = null)
        {

            var localVarPath = "/api/v2/stats/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingStatResponse)));
        }

        /// <summary>
        /// Get messaging statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of GetMessagingStatResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagingStatResponse> GetMessagingStatAsync (string by = null, int? start = null, int? end = null)
        {
             ApiResponse<GetMessagingStatResponse> localVarResponse = await GetMessagingStatAsyncWithHttpInfo(by, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get messaging statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">*   **off** - to get total values per specified time interval; *   **day** - to show values grouped by day; *   **month** - to show values grouped by month; *   **year** - to show values grouped by year.  (optional, default to off)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagingStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagingStatResponse>> GetMessagingStatAsyncWithHttpInfo (string by = null, int? start = null, int? end = null)
        {

            var localVarPath = "/api/v2/stats/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingStatResponse)));
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageOut</returns>
        public MessageOut GetOutboundMessage (int? id)
        {
             ApiResponse<MessageOut> localVarResponse = GetOutboundMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageOut</returns>
        public ApiResponse< MessageOut > GetOutboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageOut)));
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageOut</returns>
        public async System.Threading.Tasks.Task<MessageOut> GetOutboundMessageAsync (int? id)
        {
             ApiResponse<MessageOut> localVarResponse = await GetOutboundMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageOut>> GetOutboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageOut)));
        }

        /// <summary>
        /// Get history Get the outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>GetOutboundMessagesHistoryPaginatedResponse</returns>
        public GetOutboundMessagesHistoryPaginatedResponse GetOutboundMessagesHistory (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetOutboundMessagesHistoryPaginatedResponse> localVarResponse = GetOutboundMessagesHistoryWithHttpInfo(limit, lastId, query, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get history Get the outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of GetOutboundMessagesHistoryPaginatedResponse</returns>
        public ApiResponse< GetOutboundMessagesHistoryPaginatedResponse > GetOutboundMessagesHistoryWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessagesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOutboundMessagesHistoryPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOutboundMessagesHistoryPaginatedResponse)));
        }

        /// <summary>
        /// Get history Get the outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of GetOutboundMessagesHistoryPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetOutboundMessagesHistoryPaginatedResponse> GetOutboundMessagesHistoryAsync (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetOutboundMessagesHistoryPaginatedResponse> localVarResponse = await GetOutboundMessagesHistoryAsyncWithHttpInfo(limit, lastId, query, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get history Get the outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetOutboundMessagesHistoryPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>> GetOutboundMessagesHistoryAsyncWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessagesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOutboundMessagesHistoryPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOutboundMessagesHistoryPaginatedResponse)));
        }

        /// <summary>
        /// Get a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessagesIcs</returns>
        public MessagesIcs GetScheduledMessage (int? id)
        {
             ApiResponse<MessagesIcs> localVarResponse = GetScheduledMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessagesIcs</returns>
        public ApiResponse< MessagesIcs > GetScheduledMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesIcs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesIcs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesIcs)));
        }

        /// <summary>
        /// Get a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessagesIcs</returns>
        public async System.Threading.Tasks.Task<MessagesIcs> GetScheduledMessageAsync (int? id)
        {
             ApiResponse<MessagesIcs> localVarResponse = await GetScheduledMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single scheduled message 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessagesIcs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesIcs>> GetScheduledMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesIcs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesIcs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesIcs)));
        }

        /// <summary>
        /// Get the details of a specific Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SenderId</returns>
        public SenderId GetSenderId (int? id)
        {
             ApiResponse<SenderId> localVarResponse = GetSenderIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SenderId</returns>
        public ApiResponse< SenderId > GetSenderIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SenderId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderId)));
        }

        /// <summary>
        /// Get the details of a specific Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SenderId</returns>
        public async System.Threading.Tasks.Task<SenderId> GetSenderIdAsync (int? id)
        {
             ApiResponse<SenderId> localVarResponse = await GetSenderIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific Sender ID 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SenderId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderId>> GetSenderIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SenderId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderId)));
        }

        /// <summary>
        /// Get all your approved Sender IDs 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetSenderIdsPaginatedResponse</returns>
        public GetSenderIdsPaginatedResponse GetSenderIds (int? page = null, int? limit = null)
        {
             ApiResponse<GetSenderIdsPaginatedResponse> localVarResponse = GetSenderIdsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all your approved Sender IDs 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSenderIdsPaginatedResponse</returns>
        public ApiResponse< GetSenderIdsPaginatedResponse > GetSenderIdsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderIdsPaginatedResponse)));
        }

        /// <summary>
        /// Get all your approved Sender IDs 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetSenderIdsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetSenderIdsPaginatedResponse> GetSenderIdsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetSenderIdsPaginatedResponse> localVarResponse = await GetSenderIdsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all your approved Sender IDs 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSenderIdsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSenderIdsPaginatedResponse>> GetSenderIdsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderIdsPaginatedResponse)));
        }

        /// <summary>
        /// Get current sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>GetSenderSettingsResponse</returns>
        public GetSenderSettingsResponse GetSenderSettings (string country = null)
        {
             ApiResponse<GetSenderSettingsResponse> localVarResponse = GetSenderSettingsWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>ApiResponse of GetSenderSettingsResponse</returns>
        public ApiResponse< GetSenderSettingsResponse > GetSenderSettingsWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sender/settings/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderSettingsResponse)));
        }

        /// <summary>
        /// Get current sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>Task of GetSenderSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSenderSettingsResponse> GetSenderSettingsAsync (string country = null)
        {
             ApiResponse<GetSenderSettingsResponse> localVarResponse = await GetSenderSettingsAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to a specified country. Should be 2 upper-case characters. (optional)</param>
        /// <returns>Task of ApiResponse (GetSenderSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSenderSettingsResponse>> GetSenderSettingsAsyncWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sender/settings/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderSettingsResponse)));
        }

        /// <summary>
        /// Get spending statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>GetSpendingStatPaginatedResponse</returns>
        public GetSpendingStatPaginatedResponse GetSpendingStat (int? page = null, int? limit = null, string start = null, string end = null)
        {
             ApiResponse<GetSpendingStatPaginatedResponse> localVarResponse = GetSpendingStatWithHttpInfo(page, limit, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get spending statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>ApiResponse of GetSpendingStatPaginatedResponse</returns>
        public ApiResponse< GetSpendingStatPaginatedResponse > GetSpendingStatWithHttpInfo (int? page = null, int? limit = null, string start = null, string end = null)
        {

            var localVarPath = "/api/v2/stats/spending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpendingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpendingStatPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpendingStatPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpendingStatPaginatedResponse)));
        }

        /// <summary>
        /// Get spending statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of GetSpendingStatPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetSpendingStatPaginatedResponse> GetSpendingStatAsync (int? page = null, int? limit = null, string start = null, string end = null)
        {
             ApiResponse<GetSpendingStatPaginatedResponse> localVarResponse = await GetSpendingStatAsyncWithHttpInfo(page, limit, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get spending statistics 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="start">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is 7 days prior.  (optional)</param>
        /// <param name="end">Time period start in [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time) format. The default is today.  (optional)</param>
        /// <returns>Task of ApiResponse (GetSpendingStatPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpendingStatPaginatedResponse>> GetSpendingStatAsyncWithHttpInfo (int? page = null, int? limit = null, string start = null, string end = null)
        {

            var localVarPath = "/api/v2/stats/spending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpendingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpendingStatPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpendingStatPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpendingStatPaginatedResponse)));
        }

        /// <summary>
        /// Get sub-account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        public User GetSubaccount (int? id)
        {
             ApiResponse<User> localVarResponse = GetSubaccountWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub-account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetSubaccountWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get sub-account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSubaccountAsync (int? id)
        {
             ApiResponse<User> localVarResponse = await GetSubaccountAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sub-account information 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a sub-accounts list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>User</returns>
        public User GetSubaccounts (int? page = null, int? limit = null)
        {
             ApiResponse<User> localVarResponse = GetSubaccountsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a sub-accounts list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetSubaccountsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a sub-accounts list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSubaccountsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<User> localVarResponse = await GetSubaccountsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a sub-accounts list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetSubaccountsWithTokensResponse</returns>
        public GetSubaccountsWithTokensResponse GetSubaccountsWithTokens (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
             ApiResponse<GetSubaccountsWithTokensResponse> localVarResponse = GetSubaccountsWithTokensWithHttpInfo(getSubaccountsWithTokensInputObject, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSubaccountsWithTokensResponse</returns>
        public ApiResponse< GetSubaccountsWithTokensResponse > GetSubaccountsWithTokensWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
            // verify the required parameter 'getSubaccountsWithTokensInputObject' is set
            if (getSubaccountsWithTokensInputObject == null)
                throw new ApiException(400, "Missing required parameter 'getSubaccountsWithTokensInputObject' when calling TextMagicApi->GetSubaccountsWithTokens");

            var localVarPath = "/api/v2/subaccounts/tokens/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (getSubaccountsWithTokensInputObject != null && getSubaccountsWithTokensInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getSubaccountsWithTokensInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSubaccountsWithTokensInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccountsWithTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubaccountsWithTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubaccountsWithTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubaccountsWithTokensResponse)));
        }

        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetSubaccountsWithTokensResponse</returns>
        public async System.Threading.Tasks.Task<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensAsync (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
             ApiResponse<GetSubaccountsWithTokensResponse> localVarResponse = await GetSubaccountsWithTokensAsyncWithHttpInfo(getSubaccountsWithTokensInputObject, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all sub-accounts with their REST API tokens associated with a specified app name Get all sub-accounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSubaccountsWithTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubaccountsWithTokensResponse>> GetSubaccountsWithTokensAsyncWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
            // verify the required parameter 'getSubaccountsWithTokensInputObject' is set
            if (getSubaccountsWithTokensInputObject == null)
                throw new ApiException(400, "Missing required parameter 'getSubaccountsWithTokensInputObject' when calling TextMagicApi->GetSubaccountsWithTokens");

            var localVarPath = "/api/v2/subaccounts/tokens/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (getSubaccountsWithTokensInputObject != null && getSubaccountsWithTokensInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getSubaccountsWithTokensInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSubaccountsWithTokensInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccountsWithTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubaccountsWithTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubaccountsWithTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubaccountsWithTokensResponse)));
        }

        /// <summary>
        /// Get a template&#x60;s details Get a single template.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageTemplate</returns>
        public MessageTemplate GetTemplate (int? id)
        {
             ApiResponse<MessageTemplate> localVarResponse = GetTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a template&#x60;s details Get a single template.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        public ApiResponse< MessageTemplate > GetTemplateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// Get a template&#x60;s details Get a single template.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageTemplate</returns>
        public async System.Threading.Tasks.Task<MessageTemplate> GetTemplateAsync (int? id)
        {
             ApiResponse<MessageTemplate> localVarResponse = await GetTemplateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a template&#x60;s details Get a single template.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetTemplateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// Get timezones Return all available timezone IDs
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>GetTimezonesResponse</returns>
        public GetTimezonesResponse GetTimezones (int? full = null)
        {
             ApiResponse<GetTimezonesResponse> localVarResponse = GetTimezonesWithHttpInfo(full);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timezones Return all available timezone IDs
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetTimezonesResponse</returns>
        public ApiResponse< GetTimezonesResponse > GetTimezonesWithHttpInfo (int? full = null)
        {

            var localVarPath = "/api/v2/timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezonesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTimezonesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezonesResponse)));
        }

        /// <summary>
        /// Get timezones Return all available timezone IDs
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>Task of GetTimezonesResponse</returns>
        public async System.Threading.Tasks.Task<GetTimezonesResponse> GetTimezonesAsync (int? full = null)
        {
             ApiResponse<GetTimezonesResponse> localVarResponse = await GetTimezonesAsyncWithHttpInfo(full);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timezones Return all available timezone IDs
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetTimezonesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTimezonesResponse>> GetTimezonesAsyncWithHttpInfo (int? full = null)
        {

            var localVarPath = "/api/v2/timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezonesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTimezonesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezonesResponse)));
        }

        /// <summary>
        /// Get unread messages number Get the total amount of unread messages in the current user chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadMessagesTotalResponse</returns>
        public GetUnreadMessagesTotalResponse GetUnreadMessagesTotal ()
        {
             ApiResponse<GetUnreadMessagesTotalResponse> localVarResponse = GetUnreadMessagesTotalWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unread messages number Get the total amount of unread messages in the current user chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadMessagesTotalResponse</returns>
        public ApiResponse< GetUnreadMessagesTotalResponse > GetUnreadMessagesTotalWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/unread/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadMessagesTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadMessagesTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnreadMessagesTotalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadMessagesTotalResponse)));
        }

        /// <summary>
        /// Get unread messages number Get the total amount of unread messages in the current user chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadMessagesTotalResponse</returns>
        public async System.Threading.Tasks.Task<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalAsync ()
        {
             ApiResponse<GetUnreadMessagesTotalResponse> localVarResponse = await GetUnreadMessagesTotalAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unread messages number Get the total amount of unread messages in the current user chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadMessagesTotalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnreadMessagesTotalResponse>> GetUnreadMessagesTotalAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/unread/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadMessagesTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadMessagesTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnreadMessagesTotalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadMessagesTotalResponse)));
        }

        /// <summary>
        /// Get the details of a specific unsubscribed contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnsubscribedContact</returns>
        public UnsubscribedContact GetUnsubscribedContact (int? id)
        {
             ApiResponse<UnsubscribedContact> localVarResponse = GetUnsubscribedContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a specific unsubscribed contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnsubscribedContact</returns>
        public ApiResponse< UnsubscribedContact > GetUnsubscribedContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetUnsubscribedContact");

            var localVarPath = "/api/v2/unsubscribers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribedContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribedContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribedContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribedContact)));
        }

        /// <summary>
        /// Get the details of a specific unsubscribed contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnsubscribedContact</returns>
        public async System.Threading.Tasks.Task<UnsubscribedContact> GetUnsubscribedContactAsync (int? id)
        {
             ApiResponse<UnsubscribedContact> localVarResponse = await GetUnsubscribedContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a specific unsubscribed contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnsubscribedContact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnsubscribedContact>> GetUnsubscribedContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetUnsubscribedContact");

            var localVarPath = "/api/v2/unsubscribers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribedContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribedContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribedContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribedContact)));
        }

        /// <summary>
        /// Get all unsubscribed contacts When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>GetUnsubscribersPaginatedResponse</returns>
        public GetUnsubscribersPaginatedResponse GetUnsubscribers (int? page = null, int? limit = null)
        {
             ApiResponse<GetUnsubscribersPaginatedResponse> localVarResponse = GetUnsubscribersWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all unsubscribed contacts When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>ApiResponse of GetUnsubscribersPaginatedResponse</returns>
        public ApiResponse< GetUnsubscribersPaginatedResponse > GetUnsubscribersWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnsubscribersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnsubscribersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnsubscribersPaginatedResponse)));
        }

        /// <summary>
        /// Get all unsubscribed contacts When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of GetUnsubscribersPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetUnsubscribersPaginatedResponse> GetUnsubscribersAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetUnsubscribersPaginatedResponse> localVarResponse = await GetUnsubscribersAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all unsubscribed contacts When one of your message recipients sends a request with one of the [STOP-words](https://www.textmagic.com/sms-stop-command/), they will be immediately opted-out of your send lists and their contact status will change to an unsubscribed contact. To retrieve information on all contacts who have unsubscribed status, use: 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetUnsubscribersPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnsubscribersPaginatedResponse>> GetUnsubscribersAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnsubscribersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnsubscribersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnsubscribersPaginatedResponse)));
        }

        /// <summary>
        /// Get all your dedicated numbers 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>GetUserDedicatedNumbersPaginatedResponse</returns>
        public GetUserDedicatedNumbersPaginatedResponse GetUserDedicatedNumbers (int? page = null, int? limit = null, int? surveyId = null)
        {
             ApiResponse<GetUserDedicatedNumbersPaginatedResponse> localVarResponse = GetUserDedicatedNumbersWithHttpInfo(page, limit, surveyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all your dedicated numbers 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>ApiResponse of GetUserDedicatedNumbersPaginatedResponse</returns>
        public ApiResponse< GetUserDedicatedNumbersPaginatedResponse > GetUserDedicatedNumbersWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null)
        {

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (surveyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "surveyId", surveyId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserDedicatedNumbersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserDedicatedNumbersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserDedicatedNumbersPaginatedResponse)));
        }

        /// <summary>
        /// Get all your dedicated numbers 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>Task of GetUserDedicatedNumbersPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetUserDedicatedNumbersPaginatedResponse> GetUserDedicatedNumbersAsync (int? page = null, int? limit = null, int? surveyId = null)
        {
             ApiResponse<GetUserDedicatedNumbersPaginatedResponse> localVarResponse = await GetUserDedicatedNumbersAsyncWithHttpInfo(page, limit, surveyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all your dedicated numbers 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only those numbers that are ready for the survey. (optional)</param>
        /// <returns>Task of ApiResponse (GetUserDedicatedNumbersPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserDedicatedNumbersPaginatedResponse>> GetUserDedicatedNumbersAsyncWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null)
        {

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (surveyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "surveyId", surveyId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserDedicatedNumbersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserDedicatedNumbersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserDedicatedNumbersPaginatedResponse)));
        }

        /// <summary>
        /// Import contacts Import contacts from the CSV, XLS or XLSX file.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse ImportContacts (System.IO.Stream file, string column, int? listId = null, string listName = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = ImportContactsWithHttpInfo(file, column, listId, listName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import contacts Import contacts from the CSV, XLS or XLSX file.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > ImportContactsWithHttpInfo (System.IO.Stream file, string column, int? listId = null, string listName = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->ImportContacts");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling TextMagicApi->ImportContacts");

            var localVarPath = "/api/v2/contacts/import/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (column != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "column", column)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (listName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listName", listName)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Import contacts Import contacts from the CSV, XLS or XLSX file.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> ImportContactsAsync (System.IO.Stream file, string column, int? listId = null, string listName = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await ImportContactsAsyncWithHttpInfo(file, column, listId, listName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import contacts Import contacts from the CSV, XLS or XLSX file.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File containing contacts in csv or xls(x) formats.</param>
        /// <param name="column">Import file column mapping. The string must contain sub-strings of mapping in format &#x60;columnNumber:field&#x60; glued by &#x60;;&#x60;. For example: &#x60;0:firstName;1:lastName;3:phone;4:email&#x60; where the value before &#x60;:&#x60; is a number of the column in the file, and the value after &#x60;:&#x60; is a field of the newly created contact or the ID of a custom field. Numbers of columns begin from zero. Allowed built-in contact fields are: &#x60;firstName&#x60;, &#x60;lastName&#x60;, &#x60;phone&#x60;, &#x60;email&#x60;. Existing of &#x60;phone&#x60; mapping is required. </param>
        /// <param name="listId">List that ID contacts will be imported to. Ignored if &#x60;listName&#x60; is specified.  (optional)</param>
        /// <param name="listName">List name. This list will be created during import. If such name is already taken, an ordinal (1, 2, ...) will be added to the end. Ignored if &#x60;listId&#x60; is specified.  (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ImportContactsAsyncWithHttpInfo (System.IO.Stream file, string column, int? listId = null, string listName = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->ImportContacts");
            // verify the required parameter 'column' is set
            if (column == null)
                throw new ApiException(400, "Missing required parameter 'column' when calling TextMagicApi->ImportContacts");

            var localVarPath = "/api/v2/contacts/import/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (column != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "column", column)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (listName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listName", listName)); // query parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Invite a new sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns></returns>
        public void InviteSubaccount (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
             InviteSubaccountWithHttpInfo(inviteSubaccountInputObject);
        }

        /// <summary>
        /// Invite a new sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InviteSubaccountWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
            // verify the required parameter 'inviteSubaccountInputObject' is set
            if (inviteSubaccountInputObject == null)
                throw new ApiException(400, "Missing required parameter 'inviteSubaccountInputObject' when calling TextMagicApi->InviteSubaccount");

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviteSubaccountInputObject != null && inviteSubaccountInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteSubaccountInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteSubaccountInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invite a new sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteSubaccountAsync (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
             await InviteSubaccountAsyncWithHttpInfo(inviteSubaccountInputObject);

        }

        /// <summary>
        /// Invite a new sub-account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteSubaccountAsyncWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
            // verify the required parameter 'inviteSubaccountInputObject' is set
            if (inviteSubaccountInputObject == null)
                throw new ApiException(400, "Missing required parameter 'inviteSubaccountInputObject' when calling TextMagicApi->InviteSubaccount");

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviteSubaccountInputObject != null && inviteSubaccountInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteSubaccountInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteSubaccountInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark chats as read (bulk) Mark several chats as read by chat IDs or mark all chats as read
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns></returns>
        public void MarkChatsReadBulk (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
             MarkChatsReadBulkWithHttpInfo(markChatsReadBulkInputObject);
        }

        /// <summary>
        /// Mark chats as read (bulk) Mark several chats as read by chat IDs or mark all chats as read
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatsReadBulkWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
            // verify the required parameter 'markChatsReadBulkInputObject' is set
            if (markChatsReadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsReadBulkInputObject' when calling TextMagicApi->MarkChatsReadBulk");

            var localVarPath = "/api/v2/chats/read/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsReadBulkInputObject != null && markChatsReadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsReadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsReadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsReadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark chats as read (bulk) Mark several chats as read by chat IDs or mark all chats as read
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatsReadBulkAsync (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
             await MarkChatsReadBulkAsyncWithHttpInfo(markChatsReadBulkInputObject);

        }

        /// <summary>
        /// Mark chats as read (bulk) Mark several chats as read by chat IDs or mark all chats as read
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsReadBulkAsyncWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
            // verify the required parameter 'markChatsReadBulkInputObject' is set
            if (markChatsReadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsReadBulkInputObject' when calling TextMagicApi->MarkChatsReadBulk");

            var localVarPath = "/api/v2/chats/read/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsReadBulkInputObject != null && markChatsReadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsReadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsReadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsReadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark chats as unread (bulk) Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns></returns>
        public void MarkChatsUnreadBulk (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
             MarkChatsUnreadBulkWithHttpInfo(markChatsUnreadBulkInputObject);
        }

        /// <summary>
        /// Mark chats as unread (bulk) Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatsUnreadBulkWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
            // verify the required parameter 'markChatsUnreadBulkInputObject' is set
            if (markChatsUnreadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsUnreadBulkInputObject' when calling TextMagicApi->MarkChatsUnreadBulk");

            var localVarPath = "/api/v2/chats/unread/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsUnreadBulkInputObject != null && markChatsUnreadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsUnreadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsUnreadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsUnreadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark chats as unread (bulk) Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatsUnreadBulkAsync (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
             await MarkChatsUnreadBulkAsyncWithHttpInfo(markChatsUnreadBulkInputObject);

        }

        /// <summary>
        /// Mark chats as unread (bulk) Mark several chats as UNread by chat IDs or mark all chats as UNread
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsUnreadBulkAsyncWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
            // verify the required parameter 'markChatsUnreadBulkInputObject' is set
            if (markChatsUnreadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsUnreadBulkInputObject' when calling TextMagicApi->MarkChatsUnreadBulk");

            var localVarPath = "/api/v2/chats/unread/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsUnreadBulkInputObject != null && markChatsUnreadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsUnreadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsUnreadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsUnreadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mute chat sounds 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse MuteChat (MuteChatInputObject muteChatInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = MuteChatWithHttpInfo(muteChatInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mute chat sounds 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > MuteChatWithHttpInfo (MuteChatInputObject muteChatInputObject)
        {
            // verify the required parameter 'muteChatInputObject' is set
            if (muteChatInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatInputObject' when calling TextMagicApi->MuteChat");

            var localVarPath = "/api/v2/chats/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatInputObject != null && muteChatInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Mute chat sounds 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> MuteChatAsync (MuteChatInputObject muteChatInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await MuteChatAsyncWithHttpInfo(muteChatInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mute chat sounds 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> MuteChatAsyncWithHttpInfo (MuteChatInputObject muteChatInputObject)
        {
            // verify the required parameter 'muteChatInputObject' is set
            if (muteChatInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatInputObject' when calling TextMagicApi->MuteChat");

            var localVarPath = "/api/v2/chats/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatInputObject != null && muteChatInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Mute chats (bulk) Mute several chats by chat ids or mute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns></returns>
        public void MuteChatsBulk (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
             MuteChatsBulkWithHttpInfo(muteChatsBulkInputObject);
        }

        /// <summary>
        /// Mute chats (bulk) Mute several chats by chat ids or mute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MuteChatsBulkWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
            // verify the required parameter 'muteChatsBulkInputObject' is set
            if (muteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatsBulkInputObject' when calling TextMagicApi->MuteChatsBulk");

            var localVarPath = "/api/v2/chats/mute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatsBulkInputObject != null && muteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mute chats (bulk) Mute several chats by chat ids or mute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MuteChatsBulkAsync (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
             await MuteChatsBulkAsyncWithHttpInfo(muteChatsBulkInputObject);

        }

        /// <summary>
        /// Mute chats (bulk) Mute several chats by chat ids or mute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MuteChatsBulkAsyncWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
            // verify the required parameter 'muteChatsBulkInputObject' is set
            if (muteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatsBulkInputObject' when calling TextMagicApi->MuteChatsBulk");

            var localVarPath = "/api/v2/chats/mute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatsBulkInputObject != null && muteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Ping Make a simple ping request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PingResponse</returns>
        public PingResponse Ping ()
        {
             ApiResponse<PingResponse> localVarResponse = PingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ping Make a simple ping request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PingResponse</returns>
        public ApiResponse< PingResponse > PingWithHttpInfo ()
        {

            var localVarPath = "/api/v2/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingResponse)));
        }

        /// <summary>
        /// Ping Make a simple ping request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PingResponse</returns>
        public async System.Threading.Tasks.Task<PingResponse> PingAsync ()
        {
             ApiResponse<PingResponse> localVarResponse = await PingAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ping Make a simple ping request.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PingResponse>> PingAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingResponse)));
        }

        /// <summary>
        /// Reopen chats (bulk) Reopen chats by chat IDs or reopen all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns></returns>
        public void ReopenChatsBulk (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
             ReopenChatsBulkWithHttpInfo(reopenChatsBulkInputObject);
        }

        /// <summary>
        /// Reopen chats (bulk) Reopen chats by chat IDs or reopen all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReopenChatsBulkWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
            // verify the required parameter 'reopenChatsBulkInputObject' is set
            if (reopenChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'reopenChatsBulkInputObject' when calling TextMagicApi->ReopenChatsBulk");

            var localVarPath = "/api/v2/chats/reopen/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reopenChatsBulkInputObject != null && reopenChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reopenChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reopenChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReopenChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reopen chats (bulk) Reopen chats by chat IDs or reopen all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReopenChatsBulkAsync (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
             await ReopenChatsBulkAsyncWithHttpInfo(reopenChatsBulkInputObject);

        }

        /// <summary>
        /// Reopen chats (bulk) Reopen chats by chat IDs or reopen all chats
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReopenChatsBulkAsyncWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
            // verify the required parameter 'reopenChatsBulkInputObject' is set
            if (reopenChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'reopenChatsBulkInputObject' when calling TextMagicApi->ReopenChatsBulk");

            var localVarPath = "/api/v2/chats/reopen/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reopenChatsBulkInputObject != null && reopenChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reopenChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reopenChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReopenChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request a new REST API token for sub-account Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>User</returns>
        public User RequestNewSubaccountToken (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
             ApiResponse<User> localVarResponse = RequestNewSubaccountTokenWithHttpInfo(requestNewSubaccountTokenInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a new REST API token for sub-account Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > RequestNewSubaccountTokenWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
            // verify the required parameter 'requestNewSubaccountTokenInputObject' is set
            if (requestNewSubaccountTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestNewSubaccountTokenInputObject' when calling TextMagicApi->RequestNewSubaccountToken");

            var localVarPath = "/api/v2/subaccounts/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestNewSubaccountTokenInputObject != null && requestNewSubaccountTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestNewSubaccountTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestNewSubaccountTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestNewSubaccountToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Request a new REST API token for sub-account Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> RequestNewSubaccountTokenAsync (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
             ApiResponse<User> localVarResponse = await RequestNewSubaccountTokenAsyncWithHttpInfo(requestNewSubaccountTokenInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a new REST API token for sub-account Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> RequestNewSubaccountTokenAsyncWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
            // verify the required parameter 'requestNewSubaccountTokenInputObject' is set
            if (requestNewSubaccountTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestNewSubaccountTokenInputObject' when calling TextMagicApi->RequestNewSubaccountToken");

            var localVarPath = "/api/v2/subaccounts/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestNewSubaccountTokenInputObject != null && requestNewSubaccountTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestNewSubaccountTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestNewSubaccountTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestNewSubaccountToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Apply for a new Sender ID &gt; Sender IDs are shared among all of your sub-accounts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse RequestSenderId (RequestSenderIdInputObject requestSenderIdInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = RequestSenderIdWithHttpInfo(requestSenderIdInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply for a new Sender ID &gt; Sender IDs are shared among all of your sub-accounts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > RequestSenderIdWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject)
        {
            // verify the required parameter 'requestSenderIdInputObject' is set
            if (requestSenderIdInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestSenderIdInputObject' when calling TextMagicApi->RequestSenderId");

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestSenderIdInputObject != null && requestSenderIdInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSenderIdInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSenderIdInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Apply for a new Sender ID &gt; Sender IDs are shared among all of your sub-accounts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> RequestSenderIdAsync (RequestSenderIdInputObject requestSenderIdInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await RequestSenderIdAsyncWithHttpInfo(requestSenderIdInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply for a new Sender ID &gt; Sender IDs are shared among all of your sub-accounts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> RequestSenderIdAsyncWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject)
        {
            // verify the required parameter 'requestSenderIdInputObject' is set
            if (requestSenderIdInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestSenderIdInputObject' when calling TextMagicApi->RequestSenderId");

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestSenderIdInputObject != null && requestSenderIdInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSenderIdInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSenderIdInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Find chats by message text 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>SearchChatsPaginatedResponse</returns>
        public SearchChatsPaginatedResponse SearchChats (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<SearchChatsPaginatedResponse> localVarResponse = SearchChatsWithHttpInfo(page, limit, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by message text 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>ApiResponse of SearchChatsPaginatedResponse</returns>
        public ApiResponse< SearchChatsPaginatedResponse > SearchChatsWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/chats/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by message text 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>Task of SearchChatsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsPaginatedResponse> SearchChatsAsync (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<SearchChatsPaginatedResponse> localVarResponse = await SearchChatsAsyncWithHttpInfo(page, limit, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by message text 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsPaginatedResponse>> SearchChatsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/chats/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>SearchChatsByIdsPaginatedResponse</returns>
        public SearchChatsByIdsPaginatedResponse SearchChatsByIds (int? page = null, int? limit = null, string ids = null)
        {
             ApiResponse<SearchChatsByIdsPaginatedResponse> localVarResponse = SearchChatsByIdsWithHttpInfo(page, limit, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>ApiResponse of SearchChatsByIdsPaginatedResponse</returns>
        public ApiResponse< SearchChatsByIdsPaginatedResponse > SearchChatsByIdsWithHttpInfo (int? page = null, int? limit = null, string ids = null)
        {

            var localVarPath = "/api/v2/chats/search/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByIdsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>Task of SearchChatsByIdsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsByIdsPaginatedResponse> SearchChatsByIdsAsync (int? page = null, int? limit = null, string ids = null)
        {
             ApiResponse<SearchChatsByIdsPaginatedResponse> localVarResponse = await SearchChatsByIdsAsyncWithHttpInfo(page, limit, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats (bulk) 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s). (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsByIdsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsByIdsPaginatedResponse>> SearchChatsByIdsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null)
        {

            var localVarPath = "/api/v2/chats/search/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByIdsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by recipient Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>SearchChatsByReceipentPaginatedResponse</returns>
        public SearchChatsByReceipentPaginatedResponse SearchChatsByReceipent (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {
             ApiResponse<SearchChatsByReceipentPaginatedResponse> localVarResponse = SearchChatsByReceipentWithHttpInfo(page, limit, query, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by recipient Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>ApiResponse of SearchChatsByReceipentPaginatedResponse</returns>
        public ApiResponse< SearchChatsByReceipentPaginatedResponse > SearchChatsByReceipentWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {

            var localVarPath = "/api/v2/chats/search/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByReceipent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByReceipentPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByReceipentPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByReceipentPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by recipient Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>Task of SearchChatsByReceipentPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsByReceipentPaginatedResponse> SearchChatsByReceipentAsync (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {
             ApiResponse<SearchChatsByReceipentPaginatedResponse> localVarResponse = await SearchChatsByReceipentAsyncWithHttpInfo(page, limit, query, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by recipient Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <returns>Task of ApiResponse (SearchChatsByReceipentPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsByReceipentPaginatedResponse>> SearchChatsByReceipentAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {

            var localVarPath = "/api/v2/chats/search/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByReceipent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByReceipentPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByReceipentPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByReceipentPaginatedResponse)));
        }

        /// <summary>
        /// Find contacts by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>SearchContactsPaginatedResponse</returns>
        public SearchContactsPaginatedResponse SearchContacts (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchContactsPaginatedResponse> localVarResponse = SearchContactsWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, exactMatch, country, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find contacts by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchContactsPaginatedResponse</returns>
        public ApiResponse< SearchContactsPaginatedResponse > SearchContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContactsPaginatedResponse)));
        }

        /// <summary>
        /// Find contacts by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of SearchContactsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchContactsPaginatedResponse> SearchContactsAsync (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchContactsPaginatedResponse> localVarResponse = await SearchContactsAsyncWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, exactMatch, country, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find contacts by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts be included? (optional, default to 0)</param>
        /// <param name="ids">Find contacts by IDs. (optional)</param>
        /// <param name="listId">Find contacts by List ID. (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts be included? (optional)</param>
        /// <param name="query">Find contacts by specified search query. (optional)</param>
        /// <param name="local">Treat phone number passed in the \&quot;query\&quot; field as local. Default is 0. (optional, default to 0)</param>
        /// <param name="exactMatch">Return only exactly matching contacts. Default is 0. (optional, default to 0)</param>
        /// <param name="country">The 2-letter ISO country code for local phone numbers, used when \&quot;local\&quot; is set to true. Default is the account country. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchContactsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchContactsPaginatedResponse>> SearchContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, int? exactMatch = null, string country = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContactsPaginatedResponse)));
        }

        /// <summary>
        /// Find inbound messages Find inbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>SearchInboundMessagesPaginatedResponse</returns>
        public SearchInboundMessagesPaginatedResponse SearchInboundMessages (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {
             ApiResponse<SearchInboundMessagesPaginatedResponse> localVarResponse = SearchInboundMessagesWithHttpInfo(page, limit, ids, query, orderBy, direction, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find inbound messages Find inbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>ApiResponse of SearchInboundMessagesPaginatedResponse</returns>
        public ApiResponse< SearchInboundMessagesPaginatedResponse > SearchInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {

            var localVarPath = "/api/v2/replies/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find inbound messages Find inbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>Task of SearchInboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchInboundMessagesPaginatedResponse> SearchInboundMessagesAsync (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {
             ApiResponse<SearchInboundMessagesPaginatedResponse> localVarResponse = await SearchInboundMessagesAsyncWithHttpInfo(page, limit, ids, query, orderBy, direction, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find inbound messages Find inbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="query">Find recipients by specified search query. (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SearchInboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchInboundMessagesPaginatedResponse>> SearchInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {

            var localVarPath = "/api/v2/replies/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find lists by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>SearchListsPaginatedResponse</returns>
        public SearchListsPaginatedResponse SearchLists (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchListsPaginatedResponse> localVarResponse = SearchListsWithHttpInfo(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find lists by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchListsPaginatedResponse</returns>
        public ApiResponse< SearchListsPaginatedResponse > SearchListsWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/lists/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter
            if (onlyDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyDefault", onlyDefault)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchListsPaginatedResponse)));
        }

        /// <summary>
        /// Find lists by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of SearchListsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchListsPaginatedResponse> SearchListsAsync (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchListsPaginatedResponse> localVarResponse = await SearchListsAsyncWithHttpInfo(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find lists by given criteria 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find lists by IDs. (optional)</param>
        /// <param name="query">Find lists by specified search query. (optional)</param>
        /// <param name="onlyMine">Return only current user lists. (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists. (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchListsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchListsPaginatedResponse>> SearchListsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/lists/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter
            if (onlyDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyDefault", onlyDefault)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchListsPaginatedResponse)));
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>SearchOutboundMessagesPaginatedResponse</returns>
        public SearchOutboundMessagesPaginatedResponse SearchOutboundMessages (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {
             ApiResponse<SearchOutboundMessagesPaginatedResponse> localVarResponse = SearchOutboundMessagesWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>ApiResponse of SearchOutboundMessagesPaginatedResponse</returns>
        public ApiResponse< SearchOutboundMessagesPaginatedResponse > SearchOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {

            var localVarPath = "/api/v2/messages/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>Task of SearchOutboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchOutboundMessagesPaginatedResponse> SearchOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {
             ApiResponse<SearchOutboundMessagesPaginatedResponse> localVarResponse = await SearchOutboundMessagesAsyncWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that the \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified. (optional)</param>
        /// <param name="ids">Find message by ID(s). (optional)</param>
        /// <param name="sessionId">Find messages by session ID. (optional)</param>
        /// <param name="statuses">Find messages by status. (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages. (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <returns>Task of ApiResponse (SearchOutboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchOutboundMessagesPaginatedResponse>> SearchOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {

            var localVarPath = "/api/v2/messages/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>SearchScheduledMessagesPaginatedResponse</returns>
        public SearchScheduledMessagesPaginatedResponse SearchScheduledMessages (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchScheduledMessagesPaginatedResponse> localVarResponse = SearchScheduledMessagesWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchScheduledMessagesPaginatedResponse</returns>
        public ApiResponse< SearchScheduledMessagesPaginatedResponse > SearchScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of SearchScheduledMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchScheduledMessagesPaginatedResponse> SearchScheduledMessagesAsync (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchScheduledMessagesPaginatedResponse> localVarResponse = await SearchScheduledMessagesAsyncWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find scheduled messages 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query. (optional)</param>
        /// <param name="ids">Find schedules by ID(s). (optional)</param>
        /// <param name="status">Fetch schedules with a specific status: a - actual, c - completed, x - all. (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id. (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc. (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchScheduledMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchScheduledMessagesPaginatedResponse>> SearchScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find templates by criteria Find user templates by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>SearchTemplatesPaginatedResponse</returns>
        public SearchTemplatesPaginatedResponse SearchTemplates (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {
             ApiResponse<SearchTemplatesPaginatedResponse> localVarResponse = SearchTemplatesWithHttpInfo(page, limit, ids, name, content);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find templates by criteria Find user templates by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>ApiResponse of SearchTemplatesPaginatedResponse</returns>
        public ApiResponse< SearchTemplatesPaginatedResponse > SearchTemplatesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {

            var localVarPath = "/api/v2/templates/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Find templates by criteria Find user templates by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>Task of SearchTemplatesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchTemplatesPaginatedResponse> SearchTemplatesAsync (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {
             ApiResponse<SearchTemplatesPaginatedResponse> localVarResponse = await SearchTemplatesAsyncWithHttpInfo(page, limit, ids, name, content);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find templates by criteria Find user templates by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page. (optional, default to 1)</param>
        /// <param name="limit">The number of results per page. (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s). (optional)</param>
        /// <param name="name">Find template by name. (optional)</param>
        /// <param name="content">Find template by content. (optional)</param>
        /// <returns>Task of ApiResponse (SearchTemplatesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchTemplatesPaginatedResponse>> SearchTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {

            var localVarPath = "/api/v2/templates/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Send message This is the main entrypoint to send messages. See the examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse SendMessage (SendMessageInputObject sendMessageInputObject)
        {
             ApiResponse<SendMessageResponse> localVarResponse = SendMessageWithHttpInfo(sendMessageInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send message This is the main entrypoint to send messages. See the examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse< SendMessageResponse > SendMessageWithHttpInfo (SendMessageInputObject sendMessageInputObject)
        {
            // verify the required parameter 'sendMessageInputObject' is set
            if (sendMessageInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendMessageInputObject' when calling TextMagicApi->SendMessage");

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendMessageInputObject != null && sendMessageInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Send message This is the main entrypoint to send messages. See the examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (SendMessageInputObject sendMessageInputObject)
        {
             ApiResponse<SendMessageResponse> localVarResponse = await SendMessageAsyncWithHttpInfo(sendMessageInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send message This is the main entrypoint to send messages. See the examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (SendMessageInputObject sendMessageInputObject)
        {
            // verify the required parameter 'sendMessageInputObject' is set
            if (sendMessageInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendMessageInputObject' when calling TextMagicApi->SendMessage");

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendMessageInputObject != null && sendMessageInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Step 1: Send a verification code  Sends a verification code to a specified phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>SendPhoneVerificationCodeResponse</returns>
        public SendPhoneVerificationCodeResponse SendPhoneVerificationCodeTFA (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject)
        {
             ApiResponse<SendPhoneVerificationCodeResponse> localVarResponse = SendPhoneVerificationCodeTFAWithHttpInfo(sendPhoneVerificationCodeTFAInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Step 1: Send a verification code  Sends a verification code to a specified phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>ApiResponse of SendPhoneVerificationCodeResponse</returns>
        public ApiResponse< SendPhoneVerificationCodeResponse > SendPhoneVerificationCodeTFAWithHttpInfo (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject)
        {
            // verify the required parameter 'sendPhoneVerificationCodeTFAInputObject' is set
            if (sendPhoneVerificationCodeTFAInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendPhoneVerificationCodeTFAInputObject' when calling TextMagicApi->SendPhoneVerificationCodeTFA");

            var localVarPath = "/api/v2/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendPhoneVerificationCodeTFAInputObject != null && sendPhoneVerificationCodeTFAInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendPhoneVerificationCodeTFAInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendPhoneVerificationCodeTFAInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPhoneVerificationCodeTFA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendPhoneVerificationCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendPhoneVerificationCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendPhoneVerificationCodeResponse)));
        }

        /// <summary>
        /// Step 1: Send a verification code  Sends a verification code to a specified phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of SendPhoneVerificationCodeResponse</returns>
        public async System.Threading.Tasks.Task<SendPhoneVerificationCodeResponse> SendPhoneVerificationCodeTFAAsync (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject)
        {
             ApiResponse<SendPhoneVerificationCodeResponse> localVarResponse = await SendPhoneVerificationCodeTFAAsyncWithHttpInfo(sendPhoneVerificationCodeTFAInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Step 1: Send a verification code  Sends a verification code to a specified phone number.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendPhoneVerificationCodeTFAInputObject"></param>
        /// <returns>Task of ApiResponse (SendPhoneVerificationCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendPhoneVerificationCodeResponse>> SendPhoneVerificationCodeTFAAsyncWithHttpInfo (SendPhoneVerificationCodeTFAInputObject sendPhoneVerificationCodeTFAInputObject)
        {
            // verify the required parameter 'sendPhoneVerificationCodeTFAInputObject' is set
            if (sendPhoneVerificationCodeTFAInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendPhoneVerificationCodeTFAInputObject' when calling TextMagicApi->SendPhoneVerificationCodeTFA");

            var localVarPath = "/api/v2/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendPhoneVerificationCodeTFAInputObject != null && sendPhoneVerificationCodeTFAInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendPhoneVerificationCodeTFAInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendPhoneVerificationCodeTFAInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPhoneVerificationCodeTFA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendPhoneVerificationCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendPhoneVerificationCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendPhoneVerificationCodeResponse)));
        }

        /// <summary>
        /// Change chat status Set the status of the chat given by ID.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse SetChatStatus (SetChatStatusInputObject setChatStatusInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = SetChatStatusWithHttpInfo(setChatStatusInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change chat status Set the status of the chat given by ID.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > SetChatStatusWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject)
        {
            // verify the required parameter 'setChatStatusInputObject' is set
            if (setChatStatusInputObject == null)
                throw new ApiException(400, "Missing required parameter 'setChatStatusInputObject' when calling TextMagicApi->SetChatStatus");

            var localVarPath = "/api/v2/chats/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setChatStatusInputObject != null && setChatStatusInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setChatStatusInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setChatStatusInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChatStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Change chat status Set the status of the chat given by ID.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> SetChatStatusAsync (SetChatStatusInputObject setChatStatusInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await SetChatStatusAsyncWithHttpInfo(setChatStatusInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change chat status Set the status of the chat given by ID.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> SetChatStatusAsyncWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject)
        {
            // verify the required parameter 'setChatStatusInputObject' is set
            if (setChatStatusInputObject == null)
                throw new ApiException(400, "Missing required parameter 'setChatStatusInputObject' when calling TextMagicApi->SetChatStatus");

            var localVarPath = "/api/v2/chats/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setChatStatusInputObject != null && setChatStatusInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setChatStatusInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setChatStatusInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChatStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Unblock a contact by phone number Unblock a contact by phone number
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns></returns>
        public void UnblockContact (UnblockContactInputObject unblockContactInputObject)
        {
             UnblockContactWithHttpInfo(unblockContactInputObject);
        }

        /// <summary>
        /// Unblock a contact by phone number Unblock a contact by phone number
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockContactWithHttpInfo (UnblockContactInputObject unblockContactInputObject)
        {
            // verify the required parameter 'unblockContactInputObject' is set
            if (unblockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactInputObject' when calling TextMagicApi->UnblockContact");

            var localVarPath = "/api/v2/contacts/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactInputObject != null && unblockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock a contact by phone number Unblock a contact by phone number
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockContactAsync (UnblockContactInputObject unblockContactInputObject)
        {
             await UnblockContactAsyncWithHttpInfo(unblockContactInputObject);

        }

        /// <summary>
        /// Unblock a contact by phone number Unblock a contact by phone number
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactAsyncWithHttpInfo (UnblockContactInputObject unblockContactInputObject)
        {
            // verify the required parameter 'unblockContactInputObject' is set
            if (unblockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactInputObject' when calling TextMagicApi->UnblockContact");

            var localVarPath = "/api/v2/contacts/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactInputObject != null && unblockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock contacts (bulk) Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns></returns>
        public void UnblockContactsBulk (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
             UnblockContactsBulkWithHttpInfo(unblockContactsBulkInputObject);
        }

        /// <summary>
        /// Unblock contacts (bulk) Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockContactsBulkWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
            // verify the required parameter 'unblockContactsBulkInputObject' is set
            if (unblockContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactsBulkInputObject' when calling TextMagicApi->UnblockContactsBulk");

            var localVarPath = "/api/v2/contacts/unblock/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactsBulkInputObject != null && unblockContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock contacts (bulk) Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockContactsBulkAsync (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
             await UnblockContactsBulkAsyncWithHttpInfo(unblockContactsBulkInputObject);

        }

        /// <summary>
        /// Unblock contacts (bulk) Unblock several contacts by blocked contact IDs or unblock all contacts.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactsBulkAsyncWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
            // verify the required parameter 'unblockContactsBulkInputObject' is set
            if (unblockContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactsBulkInputObject' when calling TextMagicApi->UnblockContactsBulk");

            var localVarPath = "/api/v2/contacts/unblock/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactsBulkInputObject != null && unblockContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmute chats (bulk) Unmute several chats by chat ids or unmute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns></returns>
        public void UnmuteChatsBulk (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
             UnmuteChatsBulkWithHttpInfo(unmuteChatsBulkInputObject);
        }

        /// <summary>
        /// Unmute chats (bulk) Unmute several chats by chat ids or unmute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnmuteChatsBulkWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
            // verify the required parameter 'unmuteChatsBulkInputObject' is set
            if (unmuteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unmuteChatsBulkInputObject' when calling TextMagicApi->UnmuteChatsBulk");

            var localVarPath = "/api/v2/chats/unmute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unmuteChatsBulkInputObject != null && unmuteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unmuteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unmuteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmute chats (bulk) Unmute several chats by chat ids or unmute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnmuteChatsBulkAsync (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
             await UnmuteChatsBulkAsyncWithHttpInfo(unmuteChatsBulkInputObject);

        }

        /// <summary>
        /// Unmute chats (bulk) Unmute several chats by chat ids or unmute all chats.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteChatsBulkAsyncWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
            // verify the required parameter 'unmuteChatsBulkInputObject' is set
            if (unmuteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unmuteChatsBulkInputObject' when calling TextMagicApi->UnmuteChatsBulk");

            var localVarPath = "/api/v2/chats/unmute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unmuteChatsBulkInputObject != null && unmuteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unmuteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unmuteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Manually unsubscribe a contact &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UnsubscribeContact (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UnsubscribeContactWithHttpInfo(unsubscribeContactInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Manually unsubscribe a contact &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UnsubscribeContactWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
            // verify the required parameter 'unsubscribeContactInputObject' is set
            if (unsubscribeContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeContactInputObject' when calling TextMagicApi->UnsubscribeContact");

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsubscribeContactInputObject != null && unsubscribeContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribeContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Manually unsubscribe a contact &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UnsubscribeContactAsync (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UnsubscribeContactAsyncWithHttpInfo(unsubscribeContactInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Manually unsubscribe a contact &gt; Please note, if you unsubscribe a contact, this action cannot be reversed. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UnsubscribeContactAsyncWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
            // verify the required parameter 'unsubscribeContactInputObject' is set
            if (unsubscribeContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeContactInputObject' when calling TextMagicApi->UnsubscribeContact");

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsubscribeContactInputObject != null && unsubscribeContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribeContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateBalanceNotificationSettings (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
             UpdateBalanceNotificationSettingsWithHttpInfo(updateBalanceNotificationSettingsInputObject);
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBalanceNotificationSettingsWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateBalanceNotificationSettingsInputObject' is set
            if (updateBalanceNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateBalanceNotificationSettingsInputObject' when calling TextMagicApi->UpdateBalanceNotificationSettings");

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBalanceNotificationSettingsInputObject != null && updateBalanceNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBalanceNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBalanceNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBalanceNotificationSettingsAsync (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
             await UpdateBalanceNotificationSettingsAsyncWithHttpInfo(updateBalanceNotificationSettingsInputObject);

        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBalanceNotificationSettingsAsyncWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateBalanceNotificationSettingsInputObject' is set
            if (updateBalanceNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateBalanceNotificationSettingsInputObject' when calling TextMagicApi->UpdateBalanceNotificationSettings");

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBalanceNotificationSettingsInputObject != null && updateBalanceNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBalanceNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBalanceNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateCallbackSettings (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
             UpdateCallbackSettingsWithHttpInfo(updateCallbackSettingsInputObject);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCallbackSettingsWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
            // verify the required parameter 'updateCallbackSettingsInputObject' is set
            if (updateCallbackSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCallbackSettingsInputObject' when calling TextMagicApi->UpdateCallbackSettings");

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCallbackSettingsInputObject != null && updateCallbackSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallbackSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallbackSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallbackSettingsAsync (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
             await UpdateCallbackSettingsAsyncWithHttpInfo(updateCallbackSettingsInputObject);

        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallbackSettingsAsyncWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
            // verify the required parameter 'updateCallbackSettingsInputObject' is set
            if (updateCallbackSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCallbackSettingsInputObject' when calling TextMagicApi->UpdateCallbackSettings");

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCallbackSettingsInputObject != null && updateCallbackSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallbackSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallbackSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateChatDesktopNotificationSettings (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
             UpdateChatDesktopNotificationSettingsWithHttpInfo(updateChatDesktopNotificationSettingsInputObject);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateChatDesktopNotificationSettingsWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateChatDesktopNotificationSettingsInputObject' is set
            if (updateChatDesktopNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateChatDesktopNotificationSettingsInputObject' when calling TextMagicApi->UpdateChatDesktopNotificationSettings");

            var localVarPath = "/api/v2/user/desktop/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateChatDesktopNotificationSettingsInputObject != null && updateChatDesktopNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChatDesktopNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChatDesktopNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChatDesktopNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateChatDesktopNotificationSettingsAsync (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
             await UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo(updateChatDesktopNotificationSettingsInputObject);

        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateChatDesktopNotificationSettingsInputObject' is set
            if (updateChatDesktopNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateChatDesktopNotificationSettingsInputObject' when calling TextMagicApi->UpdateChatDesktopNotificationSettings");

            var localVarPath = "/api/v2/user/desktop/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateChatDesktopNotificationSettingsInputObject != null && updateChatDesktopNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChatDesktopNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChatDesktopNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChatDesktopNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateContact (UpdateContactInputObject updateContactInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateContactWithHttpInfo(updateContactInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateContactWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id)
        {
            // verify the required parameter 'updateContactInputObject' is set
            if (updateContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactInputObject' when calling TextMagicApi->UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContact");

            var localVarPath = "/api/v2/contacts/{id}/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactInputObject != null && updateContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Edit a contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactAsync (UpdateContactInputObject updateContactInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateContactAsyncWithHttpInfo(updateContactInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactAsyncWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id)
        {
            // verify the required parameter 'updateContactInputObject' is set
            if (updateContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactInputObject' when calling TextMagicApi->UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContact");

            var localVarPath = "/api/v2/contacts/{id}/normalized";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactInputObject != null && updateContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateContactNote (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateContactNoteWithHttpInfo(updateContactNoteInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateContactNoteWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
            // verify the required parameter 'updateContactNoteInputObject' is set
            if (updateContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactNoteInputObject' when calling TextMagicApi->UpdateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactNoteInputObject != null && updateContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactNoteAsync (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateContactNoteAsyncWithHttpInfo(updateContactNoteInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a contact note 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactNoteAsyncWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
            // verify the required parameter 'updateContactNoteInputObject' is set
            if (updateContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactNoteInputObject' when calling TextMagicApi->UpdateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactNoteInputObject != null && updateContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Edit current account info 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>UpdateCurrentUserResponse</returns>
        public UpdateCurrentUserResponse UpdateCurrentUser (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
             ApiResponse<UpdateCurrentUserResponse> localVarResponse = UpdateCurrentUserWithHttpInfo(updateCurrentUserInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit current account info 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>ApiResponse of UpdateCurrentUserResponse</returns>
        public ApiResponse< UpdateCurrentUserResponse > UpdateCurrentUserWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
            // verify the required parameter 'updateCurrentUserInputObject' is set
            if (updateCurrentUserInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCurrentUserInputObject' when calling TextMagicApi->UpdateCurrentUser");

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCurrentUserInputObject != null && updateCurrentUserInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCurrentUserInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCurrentUserInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCurrentUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCurrentUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCurrentUserResponse)));
        }

        /// <summary>
        /// Edit current account info 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of UpdateCurrentUserResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCurrentUserResponse> UpdateCurrentUserAsync (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
             ApiResponse<UpdateCurrentUserResponse> localVarResponse = await UpdateCurrentUserAsyncWithHttpInfo(updateCurrentUserInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit current account info 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of ApiResponse (UpdateCurrentUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCurrentUserResponse>> UpdateCurrentUserAsyncWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
            // verify the required parameter 'updateCurrentUserInputObject' is set
            if (updateCurrentUserInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCurrentUserInputObject' when calling TextMagicApi->UpdateCurrentUser");

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCurrentUserInputObject != null && updateCurrentUserInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCurrentUserInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCurrentUserInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCurrentUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCurrentUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCurrentUserResponse)));
        }

        /// <summary>
        /// Edit a custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateCustomField (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateCustomFieldWithHttpInfo(updateCustomFieldInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateCustomFieldWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
            // verify the required parameter 'updateCustomFieldInputObject' is set
            if (updateCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldInputObject' when calling TextMagicApi->UpdateCustomField");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldInputObject != null && updateCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Edit a custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldAsync (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateCustomFieldAsyncWithHttpInfo(updateCustomFieldInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a custom field 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldAsyncWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
            // verify the required parameter 'updateCustomFieldInputObject' is set
            if (updateCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldInputObject' when calling TextMagicApi->UpdateCustomField");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldInputObject != null && updateCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Edit the custom field value of a specified contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateCustomFieldValue (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateCustomFieldValueWithHttpInfo(updateCustomFieldValueInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit the custom field value of a specified contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateCustomFieldValueWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id)
        {
            // verify the required parameter 'updateCustomFieldValueInputObject' is set
            if (updateCustomFieldValueInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldValueInputObject' when calling TextMagicApi->UpdateCustomFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomFieldValue");

            var localVarPath = "/api/v2/customfields/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldValueInputObject != null && updateCustomFieldValueInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldValueInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldValueInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Edit the custom field value of a specified contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldValueAsync (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateCustomFieldValueAsyncWithHttpInfo(updateCustomFieldValueInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit the custom field value of a specified contact 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldValueAsyncWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, int? id)
        {
            // verify the required parameter 'updateCustomFieldValueInputObject' is set
            if (updateCustomFieldValueInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldValueInputObject' when calling TextMagicApi->UpdateCustomFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomFieldValue");

            var localVarPath = "/api/v2/customfields/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldValueInputObject != null && updateCustomFieldValueInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldValueInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldValueInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateInboundMessagesNotificationSettings (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
             UpdateInboundMessagesNotificationSettingsWithHttpInfo(updateInboundMessagesNotificationSettingsInputObject);
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateInboundMessagesNotificationSettingsWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateInboundMessagesNotificationSettingsInputObject' is set
            if (updateInboundMessagesNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateInboundMessagesNotificationSettingsInputObject' when calling TextMagicApi->UpdateInboundMessagesNotificationSettings");

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateInboundMessagesNotificationSettingsInputObject != null && updateInboundMessagesNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateInboundMessagesNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInboundMessagesNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateInboundMessagesNotificationSettingsAsync (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
             await UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo(updateInboundMessagesNotificationSettingsInputObject);

        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateInboundMessagesNotificationSettingsInputObject' is set
            if (updateInboundMessagesNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateInboundMessagesNotificationSettingsInputObject' when calling TextMagicApi->UpdateInboundMessagesNotificationSettings");

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateInboundMessagesNotificationSettingsInputObject != null && updateInboundMessagesNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateInboundMessagesNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInboundMessagesNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateList (int? id, UpdateListObject updateListObject = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateListWithHttpInfo(id, updateListObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateListWithHttpInfo (int? id, UpdateListObject updateListObject = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateListObject != null && updateListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Edit a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateListAsync (int? id, UpdateListObject updateListObject = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateListAsyncWithHttpInfo(id, updateListObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a list 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateListAsyncWithHttpInfo (int? id, UpdateListObject updateListObject = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateListObject != null && updateListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Change sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns></returns>
        public void UpdateSenderSetting (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
             UpdateSenderSettingWithHttpInfo(updateSenderSettingInputObject);
        }

        /// <summary>
        /// Change sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSenderSettingWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
            // verify the required parameter 'updateSenderSettingInputObject' is set
            if (updateSenderSettingInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSenderSettingInputObject' when calling TextMagicApi->UpdateSenderSetting");

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateSenderSettingInputObject != null && updateSenderSettingInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSenderSettingInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSenderSettingInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSenderSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSenderSettingAsync (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
             await UpdateSenderSettingAsyncWithHttpInfo(updateSenderSettingInputObject);

        }

        /// <summary>
        /// Change sender settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderSettingAsyncWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
            // verify the required parameter 'updateSenderSettingInputObject' is set
            if (updateSenderSettingInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSenderSettingInputObject' when calling TextMagicApi->UpdateSenderSetting");

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateSenderSettingInputObject != null && updateSenderSettingInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSenderSettingInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSenderSettingInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSenderSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateTemplate (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateTemplateWithHttpInfo(updateTemplateInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateTemplateWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
            // verify the required parameter 'updateTemplateInputObject' is set
            if (updateTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateInputObject' when calling TextMagicApi->UpdateTemplate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateTemplateInputObject != null && updateTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateTemplateAsync (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateTemplateAsyncWithHttpInfo(updateTemplateInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a template 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateTemplateAsyncWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
            // verify the required parameter 'updateTemplateInputObject' is set
            if (updateTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateInputObject' when calling TextMagicApi->UpdateTemplate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateTemplateInputObject != null && updateTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns></returns>
        public void UploadAvatar (System.IO.Stream image)
        {
             UploadAvatarWithHttpInfo(image);
        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadAvatarWithHttpInfo (System.IO.Stream image)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadAvatar");

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadAvatarAsync (System.IO.Stream image)
        {
             await UploadAvatarAsyncWithHttpInfo(image);

        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadAvatarAsyncWithHttpInfo (System.IO.Stream image)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadAvatar");

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UploadContactAvatar (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UploadContactAvatarWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UploadContactAvatarWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadContactAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UploadContactAvatarAsync (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UploadContactAvatarAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an avatar 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadContactAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadContactAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for a list Add an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UploadListAvatar (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UploadListAvatarWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an avatar for a list Add an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UploadListAvatarWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadListAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for a list Add an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UploadListAvatarAsync (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UploadListAvatarAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an avatar for a list Add an avatar for a list
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be a PNG or JPG file not more than 10 MB.</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadListAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadListAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        public UploadMessageAttachmentResponse UploadMessageAttachment (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = UploadMessageAttachmentWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        public ApiResponse< UploadMessageAttachmentResponse > UploadMessageAttachmentWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageAttachment");

            var localVarPath = "/api/v2/messages/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageAttachmentAsync (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = await UploadMessageAttachmentAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageAttachmentAsyncWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageAttachment");

            var localVarPath = "/api/v2/messages/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

        /// <summary>
        /// Upload message mms attachment Upload a new file to mms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        public UploadMessageAttachmentResponse UploadMessageMMSAttachment (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = UploadMessageMMSAttachmentWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload message mms attachment Upload a new file to mms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        public ApiResponse< UploadMessageAttachmentResponse > UploadMessageMMSAttachmentWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageMMSAttachment");

            var localVarPath = "/api/v2/messages/mms/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageMMSAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

        /// <summary>
        /// Upload message mms attachment Upload a new file to mms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageMMSAttachmentAsync (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = await UploadMessageMMSAttachmentAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload message mms attachment Upload a new file to mms.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats.</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageMMSAttachmentAsyncWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageMMSAttachment");

            var localVarPath = "/api/v2/messages/mms/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageMMSAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

    }
}
