/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// MessageIn
    /// </summary>
    [DataContract]
    public partial class MessageIn :  IEquatable<MessageIn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageIn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageIn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageIn" /> class.
        /// </summary>
        /// <param name="id">The ID of the inbound message. (required).</param>
        /// <param name="sender">The sender’s phone number. (required).</param>
        /// <param name="receiver">The receiver’s phone number (i.e. your dedicated or shared reply number). (required).</param>
        /// <param name="messageTime">The time when the message reached the Textmagic API endpoint. (required).</param>
        /// <param name="text">The text from the received message. (required).</param>
        /// <param name="contactId">Sender contact ID..</param>
        /// <param name="firstName">Sender contact first name..</param>
        /// <param name="lastName">Sender contact last name..</param>
        /// <param name="avatar">avatar (required).</param>
        /// <param name="email">Sender email..</param>
        /// <param name="contactUserId">contactUserId.</param>
        /// <param name="userId">userId.</param>
        public MessageIn(int? id = default(int?), string sender = default(string), string receiver = default(string), DateTime? messageTime = default(DateTime?), string text = default(string), int? contactId = default(int?), string firstName = default(string), string lastName = default(string), string avatar = default(string), string email = default(string), int? contactUserId = default(int?), int? userId = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for MessageIn and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new InvalidDataException("sender is a required property for MessageIn and cannot be null");
            }
            else
            {
                this.Sender = sender;
            }
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new InvalidDataException("receiver is a required property for MessageIn and cannot be null");
            }
            else
            {
                this.Receiver = receiver;
            }
            // to ensure "messageTime" is required (not null)
            if (messageTime == null)
            {
                throw new InvalidDataException("messageTime is a required property for MessageIn and cannot be null");
            }
            else
            {
                this.MessageTime = messageTime;
            }
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for MessageIn and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            // to ensure "avatar" is required (not null)
            if (avatar == null)
            {
                throw new InvalidDataException("avatar is a required property for MessageIn and cannot be null");
            }
            else
            {
                this.Avatar = avatar;
            }
            this.ContactId = contactId;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.ContactUserId = contactUserId;
            this.UserId = userId;
        }
        
        /// <summary>
        /// The ID of the inbound message.
        /// </summary>
        /// <value>The ID of the inbound message.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The sender’s phone number.
        /// </summary>
        /// <value>The sender’s phone number.</value>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public string Sender { get; set; }

        /// <summary>
        /// The receiver’s phone number (i.e. your dedicated or shared reply number).
        /// </summary>
        /// <value>The receiver’s phone number (i.e. your dedicated or shared reply number).</value>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public string Receiver { get; set; }

        /// <summary>
        /// The time when the message reached the Textmagic API endpoint.
        /// </summary>
        /// <value>The time when the message reached the Textmagic API endpoint.</value>
        [DataMember(Name="messageTime", EmitDefaultValue=false)]
        public DateTime? MessageTime { get; set; }

        /// <summary>
        /// The text from the received message.
        /// </summary>
        /// <value>The text from the received message.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Sender contact ID.
        /// </summary>
        /// <value>Sender contact ID.</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Sender contact first name.
        /// </summary>
        /// <value>Sender contact first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Sender contact last name.
        /// </summary>
        /// <value>Sender contact last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// Sender email.
        /// </summary>
        /// <value>Sender email.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ContactUserId
        /// </summary>
        [DataMember(Name="contactUserId", EmitDefaultValue=false)]
        public int? ContactUserId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageIn {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  MessageTime: ").Append(MessageTime).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ContactUserId: ").Append(ContactUserId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageIn);
        }

        /// <summary>
        /// Returns true if MessageIn instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageIn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.MessageTime == input.MessageTime ||
                    (this.MessageTime != null &&
                    this.MessageTime.Equals(input.MessageTime))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ContactUserId == input.ContactUserId ||
                    (this.ContactUserId != null &&
                    this.ContactUserId.Equals(input.ContactUserId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                if (this.MessageTime != null)
                    hashCode = hashCode * 59 + this.MessageTime.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ContactUserId != null)
                    hashCode = hashCode * 59 + this.ContactUserId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
