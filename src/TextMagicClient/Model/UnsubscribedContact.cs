/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// UnsubscribedContact
    /// </summary>
    [DataContract]
    public partial class UnsubscribedContact :  IEquatable<UnsubscribedContact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnsubscribedContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UnsubscribedContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnsubscribedContact" /> class.
        /// </summary>
        /// <param name="id">Unsubscribed contact ID. (required).</param>
        /// <param name="phone">Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164). (required).</param>
        /// <param name="unsubscribeTime">Time when contact was opted-out. (required).</param>
        /// <param name="firstName">Unsubscribed contact first name. (required).</param>
        /// <param name="lastName">Unsubscribed contact last name. (required).</param>
        public UnsubscribedContact(int? id = default(int?), string phone = default(string), DateTime? unsubscribeTime = default(DateTime?), string firstName = default(string), string lastName = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for UnsubscribedContact and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for UnsubscribedContact and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            // to ensure "unsubscribeTime" is required (not null)
            if (unsubscribeTime == null)
            {
                throw new InvalidDataException("unsubscribeTime is a required property for UnsubscribedContact and cannot be null");
            }
            else
            {
                this.UnsubscribeTime = unsubscribeTime;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for UnsubscribedContact and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for UnsubscribedContact and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
        }
        
        /// <summary>
        /// Unsubscribed contact ID.
        /// </summary>
        /// <value>Unsubscribed contact ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).
        /// </summary>
        /// <value>Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Time when contact was opted-out.
        /// </summary>
        /// <value>Time when contact was opted-out.</value>
        [DataMember(Name="unsubscribeTime", EmitDefaultValue=false)]
        public DateTime? UnsubscribeTime { get; set; }

        /// <summary>
        /// Unsubscribed contact first name.
        /// </summary>
        /// <value>Unsubscribed contact first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Unsubscribed contact last name.
        /// </summary>
        /// <value>Unsubscribed contact last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnsubscribedContact {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  UnsubscribeTime: ").Append(UnsubscribeTime).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnsubscribedContact);
        }

        /// <summary>
        /// Returns true if UnsubscribedContact instances are equal
        /// </summary>
        /// <param name="input">Instance of UnsubscribedContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnsubscribedContact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.UnsubscribeTime == input.UnsubscribeTime ||
                    (this.UnsubscribeTime != null &&
                    this.UnsubscribeTime.Equals(input.UnsubscribeTime))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.UnsubscribeTime != null)
                    hashCode = hashCode * 59 + this.UnsubscribeTime.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
