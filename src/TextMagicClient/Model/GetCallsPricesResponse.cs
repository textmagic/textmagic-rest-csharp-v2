/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetCallsPricesResponse
    /// </summary>
    [DataContract]
    public partial class GetCallsPricesResponse :  IEquatable<GetCallsPricesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCallsPricesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetCallsPricesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCallsPricesResponse" /> class.
        /// </summary>
        /// <param name="outbound">Price for outbound message. (required).</param>
        /// <param name="inbound">Price for inbound message. (required).</param>
        /// <param name="forward">Price for forward. (required).</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when local is  set to true. Default is account country. (required).</param>
        public GetCallsPricesResponse(decimal? outbound = default(decimal?), decimal? inbound = default(decimal?), decimal? forward = default(decimal?), string country = default(string))
        {
            // to ensure "outbound" is required (not null)
            if (outbound == null)
            {
                throw new InvalidDataException("outbound is a required property for GetCallsPricesResponse and cannot be null");
            }
            else
            {
                this.Outbound = outbound;
            }
            // to ensure "inbound" is required (not null)
            if (inbound == null)
            {
                throw new InvalidDataException("inbound is a required property for GetCallsPricesResponse and cannot be null");
            }
            else
            {
                this.Inbound = inbound;
            }
            // to ensure "forward" is required (not null)
            if (forward == null)
            {
                throw new InvalidDataException("forward is a required property for GetCallsPricesResponse and cannot be null");
            }
            else
            {
                this.Forward = forward;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for GetCallsPricesResponse and cannot be null");
            }
            else
            {
                this.Country = country;
            }
        }
        
        /// <summary>
        /// Price for outbound message.
        /// </summary>
        /// <value>Price for outbound message.</value>
        [DataMember(Name="outbound", EmitDefaultValue=false)]
        public decimal? Outbound { get; set; }

        /// <summary>
        /// Price for inbound message.
        /// </summary>
        /// <value>Price for inbound message.</value>
        [DataMember(Name="inbound", EmitDefaultValue=false)]
        public decimal? Inbound { get; set; }

        /// <summary>
        /// Price for forward.
        /// </summary>
        /// <value>Price for forward.</value>
        [DataMember(Name="forward", EmitDefaultValue=false)]
        public decimal? Forward { get; set; }

        /// <summary>
        /// 2-letter ISO country code for local phone numbers, used when local is  set to true. Default is account country.
        /// </summary>
        /// <value>2-letter ISO country code for local phone numbers, used when local is  set to true. Default is account country.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetCallsPricesResponse {\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  Forward: ").Append(Forward).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetCallsPricesResponse);
        }

        /// <summary>
        /// Returns true if GetCallsPricesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetCallsPricesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetCallsPricesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Outbound == input.Outbound ||
                    (this.Outbound != null &&
                    this.Outbound.Equals(input.Outbound))
                ) && 
                (
                    this.Inbound == input.Inbound ||
                    (this.Inbound != null &&
                    this.Inbound.Equals(input.Inbound))
                ) && 
                (
                    this.Forward == input.Forward ||
                    (this.Forward != null &&
                    this.Forward.Equals(input.Forward))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Outbound != null)
                    hashCode = hashCode * 59 + this.Outbound.GetHashCode();
                if (this.Inbound != null)
                    hashCode = hashCode * 59 + this.Inbound.GetHashCode();
                if (this.Forward != null)
                    hashCode = hashCode * 59 + this.Forward.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
