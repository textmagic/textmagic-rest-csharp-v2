/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// MessagesIcsTextParameters
    /// </summary>
    [DataContract]
    public partial class MessagesIcsTextParameters :  IEquatable<MessagesIcsTextParameters>, IValidatableObject
    {
        /// <summary>
        /// Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. 
        /// </summary>
        /// <value>Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EncodingEnum
        {
            
            /// <summary>
            /// Enum ISO88591 for value: ISO-8859-1
            /// </summary>
            [EnumMember(Value = "ISO-8859-1")]
            ISO88591 = 1,
            
            /// <summary>
            /// Enum UTF16BE for value: UTF-16BE
            /// </summary>
            [EnumMember(Value = "UTF-16BE")]
            UTF16BE = 2
        }

        /// <summary>
        /// Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. 
        /// </summary>
        /// <value>Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS. </value>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public EncodingEnum Encoding { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesIcsTextParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessagesIcsTextParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesIcsTextParameters" /> class.
        /// </summary>
        /// <param name="cost">Cost to check that one number is constant – 0.04 in your account currency. (required).</param>
        /// <param name="parts">Message parts (multiples of 160 characters) count. (required).</param>
        /// <param name="chars">Characters count. (required).</param>
        /// <param name="encoding">Message charset. Could be: * **ISO-8859-1** – for plaintext SMS; * **UTF-16BE** – for Unicode SMS.  (required).</param>
        /// <param name="countries">countries (required).</param>
        /// <param name="charsetLabel">Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages.  (required).</param>
        public MessagesIcsTextParameters(decimal? cost = default(decimal?), int? parts = default(int?), int? chars = default(int?), EncodingEnum encoding = default(EncodingEnum), List<string> countries = default(List<string>), string charsetLabel = default(string))
        {
            // to ensure "cost" is required (not null)
            if (cost == null)
            {
                throw new InvalidDataException("cost is a required property for MessagesIcsTextParameters and cannot be null");
            }
            else
            {
                this.Cost = cost;
            }
            // to ensure "parts" is required (not null)
            if (parts == null)
            {
                throw new InvalidDataException("parts is a required property for MessagesIcsTextParameters and cannot be null");
            }
            else
            {
                this.Parts = parts;
            }
            // to ensure "chars" is required (not null)
            if (chars == null)
            {
                throw new InvalidDataException("chars is a required property for MessagesIcsTextParameters and cannot be null");
            }
            else
            {
                this.Chars = chars;
            }
            // to ensure "encoding" is required (not null)
            if (encoding == null)
            {
                throw new InvalidDataException("encoding is a required property for MessagesIcsTextParameters and cannot be null");
            }
            else
            {
                this.Encoding = encoding;
            }
            // to ensure "countries" is required (not null)
            if (countries == null)
            {
                throw new InvalidDataException("countries is a required property for MessagesIcsTextParameters and cannot be null");
            }
            else
            {
                this.Countries = countries;
            }
            // to ensure "charsetLabel" is required (not null)
            if (charsetLabel == null)
            {
                throw new InvalidDataException("charsetLabel is a required property for MessagesIcsTextParameters and cannot be null");
            }
            else
            {
                this.CharsetLabel = charsetLabel;
            }
        }
        
        /// <summary>
        /// Cost to check that one number is constant – 0.04 in your account currency.
        /// </summary>
        /// <value>Cost to check that one number is constant – 0.04 in your account currency.</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public decimal? Cost { get; set; }

        /// <summary>
        /// Message parts (multiples of 160 characters) count.
        /// </summary>
        /// <value>Message parts (multiples of 160 characters) count.</value>
        [DataMember(Name="parts", EmitDefaultValue=false)]
        public int? Parts { get; set; }

        /// <summary>
        /// Characters count.
        /// </summary>
        /// <value>Characters count.</value>
        [DataMember(Name="chars", EmitDefaultValue=false)]
        public int? Chars { get; set; }


        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name="countries", EmitDefaultValue=false)]
        public List<string> Countries { get; set; }

        /// <summary>
        /// Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages. 
        /// </summary>
        /// <value>Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages. </value>
        [DataMember(Name="charsetLabel", EmitDefaultValue=false)]
        public string CharsetLabel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessagesIcsTextParameters {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("  Chars: ").Append(Chars).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  CharsetLabel: ").Append(CharsetLabel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessagesIcsTextParameters);
        }

        /// <summary>
        /// Returns true if MessagesIcsTextParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of MessagesIcsTextParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessagesIcsTextParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Parts == input.Parts ||
                    (this.Parts != null &&
                    this.Parts.Equals(input.Parts))
                ) && 
                (
                    this.Chars == input.Chars ||
                    (this.Chars != null &&
                    this.Chars.Equals(input.Chars))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.Countries == input.Countries ||
                    this.Countries != null &&
                    this.Countries.SequenceEqual(input.Countries)
                ) && 
                (
                    this.CharsetLabel == input.CharsetLabel ||
                    (this.CharsetLabel != null &&
                    this.CharsetLabel.Equals(input.CharsetLabel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Parts != null)
                    hashCode = hashCode * 59 + this.Parts.GetHashCode();
                if (this.Chars != null)
                    hashCode = hashCode * 59 + this.Chars.GetHashCode();
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                if (this.Countries != null)
                    hashCode = hashCode * 59 + this.Countries.GetHashCode();
                if (this.CharsetLabel != null)
                    hashCode = hashCode * 59 + this.CharsetLabel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
