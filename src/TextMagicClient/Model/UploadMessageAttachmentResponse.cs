/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// UploadMessageAttachmentResponse
    /// </summary>
    [DataContract]
    public partial class UploadMessageAttachmentResponse :  IEquatable<UploadMessageAttachmentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadMessageAttachmentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadMessageAttachmentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadMessageAttachmentResponse" /> class.
        /// </summary>
        /// <param name="chars">&#x60;href&#x60; field characters count.  (required).</param>
        /// <param name="href">This is a relative link to your file. To construct a full link, just add “[https://my.textmagic.com/”](https://my.textmagic.com/%E2%80%9D) to the beginning (like this: [https://my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9)). For most modern devices, you can omit the “https://” part and write just [my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9), which will save you 8 characters.  (required).</param>
        /// <param name="name">File name of the uploaded file.  (required).</param>
        /// <param name="size">Attachment size in bytes. (required).</param>
        /// <param name="resource">Internal file name (required).</param>
        public UploadMessageAttachmentResponse(int? chars = default(int?), string href = default(string), string name = default(string), int? size = default(int?), string resource = default(string))
        {
            // to ensure "chars" is required (not null)
            if (chars == null)
            {
                throw new InvalidDataException("chars is a required property for UploadMessageAttachmentResponse and cannot be null");
            }
            else
            {
                this.Chars = chars;
            }
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new InvalidDataException("href is a required property for UploadMessageAttachmentResponse and cannot be null");
            }
            else
            {
                this.Href = href;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for UploadMessageAttachmentResponse and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new InvalidDataException("size is a required property for UploadMessageAttachmentResponse and cannot be null");
            }
            else
            {
                this.Size = size;
            }
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for UploadMessageAttachmentResponse and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }
        }
        
        /// <summary>
        /// &#x60;href&#x60; field characters count. 
        /// </summary>
        /// <value>&#x60;href&#x60; field characters count. </value>
        [DataMember(Name="chars", EmitDefaultValue=false)]
        public int? Chars { get; set; }

        /// <summary>
        /// This is a relative link to your file. To construct a full link, just add “[https://my.textmagic.com/”](https://my.textmagic.com/%E2%80%9D) to the beginning (like this: [https://my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9)). For most modern devices, you can omit the “https://” part and write just [my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9), which will save you 8 characters. 
        /// </summary>
        /// <value>This is a relative link to your file. To construct a full link, just add “[https://my.textmagic.com/”](https://my.textmagic.com/%E2%80%9D) to the beginning (like this: [https://my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9)). For most modern devices, you can omit the “https://” part and write just [my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9), which will save you 8 characters. </value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// File name of the uploaded file. 
        /// </summary>
        /// <value>File name of the uploaded file. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Attachment size in bytes.
        /// </summary>
        /// <value>Attachment size in bytes.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Internal file name
        /// </summary>
        /// <value>Internal file name</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadMessageAttachmentResponse {\n");
            sb.Append("  Chars: ").Append(Chars).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadMessageAttachmentResponse);
        }

        /// <summary>
        /// Returns true if UploadMessageAttachmentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadMessageAttachmentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadMessageAttachmentResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Chars == input.Chars ||
                    (this.Chars != null &&
                    this.Chars.Equals(input.Chars))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Chars != null)
                    hashCode = hashCode * 59 + this.Chars.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
