/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetInboundMessagesNotificationSettingsResponse
    /// </summary>
    [DataContract]
    public partial class GetInboundMessagesNotificationSettingsResponse :  IEquatable<GetInboundMessagesNotificationSettingsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInboundMessagesNotificationSettingsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetInboundMessagesNotificationSettingsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInboundMessagesNotificationSettingsResponse" /> class.
        /// </summary>
        /// <param name="inboundMessageNotification">Should user receive notification about new incoming messages. (required).</param>
        /// <param name="forwardedCallNotification">Should user receive notification about new forwarded calls. (required).</param>
        /// <param name="includeSmsHistory">Include SMS history into notification Email. (required).</param>
        /// <param name="sendInHtmlFormat">Send Email notification in HTML format. (required).</param>
        /// <param name="alertEmail1">New message notification email 1. (required).</param>
        /// <param name="alertEmail2">New message notification email 2. (required).</param>
        /// <param name="alertEmail3">New message notification email 3. (required).</param>
        public GetInboundMessagesNotificationSettingsResponse(bool? inboundMessageNotification = default(bool?), bool? forwardedCallNotification = default(bool?), bool? includeSmsHistory = default(bool?), bool? sendInHtmlFormat = default(bool?), string alertEmail1 = default(string), string alertEmail2 = default(string), string alertEmail3 = default(string))
        {
            // to ensure "inboundMessageNotification" is required (not null)
            if (inboundMessageNotification == null)
            {
                throw new InvalidDataException("inboundMessageNotification is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.InboundMessageNotification = inboundMessageNotification;
            }
            // to ensure "forwardedCallNotification" is required (not null)
            if (forwardedCallNotification == null)
            {
                throw new InvalidDataException("forwardedCallNotification is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.ForwardedCallNotification = forwardedCallNotification;
            }
            // to ensure "includeSmsHistory" is required (not null)
            if (includeSmsHistory == null)
            {
                throw new InvalidDataException("includeSmsHistory is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.IncludeSmsHistory = includeSmsHistory;
            }
            // to ensure "sendInHtmlFormat" is required (not null)
            if (sendInHtmlFormat == null)
            {
                throw new InvalidDataException("sendInHtmlFormat is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.SendInHtmlFormat = sendInHtmlFormat;
            }
            // to ensure "alertEmail1" is required (not null)
            if (alertEmail1 == null)
            {
                throw new InvalidDataException("alertEmail1 is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.AlertEmail1 = alertEmail1;
            }
            // to ensure "alertEmail2" is required (not null)
            if (alertEmail2 == null)
            {
                throw new InvalidDataException("alertEmail2 is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.AlertEmail2 = alertEmail2;
            }
            // to ensure "alertEmail3" is required (not null)
            if (alertEmail3 == null)
            {
                throw new InvalidDataException("alertEmail3 is a required property for GetInboundMessagesNotificationSettingsResponse and cannot be null");
            }
            else
            {
                this.AlertEmail3 = alertEmail3;
            }
        }
        
        /// <summary>
        /// Should user receive notification about new incoming messages.
        /// </summary>
        /// <value>Should user receive notification about new incoming messages.</value>
        [DataMember(Name="inboundMessageNotification", EmitDefaultValue=false)]
        public bool? InboundMessageNotification { get; set; }

        /// <summary>
        /// Should user receive notification about new forwarded calls.
        /// </summary>
        /// <value>Should user receive notification about new forwarded calls.</value>
        [DataMember(Name="forwardedCallNotification", EmitDefaultValue=false)]
        public bool? ForwardedCallNotification { get; set; }

        /// <summary>
        /// Include SMS history into notification Email.
        /// </summary>
        /// <value>Include SMS history into notification Email.</value>
        [DataMember(Name="includeSmsHistory", EmitDefaultValue=false)]
        public bool? IncludeSmsHistory { get; set; }

        /// <summary>
        /// Send Email notification in HTML format.
        /// </summary>
        /// <value>Send Email notification in HTML format.</value>
        [DataMember(Name="sendInHtmlFormat", EmitDefaultValue=false)]
        public bool? SendInHtmlFormat { get; set; }

        /// <summary>
        /// New message notification email 1.
        /// </summary>
        /// <value>New message notification email 1.</value>
        [DataMember(Name="alertEmail1", EmitDefaultValue=false)]
        public string AlertEmail1 { get; set; }

        /// <summary>
        /// New message notification email 2.
        /// </summary>
        /// <value>New message notification email 2.</value>
        [DataMember(Name="alertEmail2", EmitDefaultValue=false)]
        public string AlertEmail2 { get; set; }

        /// <summary>
        /// New message notification email 3.
        /// </summary>
        /// <value>New message notification email 3.</value>
        [DataMember(Name="alertEmail3", EmitDefaultValue=false)]
        public string AlertEmail3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInboundMessagesNotificationSettingsResponse {\n");
            sb.Append("  InboundMessageNotification: ").Append(InboundMessageNotification).Append("\n");
            sb.Append("  ForwardedCallNotification: ").Append(ForwardedCallNotification).Append("\n");
            sb.Append("  IncludeSmsHistory: ").Append(IncludeSmsHistory).Append("\n");
            sb.Append("  SendInHtmlFormat: ").Append(SendInHtmlFormat).Append("\n");
            sb.Append("  AlertEmail1: ").Append(AlertEmail1).Append("\n");
            sb.Append("  AlertEmail2: ").Append(AlertEmail2).Append("\n");
            sb.Append("  AlertEmail3: ").Append(AlertEmail3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInboundMessagesNotificationSettingsResponse);
        }

        /// <summary>
        /// Returns true if GetInboundMessagesNotificationSettingsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInboundMessagesNotificationSettingsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInboundMessagesNotificationSettingsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InboundMessageNotification == input.InboundMessageNotification ||
                    (this.InboundMessageNotification != null &&
                    this.InboundMessageNotification.Equals(input.InboundMessageNotification))
                ) && 
                (
                    this.ForwardedCallNotification == input.ForwardedCallNotification ||
                    (this.ForwardedCallNotification != null &&
                    this.ForwardedCallNotification.Equals(input.ForwardedCallNotification))
                ) && 
                (
                    this.IncludeSmsHistory == input.IncludeSmsHistory ||
                    (this.IncludeSmsHistory != null &&
                    this.IncludeSmsHistory.Equals(input.IncludeSmsHistory))
                ) && 
                (
                    this.SendInHtmlFormat == input.SendInHtmlFormat ||
                    (this.SendInHtmlFormat != null &&
                    this.SendInHtmlFormat.Equals(input.SendInHtmlFormat))
                ) && 
                (
                    this.AlertEmail1 == input.AlertEmail1 ||
                    (this.AlertEmail1 != null &&
                    this.AlertEmail1.Equals(input.AlertEmail1))
                ) && 
                (
                    this.AlertEmail2 == input.AlertEmail2 ||
                    (this.AlertEmail2 != null &&
                    this.AlertEmail2.Equals(input.AlertEmail2))
                ) && 
                (
                    this.AlertEmail3 == input.AlertEmail3 ||
                    (this.AlertEmail3 != null &&
                    this.AlertEmail3.Equals(input.AlertEmail3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InboundMessageNotification != null)
                    hashCode = hashCode * 59 + this.InboundMessageNotification.GetHashCode();
                if (this.ForwardedCallNotification != null)
                    hashCode = hashCode * 59 + this.ForwardedCallNotification.GetHashCode();
                if (this.IncludeSmsHistory != null)
                    hashCode = hashCode * 59 + this.IncludeSmsHistory.GetHashCode();
                if (this.SendInHtmlFormat != null)
                    hashCode = hashCode * 59 + this.SendInHtmlFormat.GetHashCode();
                if (this.AlertEmail1 != null)
                    hashCode = hashCode * 59 + this.AlertEmail1.GetHashCode();
                if (this.AlertEmail2 != null)
                    hashCode = hashCode * 59 + this.AlertEmail2.GetHashCode();
                if (this.AlertEmail3 != null)
                    hashCode = hashCode * 59 + this.AlertEmail3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
