/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// MessagePayload
    /// </summary>
    [DataContract]
    public partial class MessagePayload :  IEquatable<MessagePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessagePayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessagePayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessagePayload" /> class.
        /// </summary>
        /// <param name="type">Payload type. (required).</param>
        /// <param name="mediaPreview">Media preview link. (required).</param>
        public MessagePayload(string type = default(string), string mediaPreview = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MessagePayload and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "mediaPreview" is required (not null)
            if (mediaPreview == null)
            {
                throw new InvalidDataException("mediaPreview is a required property for MessagePayload and cannot be null");
            }
            else
            {
                this.MediaPreview = mediaPreview;
            }
        }
        
        /// <summary>
        /// Payload type.
        /// </summary>
        /// <value>Payload type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Media preview link.
        /// </summary>
        /// <value>Media preview link.</value>
        [DataMember(Name="mediaPreview", EmitDefaultValue=false)]
        public string MediaPreview { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessagePayload {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MediaPreview: ").Append(MediaPreview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessagePayload);
        }

        /// <summary>
        /// Returns true if MessagePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of MessagePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessagePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MediaPreview == input.MediaPreview ||
                    (this.MediaPreview != null &&
                    this.MediaPreview.Equals(input.MediaPreview))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MediaPreview != null)
                    hashCode = hashCode * 59 + this.MediaPreview.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
