/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetBalanceNotificationOptionsResponse
    /// </summary>
    [DataContract]
    public partial class GetBalanceNotificationOptionsResponse :  IEquatable<GetBalanceNotificationOptionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBalanceNotificationOptionsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetBalanceNotificationOptionsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetBalanceNotificationOptionsResponse" /> class.
        /// </summary>
        /// <param name="_1">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_2">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_3">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_5">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_10">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_20">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_30">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_50">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_100">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_500">Contains sign of currency in Unicode hex code. (required).</param>
        /// <param name="_1000">Contains sign of currency in Unicode hex code. (required).</param>
        public GetBalanceNotificationOptionsResponse(string _1 = default(string), string _2 = default(string), string _3 = default(string), string _5 = default(string), string _10 = default(string), string _20 = default(string), string _30 = default(string), string _50 = default(string), string _100 = default(string), string _500 = default(string), string _1000 = default(string))
        {
            // to ensure "_1" is required (not null)
            if (_1 == null)
            {
                throw new InvalidDataException("_1 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._1 = _1;
            }
            // to ensure "_2" is required (not null)
            if (_2 == null)
            {
                throw new InvalidDataException("_2 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._2 = _2;
            }
            // to ensure "_3" is required (not null)
            if (_3 == null)
            {
                throw new InvalidDataException("_3 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._3 = _3;
            }
            // to ensure "_5" is required (not null)
            if (_5 == null)
            {
                throw new InvalidDataException("_5 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._5 = _5;
            }
            // to ensure "_10" is required (not null)
            if (_10 == null)
            {
                throw new InvalidDataException("_10 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._10 = _10;
            }
            // to ensure "_20" is required (not null)
            if (_20 == null)
            {
                throw new InvalidDataException("_20 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._20 = _20;
            }
            // to ensure "_30" is required (not null)
            if (_30 == null)
            {
                throw new InvalidDataException("_30 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._30 = _30;
            }
            // to ensure "_50" is required (not null)
            if (_50 == null)
            {
                throw new InvalidDataException("_50 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._50 = _50;
            }
            // to ensure "_100" is required (not null)
            if (_100 == null)
            {
                throw new InvalidDataException("_100 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._100 = _100;
            }
            // to ensure "_500" is required (not null)
            if (_500 == null)
            {
                throw new InvalidDataException("_500 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._500 = _500;
            }
            // to ensure "_1000" is required (not null)
            if (_1000 == null)
            {
                throw new InvalidDataException("_1000 is a required property for GetBalanceNotificationOptionsResponse and cannot be null");
            }
            else
            {
                this._1000 = _1000;
            }
        }
        
        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="1", EmitDefaultValue=false)]
        public string _1 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="2", EmitDefaultValue=false)]
        public string _2 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="3", EmitDefaultValue=false)]
        public string _3 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="5", EmitDefaultValue=false)]
        public string _5 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="10", EmitDefaultValue=false)]
        public string _10 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="20", EmitDefaultValue=false)]
        public string _20 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="30", EmitDefaultValue=false)]
        public string _30 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="50", EmitDefaultValue=false)]
        public string _50 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="100", EmitDefaultValue=false)]
        public string _100 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="500", EmitDefaultValue=false)]
        public string _500 { get; set; }

        /// <summary>
        /// Contains sign of currency in Unicode hex code.
        /// </summary>
        /// <value>Contains sign of currency in Unicode hex code.</value>
        [DataMember(Name="1000", EmitDefaultValue=false)]
        public string _1000 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetBalanceNotificationOptionsResponse {\n");
            sb.Append("  _1: ").Append(_1).Append("\n");
            sb.Append("  _2: ").Append(_2).Append("\n");
            sb.Append("  _3: ").Append(_3).Append("\n");
            sb.Append("  _5: ").Append(_5).Append("\n");
            sb.Append("  _10: ").Append(_10).Append("\n");
            sb.Append("  _20: ").Append(_20).Append("\n");
            sb.Append("  _30: ").Append(_30).Append("\n");
            sb.Append("  _50: ").Append(_50).Append("\n");
            sb.Append("  _100: ").Append(_100).Append("\n");
            sb.Append("  _500: ").Append(_500).Append("\n");
            sb.Append("  _1000: ").Append(_1000).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetBalanceNotificationOptionsResponse);
        }

        /// <summary>
        /// Returns true if GetBalanceNotificationOptionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetBalanceNotificationOptionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetBalanceNotificationOptionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._1 == input._1 ||
                    (this._1 != null &&
                    this._1.Equals(input._1))
                ) && 
                (
                    this._2 == input._2 ||
                    (this._2 != null &&
                    this._2.Equals(input._2))
                ) && 
                (
                    this._3 == input._3 ||
                    (this._3 != null &&
                    this._3.Equals(input._3))
                ) && 
                (
                    this._5 == input._5 ||
                    (this._5 != null &&
                    this._5.Equals(input._5))
                ) && 
                (
                    this._10 == input._10 ||
                    (this._10 != null &&
                    this._10.Equals(input._10))
                ) && 
                (
                    this._20 == input._20 ||
                    (this._20 != null &&
                    this._20.Equals(input._20))
                ) && 
                (
                    this._30 == input._30 ||
                    (this._30 != null &&
                    this._30.Equals(input._30))
                ) && 
                (
                    this._50 == input._50 ||
                    (this._50 != null &&
                    this._50.Equals(input._50))
                ) && 
                (
                    this._100 == input._100 ||
                    (this._100 != null &&
                    this._100.Equals(input._100))
                ) && 
                (
                    this._500 == input._500 ||
                    (this._500 != null &&
                    this._500.Equals(input._500))
                ) && 
                (
                    this._1000 == input._1000 ||
                    (this._1000 != null &&
                    this._1000.Equals(input._1000))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._1 != null)
                    hashCode = hashCode * 59 + this._1.GetHashCode();
                if (this._2 != null)
                    hashCode = hashCode * 59 + this._2.GetHashCode();
                if (this._3 != null)
                    hashCode = hashCode * 59 + this._3.GetHashCode();
                if (this._5 != null)
                    hashCode = hashCode * 59 + this._5.GetHashCode();
                if (this._10 != null)
                    hashCode = hashCode * 59 + this._10.GetHashCode();
                if (this._20 != null)
                    hashCode = hashCode * 59 + this._20.GetHashCode();
                if (this._30 != null)
                    hashCode = hashCode * 59 + this._30.GetHashCode();
                if (this._50 != null)
                    hashCode = hashCode * 59 + this._50.GetHashCode();
                if (this._100 != null)
                    hashCode = hashCode * 59 + this._100.GetHashCode();
                if (this._500 != null)
                    hashCode = hashCode * 59 + this._500.GetHashCode();
                if (this._1000 != null)
                    hashCode = hashCode * 59 + this._1000.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
