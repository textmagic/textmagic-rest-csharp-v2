/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// DoAuthResponse
    /// </summary>
    [DataContract]
    public partial class DoAuthResponse :  IEquatable<DoAuthResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DoAuthResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DoAuthResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DoAuthResponse" /> class.
        /// </summary>
        /// <param name="username">username (required).</param>
        /// <param name="token">token (required).</param>
        /// <param name="expires">expires (required).</param>
        /// <param name="minVersions">minVersions (required).</param>
        /// <param name="disallowedRules">disallowedRules (required).</param>
        public DoAuthResponse(string username = default(string), string token = default(string), DateTime? expires = default(DateTime?), DoAuthResponseMinVersions minVersions = default(DoAuthResponseMinVersions), List<string> disallowedRules = default(List<string>))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for DoAuthResponse and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for DoAuthResponse and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            // to ensure "expires" is required (not null)
            if (expires == null)
            {
                throw new InvalidDataException("expires is a required property for DoAuthResponse and cannot be null");
            }
            else
            {
                this.Expires = expires;
            }
            // to ensure "minVersions" is required (not null)
            if (minVersions == null)
            {
                throw new InvalidDataException("minVersions is a required property for DoAuthResponse and cannot be null");
            }
            else
            {
                this.MinVersions = minVersions;
            }
            // to ensure "disallowedRules" is required (not null)
            if (disallowedRules == null)
            {
                throw new InvalidDataException("disallowedRules is a required property for DoAuthResponse and cannot be null");
            }
            else
            {
                this.DisallowedRules = disallowedRules;
            }
        }
        
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public DateTime? Expires { get; set; }

        /// <summary>
        /// Gets or Sets MinVersions
        /// </summary>
        [DataMember(Name="minVersions", EmitDefaultValue=false)]
        public DoAuthResponseMinVersions MinVersions { get; set; }

        /// <summary>
        /// Gets or Sets DisallowedRules
        /// </summary>
        [DataMember(Name="disallowedRules", EmitDefaultValue=false)]
        public List<string> DisallowedRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DoAuthResponse {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  MinVersions: ").Append(MinVersions).Append("\n");
            sb.Append("  DisallowedRules: ").Append(DisallowedRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DoAuthResponse);
        }

        /// <summary>
        /// Returns true if DoAuthResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DoAuthResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DoAuthResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.MinVersions == input.MinVersions ||
                    (this.MinVersions != null &&
                    this.MinVersions.Equals(input.MinVersions))
                ) && 
                (
                    this.DisallowedRules == input.DisallowedRules ||
                    this.DisallowedRules != null &&
                    this.DisallowedRules.SequenceEqual(input.DisallowedRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.MinVersions != null)
                    hashCode = hashCode * 59 + this.MinVersions.GetHashCode();
                if (this.DisallowedRules != null)
                    hashCode = hashCode * 59 + this.DisallowedRules.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
