/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetAvailableSenderSettingOptionsResponse
    /// </summary>
    [DataContract]
    public partial class GetAvailableSenderSettingOptionsResponse :  IEquatable<GetAvailableSenderSettingOptionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAvailableSenderSettingOptionsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAvailableSenderSettingOptionsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAvailableSenderSettingOptionsResponse" /> class.
        /// </summary>
        /// <param name="dedicated">Array of dedicated number strings. (required).</param>
        /// <param name="user">Array of verified account phone numbers (currently only one). (required).</param>
        /// <param name="shared">Array of shared number strings. (required).</param>
        /// <param name="senderIds">Array of alphanumeric sender IDs. (required).</param>
        /// <param name="userCarrierTwilio">Array of alphanumeric sender IDs. (required).</param>
        /// <param name="userCarrierVonage">Array of alphanumeric sender IDs. (required).</param>
        public GetAvailableSenderSettingOptionsResponse(List<string> dedicated = default(List<string>), List<string> user = default(List<string>), List<string> shared = default(List<string>), List<string> senderIds = default(List<string>), List<string> userCarrierTwilio = default(List<string>), List<string> userCarrierVonage = default(List<string>))
        {
            // to ensure "dedicated" is required (not null)
            if (dedicated == null)
            {
                throw new InvalidDataException("dedicated is a required property for GetAvailableSenderSettingOptionsResponse and cannot be null");
            }
            else
            {
                this.Dedicated = dedicated;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for GetAvailableSenderSettingOptionsResponse and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "shared" is required (not null)
            if (shared == null)
            {
                throw new InvalidDataException("shared is a required property for GetAvailableSenderSettingOptionsResponse and cannot be null");
            }
            else
            {
                this.Shared = shared;
            }
            // to ensure "senderIds" is required (not null)
            if (senderIds == null)
            {
                throw new InvalidDataException("senderIds is a required property for GetAvailableSenderSettingOptionsResponse and cannot be null");
            }
            else
            {
                this.SenderIds = senderIds;
            }
            // to ensure "userCarrierTwilio" is required (not null)
            if (userCarrierTwilio == null)
            {
                throw new InvalidDataException("userCarrierTwilio is a required property for GetAvailableSenderSettingOptionsResponse and cannot be null");
            }
            else
            {
                this.UserCarrierTwilio = userCarrierTwilio;
            }
            // to ensure "userCarrierVonage" is required (not null)
            if (userCarrierVonage == null)
            {
                throw new InvalidDataException("userCarrierVonage is a required property for GetAvailableSenderSettingOptionsResponse and cannot be null");
            }
            else
            {
                this.UserCarrierVonage = userCarrierVonage;
            }
        }
        
        /// <summary>
        /// Array of dedicated number strings.
        /// </summary>
        /// <value>Array of dedicated number strings.</value>
        [DataMember(Name="dedicated", EmitDefaultValue=false)]
        public List<string> Dedicated { get; set; }

        /// <summary>
        /// Array of verified account phone numbers (currently only one).
        /// </summary>
        /// <value>Array of verified account phone numbers (currently only one).</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public List<string> User { get; set; }

        /// <summary>
        /// Array of shared number strings.
        /// </summary>
        /// <value>Array of shared number strings.</value>
        [DataMember(Name="shared", EmitDefaultValue=false)]
        public List<string> Shared { get; set; }

        /// <summary>
        /// Array of alphanumeric sender IDs.
        /// </summary>
        /// <value>Array of alphanumeric sender IDs.</value>
        [DataMember(Name="senderIds", EmitDefaultValue=false)]
        public List<string> SenderIds { get; set; }

        /// <summary>
        /// Array of alphanumeric sender IDs.
        /// </summary>
        /// <value>Array of alphanumeric sender IDs.</value>
        [DataMember(Name="userCarrierTwilio", EmitDefaultValue=false)]
        public List<string> UserCarrierTwilio { get; set; }

        /// <summary>
        /// Array of alphanumeric sender IDs.
        /// </summary>
        /// <value>Array of alphanumeric sender IDs.</value>
        [DataMember(Name="userCarrierVonage", EmitDefaultValue=false)]
        public List<string> UserCarrierVonage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAvailableSenderSettingOptionsResponse {\n");
            sb.Append("  Dedicated: ").Append(Dedicated).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  SenderIds: ").Append(SenderIds).Append("\n");
            sb.Append("  UserCarrierTwilio: ").Append(UserCarrierTwilio).Append("\n");
            sb.Append("  UserCarrierVonage: ").Append(UserCarrierVonage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAvailableSenderSettingOptionsResponse);
        }

        /// <summary>
        /// Returns true if GetAvailableSenderSettingOptionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAvailableSenderSettingOptionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAvailableSenderSettingOptionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dedicated == input.Dedicated ||
                    this.Dedicated != null &&
                    this.Dedicated.SequenceEqual(input.Dedicated)
                ) && 
                (
                    this.User == input.User ||
                    this.User != null &&
                    this.User.SequenceEqual(input.User)
                ) && 
                (
                    this.Shared == input.Shared ||
                    this.Shared != null &&
                    this.Shared.SequenceEqual(input.Shared)
                ) && 
                (
                    this.SenderIds == input.SenderIds ||
                    this.SenderIds != null &&
                    this.SenderIds.SequenceEqual(input.SenderIds)
                ) && 
                (
                    this.UserCarrierTwilio == input.UserCarrierTwilio ||
                    this.UserCarrierTwilio != null &&
                    this.UserCarrierTwilio.SequenceEqual(input.UserCarrierTwilio)
                ) && 
                (
                    this.UserCarrierVonage == input.UserCarrierVonage ||
                    this.UserCarrierVonage != null &&
                    this.UserCarrierVonage.SequenceEqual(input.UserCarrierVonage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dedicated != null)
                    hashCode = hashCode * 59 + this.Dedicated.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Shared != null)
                    hashCode = hashCode * 59 + this.Shared.GetHashCode();
                if (this.SenderIds != null)
                    hashCode = hashCode * 59 + this.SenderIds.GetHashCode();
                if (this.UserCarrierTwilio != null)
                    hashCode = hashCode * 59 + this.UserCarrierTwilio.GetHashCode();
                if (this.UserCarrierVonage != null)
                    hashCode = hashCode * 59 + this.UserCarrierVonage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
