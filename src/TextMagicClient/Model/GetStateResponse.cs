/* 
 * TextMagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetStateResponse
    /// </summary>
    [DataContract]
    public partial class GetStateResponse :  IEquatable<GetStateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStateResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetStateResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStateResponse" /> class.
        /// </summary>
        /// <param name="systemCacheClear">systemCacheClear (required).</param>
        /// <param name="systemExit">systemExit (required).</param>
        /// <param name="systemAlert">systemAlert (required).</param>
        /// <param name="systemAccountStateChanged">systemAccountStateChanged (required).</param>
        /// <param name="systemAccountClosed">systemAccountClosed (required).</param>
        /// <param name="systemAccountAdditionalFields">systemAccountAdditionalFields (required).</param>
        /// <param name="systemAccountPermissionsChanged">systemAccountPermissionsChanged (required).</param>
        /// <param name="userBalanceChanged">userBalanceChanged (required).</param>
        /// <param name="messageDeleted">messageDeleted (required).</param>
        /// <param name="messageIncoming">messageIncoming (required).</param>
        /// <param name="messageIncomingDeleted">messageIncomingDeleted (required).</param>
        /// <param name="messageStateChanged">messageStateChanged (required).</param>
        /// <param name="messageBulkEnd">messageBulkEnd (required).</param>
        /// <param name="messageWipeEnd">messageWipeEnd (required).</param>
        /// <param name="messageSent">messageSent (required).</param>
        /// <param name="messageSessionDeleted">messageSessionDeleted (required).</param>
        /// <param name="messageCacheClear">messageCacheClear (required).</param>
        /// <param name="messageIncomingCacheClear">messageIncomingCacheClear (required).</param>
        /// <param name="messageScheduleAdded">messageScheduleAdded (required).</param>
        /// <param name="messageScheduleStateChanged">messageScheduleStateChanged (required).</param>
        /// <param name="messageScheduleDeleted">messageScheduleDeleted (required).</param>
        /// <param name="messageScheduleNotSentStateChanged">messageScheduleNotSentStateChanged (required).</param>
        /// <param name="messageScheduleCacheClear">messageScheduleCacheClear (required).</param>
        /// <param name="messageTemplateCacheClear">messageTemplateCacheClear (required).</param>
        /// <param name="callFinished">callFinished (required).</param>
        /// <param name="chatCreated">chatCreated (required).</param>
        /// <param name="chatMarkedAsRead">chatMarkedAsRead (required).</param>
        /// <param name="chatMuted">chatMuted (required).</param>
        /// <param name="chatUnmuted">chatUnmuted (required).</param>
        /// <param name="chatPinned">chatPinned (required).</param>
        /// <param name="chatUnpinned">chatUnpinned (required).</param>
        /// <param name="chatDeleted">chatDeleted (required).</param>
        /// <param name="chatClosed">chatClosed (required).</param>
        /// <param name="chatReopened">chatReopened (required).</param>
        /// <param name="chatCacheClear">chatCacheClear (required).</param>
        /// <param name="chatRead">chatRead (required).</param>
        /// <param name="chatUnread">chatUnread (required).</param>
        /// <param name="contactAdded">contactAdded (required).</param>
        /// <param name="contactDeleted">contactDeleted (required).</param>
        /// <param name="contactStateChanged">contactStateChanged (required).</param>
        /// <param name="listAdded">listAdded (required).</param>
        /// <param name="listDeleted">listDeleted (required).</param>
        /// <param name="listStateChanged">listStateChanged (required).</param>
        /// <param name="contactWipeEnd">contactWipeEnd (required).</param>
        /// <param name="contactImportEnd">contactImportEnd (required).</param>
        /// <param name="contactCacheClear">contactCacheClear (required).</param>
        /// <param name="listCacheClear">listCacheClear (required).</param>
        /// <param name="customFieldsCacheClear">customFieldsCacheClear (required).</param>
        /// <param name="progressCarrierBulkLookup">progressCarrierBulkLookup (required).</param>
        /// <param name="progressEmailBulkLookup">progressEmailBulkLookup (required).</param>
        /// <param name="progressSubAccountBulkImport">progressSubAccountBulkImport (required).</param>
        /// <param name="progressContactBulkImport">progressContactBulkImport (required).</param>
        /// <param name="forceRefreshWebApp">forceRefreshWebApp (required).</param>
        /// <param name="chatSenderSettingsChanged">chatSenderSettingsChanged (required).</param>
        /// <param name="countrySenderSettingsChanged">countrySenderSettingsChanged (required).</param>
        /// <param name="chatSummaryChunk">chatSummaryChunk (required).</param>
        /// <param name="chatWaysToReplyChunk">chatWaysToReplyChunk (required).</param>
        /// <param name="chatSuggestedReplyChunk">chatSuggestedReplyChunk (required).</param>
        public GetStateResponse(int? systemCacheClear = default(int?), int? systemExit = default(int?), int? systemAlert = default(int?), int? systemAccountStateChanged = default(int?), int? systemAccountClosed = default(int?), int? systemAccountAdditionalFields = default(int?), int? systemAccountPermissionsChanged = default(int?), int? userBalanceChanged = default(int?), int? messageDeleted = default(int?), int? messageIncoming = default(int?), int? messageIncomingDeleted = default(int?), int? messageStateChanged = default(int?), int? messageBulkEnd = default(int?), int? messageWipeEnd = default(int?), int? messageSent = default(int?), int? messageSessionDeleted = default(int?), int? messageCacheClear = default(int?), int? messageIncomingCacheClear = default(int?), int? messageScheduleAdded = default(int?), int? messageScheduleStateChanged = default(int?), int? messageScheduleDeleted = default(int?), int? messageScheduleNotSentStateChanged = default(int?), int? messageScheduleCacheClear = default(int?), int? messageTemplateCacheClear = default(int?), int? callFinished = default(int?), int? chatCreated = default(int?), int? chatMarkedAsRead = default(int?), int? chatMuted = default(int?), int? chatUnmuted = default(int?), int? chatPinned = default(int?), int? chatUnpinned = default(int?), int? chatDeleted = default(int?), int? chatClosed = default(int?), int? chatReopened = default(int?), int? chatCacheClear = default(int?), int? chatRead = default(int?), int? chatUnread = default(int?), int? contactAdded = default(int?), int? contactDeleted = default(int?), int? contactStateChanged = default(int?), int? listAdded = default(int?), int? listDeleted = default(int?), int? listStateChanged = default(int?), int? contactWipeEnd = default(int?), int? contactImportEnd = default(int?), int? contactCacheClear = default(int?), int? listCacheClear = default(int?), int? customFieldsCacheClear = default(int?), int? progressCarrierBulkLookup = default(int?), int? progressEmailBulkLookup = default(int?), int? progressSubAccountBulkImport = default(int?), int? progressContactBulkImport = default(int?), int? forceRefreshWebApp = default(int?), int? chatSenderSettingsChanged = default(int?), int? countrySenderSettingsChanged = default(int?), int? chatSummaryChunk = default(int?), int? chatWaysToReplyChunk = default(int?), int? chatSuggestedReplyChunk = default(int?))
        {
            // to ensure "systemCacheClear" is required (not null)
            if (systemCacheClear == null)
            {
                throw new InvalidDataException("systemCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemCacheClear = systemCacheClear;
            }
            // to ensure "systemExit" is required (not null)
            if (systemExit == null)
            {
                throw new InvalidDataException("systemExit is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemExit = systemExit;
            }
            // to ensure "systemAlert" is required (not null)
            if (systemAlert == null)
            {
                throw new InvalidDataException("systemAlert is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemAlert = systemAlert;
            }
            // to ensure "systemAccountStateChanged" is required (not null)
            if (systemAccountStateChanged == null)
            {
                throw new InvalidDataException("systemAccountStateChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemAccountStateChanged = systemAccountStateChanged;
            }
            // to ensure "systemAccountClosed" is required (not null)
            if (systemAccountClosed == null)
            {
                throw new InvalidDataException("systemAccountClosed is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemAccountClosed = systemAccountClosed;
            }
            // to ensure "systemAccountAdditionalFields" is required (not null)
            if (systemAccountAdditionalFields == null)
            {
                throw new InvalidDataException("systemAccountAdditionalFields is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemAccountAdditionalFields = systemAccountAdditionalFields;
            }
            // to ensure "systemAccountPermissionsChanged" is required (not null)
            if (systemAccountPermissionsChanged == null)
            {
                throw new InvalidDataException("systemAccountPermissionsChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.SystemAccountPermissionsChanged = systemAccountPermissionsChanged;
            }
            // to ensure "userBalanceChanged" is required (not null)
            if (userBalanceChanged == null)
            {
                throw new InvalidDataException("userBalanceChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.UserBalanceChanged = userBalanceChanged;
            }
            // to ensure "messageDeleted" is required (not null)
            if (messageDeleted == null)
            {
                throw new InvalidDataException("messageDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageDeleted = messageDeleted;
            }
            // to ensure "messageIncoming" is required (not null)
            if (messageIncoming == null)
            {
                throw new InvalidDataException("messageIncoming is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageIncoming = messageIncoming;
            }
            // to ensure "messageIncomingDeleted" is required (not null)
            if (messageIncomingDeleted == null)
            {
                throw new InvalidDataException("messageIncomingDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageIncomingDeleted = messageIncomingDeleted;
            }
            // to ensure "messageStateChanged" is required (not null)
            if (messageStateChanged == null)
            {
                throw new InvalidDataException("messageStateChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageStateChanged = messageStateChanged;
            }
            // to ensure "messageBulkEnd" is required (not null)
            if (messageBulkEnd == null)
            {
                throw new InvalidDataException("messageBulkEnd is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageBulkEnd = messageBulkEnd;
            }
            // to ensure "messageWipeEnd" is required (not null)
            if (messageWipeEnd == null)
            {
                throw new InvalidDataException("messageWipeEnd is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageWipeEnd = messageWipeEnd;
            }
            // to ensure "messageSent" is required (not null)
            if (messageSent == null)
            {
                throw new InvalidDataException("messageSent is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageSent = messageSent;
            }
            // to ensure "messageSessionDeleted" is required (not null)
            if (messageSessionDeleted == null)
            {
                throw new InvalidDataException("messageSessionDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageSessionDeleted = messageSessionDeleted;
            }
            // to ensure "messageCacheClear" is required (not null)
            if (messageCacheClear == null)
            {
                throw new InvalidDataException("messageCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageCacheClear = messageCacheClear;
            }
            // to ensure "messageIncomingCacheClear" is required (not null)
            if (messageIncomingCacheClear == null)
            {
                throw new InvalidDataException("messageIncomingCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageIncomingCacheClear = messageIncomingCacheClear;
            }
            // to ensure "messageScheduleAdded" is required (not null)
            if (messageScheduleAdded == null)
            {
                throw new InvalidDataException("messageScheduleAdded is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageScheduleAdded = messageScheduleAdded;
            }
            // to ensure "messageScheduleStateChanged" is required (not null)
            if (messageScheduleStateChanged == null)
            {
                throw new InvalidDataException("messageScheduleStateChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageScheduleStateChanged = messageScheduleStateChanged;
            }
            // to ensure "messageScheduleDeleted" is required (not null)
            if (messageScheduleDeleted == null)
            {
                throw new InvalidDataException("messageScheduleDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageScheduleDeleted = messageScheduleDeleted;
            }
            // to ensure "messageScheduleNotSentStateChanged" is required (not null)
            if (messageScheduleNotSentStateChanged == null)
            {
                throw new InvalidDataException("messageScheduleNotSentStateChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageScheduleNotSentStateChanged = messageScheduleNotSentStateChanged;
            }
            // to ensure "messageScheduleCacheClear" is required (not null)
            if (messageScheduleCacheClear == null)
            {
                throw new InvalidDataException("messageScheduleCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageScheduleCacheClear = messageScheduleCacheClear;
            }
            // to ensure "messageTemplateCacheClear" is required (not null)
            if (messageTemplateCacheClear == null)
            {
                throw new InvalidDataException("messageTemplateCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.MessageTemplateCacheClear = messageTemplateCacheClear;
            }
            // to ensure "callFinished" is required (not null)
            if (callFinished == null)
            {
                throw new InvalidDataException("callFinished is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.CallFinished = callFinished;
            }
            // to ensure "chatCreated" is required (not null)
            if (chatCreated == null)
            {
                throw new InvalidDataException("chatCreated is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatCreated = chatCreated;
            }
            // to ensure "chatMarkedAsRead" is required (not null)
            if (chatMarkedAsRead == null)
            {
                throw new InvalidDataException("chatMarkedAsRead is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatMarkedAsRead = chatMarkedAsRead;
            }
            // to ensure "chatMuted" is required (not null)
            if (chatMuted == null)
            {
                throw new InvalidDataException("chatMuted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatMuted = chatMuted;
            }
            // to ensure "chatUnmuted" is required (not null)
            if (chatUnmuted == null)
            {
                throw new InvalidDataException("chatUnmuted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatUnmuted = chatUnmuted;
            }
            // to ensure "chatPinned" is required (not null)
            if (chatPinned == null)
            {
                throw new InvalidDataException("chatPinned is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatPinned = chatPinned;
            }
            // to ensure "chatUnpinned" is required (not null)
            if (chatUnpinned == null)
            {
                throw new InvalidDataException("chatUnpinned is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatUnpinned = chatUnpinned;
            }
            // to ensure "chatDeleted" is required (not null)
            if (chatDeleted == null)
            {
                throw new InvalidDataException("chatDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatDeleted = chatDeleted;
            }
            // to ensure "chatClosed" is required (not null)
            if (chatClosed == null)
            {
                throw new InvalidDataException("chatClosed is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatClosed = chatClosed;
            }
            // to ensure "chatReopened" is required (not null)
            if (chatReopened == null)
            {
                throw new InvalidDataException("chatReopened is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatReopened = chatReopened;
            }
            // to ensure "chatCacheClear" is required (not null)
            if (chatCacheClear == null)
            {
                throw new InvalidDataException("chatCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatCacheClear = chatCacheClear;
            }
            // to ensure "chatRead" is required (not null)
            if (chatRead == null)
            {
                throw new InvalidDataException("chatRead is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatRead = chatRead;
            }
            // to ensure "chatUnread" is required (not null)
            if (chatUnread == null)
            {
                throw new InvalidDataException("chatUnread is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatUnread = chatUnread;
            }
            // to ensure "contactAdded" is required (not null)
            if (contactAdded == null)
            {
                throw new InvalidDataException("contactAdded is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ContactAdded = contactAdded;
            }
            // to ensure "contactDeleted" is required (not null)
            if (contactDeleted == null)
            {
                throw new InvalidDataException("contactDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ContactDeleted = contactDeleted;
            }
            // to ensure "contactStateChanged" is required (not null)
            if (contactStateChanged == null)
            {
                throw new InvalidDataException("contactStateChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ContactStateChanged = contactStateChanged;
            }
            // to ensure "listAdded" is required (not null)
            if (listAdded == null)
            {
                throw new InvalidDataException("listAdded is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ListAdded = listAdded;
            }
            // to ensure "listDeleted" is required (not null)
            if (listDeleted == null)
            {
                throw new InvalidDataException("listDeleted is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ListDeleted = listDeleted;
            }
            // to ensure "listStateChanged" is required (not null)
            if (listStateChanged == null)
            {
                throw new InvalidDataException("listStateChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ListStateChanged = listStateChanged;
            }
            // to ensure "contactWipeEnd" is required (not null)
            if (contactWipeEnd == null)
            {
                throw new InvalidDataException("contactWipeEnd is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ContactWipeEnd = contactWipeEnd;
            }
            // to ensure "contactImportEnd" is required (not null)
            if (contactImportEnd == null)
            {
                throw new InvalidDataException("contactImportEnd is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ContactImportEnd = contactImportEnd;
            }
            // to ensure "contactCacheClear" is required (not null)
            if (contactCacheClear == null)
            {
                throw new InvalidDataException("contactCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ContactCacheClear = contactCacheClear;
            }
            // to ensure "listCacheClear" is required (not null)
            if (listCacheClear == null)
            {
                throw new InvalidDataException("listCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ListCacheClear = listCacheClear;
            }
            // to ensure "customFieldsCacheClear" is required (not null)
            if (customFieldsCacheClear == null)
            {
                throw new InvalidDataException("customFieldsCacheClear is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.CustomFieldsCacheClear = customFieldsCacheClear;
            }
            // to ensure "progressCarrierBulkLookup" is required (not null)
            if (progressCarrierBulkLookup == null)
            {
                throw new InvalidDataException("progressCarrierBulkLookup is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ProgressCarrierBulkLookup = progressCarrierBulkLookup;
            }
            // to ensure "progressEmailBulkLookup" is required (not null)
            if (progressEmailBulkLookup == null)
            {
                throw new InvalidDataException("progressEmailBulkLookup is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ProgressEmailBulkLookup = progressEmailBulkLookup;
            }
            // to ensure "progressSubAccountBulkImport" is required (not null)
            if (progressSubAccountBulkImport == null)
            {
                throw new InvalidDataException("progressSubAccountBulkImport is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ProgressSubAccountBulkImport = progressSubAccountBulkImport;
            }
            // to ensure "progressContactBulkImport" is required (not null)
            if (progressContactBulkImport == null)
            {
                throw new InvalidDataException("progressContactBulkImport is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ProgressContactBulkImport = progressContactBulkImport;
            }
            // to ensure "forceRefreshWebApp" is required (not null)
            if (forceRefreshWebApp == null)
            {
                throw new InvalidDataException("forceRefreshWebApp is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ForceRefreshWebApp = forceRefreshWebApp;
            }
            // to ensure "chatSenderSettingsChanged" is required (not null)
            if (chatSenderSettingsChanged == null)
            {
                throw new InvalidDataException("chatSenderSettingsChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatSenderSettingsChanged = chatSenderSettingsChanged;
            }
            // to ensure "countrySenderSettingsChanged" is required (not null)
            if (countrySenderSettingsChanged == null)
            {
                throw new InvalidDataException("countrySenderSettingsChanged is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.CountrySenderSettingsChanged = countrySenderSettingsChanged;
            }
            // to ensure "chatSummaryChunk" is required (not null)
            if (chatSummaryChunk == null)
            {
                throw new InvalidDataException("chatSummaryChunk is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatSummaryChunk = chatSummaryChunk;
            }
            // to ensure "chatWaysToReplyChunk" is required (not null)
            if (chatWaysToReplyChunk == null)
            {
                throw new InvalidDataException("chatWaysToReplyChunk is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatWaysToReplyChunk = chatWaysToReplyChunk;
            }
            // to ensure "chatSuggestedReplyChunk" is required (not null)
            if (chatSuggestedReplyChunk == null)
            {
                throw new InvalidDataException("chatSuggestedReplyChunk is a required property for GetStateResponse and cannot be null");
            }
            else
            {
                this.ChatSuggestedReplyChunk = chatSuggestedReplyChunk;
            }
        }
        
        /// <summary>
        /// Gets or Sets SystemCacheClear
        /// </summary>
        [DataMember(Name="systemCacheClear", EmitDefaultValue=false)]
        public int? SystemCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets SystemExit
        /// </summary>
        [DataMember(Name="systemExit", EmitDefaultValue=false)]
        public int? SystemExit { get; set; }

        /// <summary>
        /// Gets or Sets SystemAlert
        /// </summary>
        [DataMember(Name="systemAlert", EmitDefaultValue=false)]
        public int? SystemAlert { get; set; }

        /// <summary>
        /// Gets or Sets SystemAccountStateChanged
        /// </summary>
        [DataMember(Name="systemAccountStateChanged", EmitDefaultValue=false)]
        public int? SystemAccountStateChanged { get; set; }

        /// <summary>
        /// Gets or Sets SystemAccountClosed
        /// </summary>
        [DataMember(Name="systemAccountClosed", EmitDefaultValue=false)]
        public int? SystemAccountClosed { get; set; }

        /// <summary>
        /// Gets or Sets SystemAccountAdditionalFields
        /// </summary>
        [DataMember(Name="systemAccountAdditionalFields", EmitDefaultValue=false)]
        public int? SystemAccountAdditionalFields { get; set; }

        /// <summary>
        /// Gets or Sets SystemAccountPermissionsChanged
        /// </summary>
        [DataMember(Name="systemAccountPermissionsChanged", EmitDefaultValue=false)]
        public int? SystemAccountPermissionsChanged { get; set; }

        /// <summary>
        /// Gets or Sets UserBalanceChanged
        /// </summary>
        [DataMember(Name="userBalanceChanged", EmitDefaultValue=false)]
        public int? UserBalanceChanged { get; set; }

        /// <summary>
        /// Gets or Sets MessageDeleted
        /// </summary>
        [DataMember(Name="messageDeleted", EmitDefaultValue=false)]
        public int? MessageDeleted { get; set; }

        /// <summary>
        /// Gets or Sets MessageIncoming
        /// </summary>
        [DataMember(Name="messageIncoming", EmitDefaultValue=false)]
        public int? MessageIncoming { get; set; }

        /// <summary>
        /// Gets or Sets MessageIncomingDeleted
        /// </summary>
        [DataMember(Name="messageIncomingDeleted", EmitDefaultValue=false)]
        public int? MessageIncomingDeleted { get; set; }

        /// <summary>
        /// Gets or Sets MessageStateChanged
        /// </summary>
        [DataMember(Name="messageStateChanged", EmitDefaultValue=false)]
        public int? MessageStateChanged { get; set; }

        /// <summary>
        /// Gets or Sets MessageBulkEnd
        /// </summary>
        [DataMember(Name="messageBulkEnd", EmitDefaultValue=false)]
        public int? MessageBulkEnd { get; set; }

        /// <summary>
        /// Gets or Sets MessageWipeEnd
        /// </summary>
        [DataMember(Name="messageWipeEnd", EmitDefaultValue=false)]
        public int? MessageWipeEnd { get; set; }

        /// <summary>
        /// Gets or Sets MessageSent
        /// </summary>
        [DataMember(Name="messageSent", EmitDefaultValue=false)]
        public int? MessageSent { get; set; }

        /// <summary>
        /// Gets or Sets MessageSessionDeleted
        /// </summary>
        [DataMember(Name="messageSessionDeleted", EmitDefaultValue=false)]
        public int? MessageSessionDeleted { get; set; }

        /// <summary>
        /// Gets or Sets MessageCacheClear
        /// </summary>
        [DataMember(Name="messageCacheClear", EmitDefaultValue=false)]
        public int? MessageCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets MessageIncomingCacheClear
        /// </summary>
        [DataMember(Name="messageIncomingCacheClear", EmitDefaultValue=false)]
        public int? MessageIncomingCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets MessageScheduleAdded
        /// </summary>
        [DataMember(Name="messageScheduleAdded", EmitDefaultValue=false)]
        public int? MessageScheduleAdded { get; set; }

        /// <summary>
        /// Gets or Sets MessageScheduleStateChanged
        /// </summary>
        [DataMember(Name="messageScheduleStateChanged", EmitDefaultValue=false)]
        public int? MessageScheduleStateChanged { get; set; }

        /// <summary>
        /// Gets or Sets MessageScheduleDeleted
        /// </summary>
        [DataMember(Name="messageScheduleDeleted", EmitDefaultValue=false)]
        public int? MessageScheduleDeleted { get; set; }

        /// <summary>
        /// Gets or Sets MessageScheduleNotSentStateChanged
        /// </summary>
        [DataMember(Name="messageScheduleNotSentStateChanged", EmitDefaultValue=false)]
        public int? MessageScheduleNotSentStateChanged { get; set; }

        /// <summary>
        /// Gets or Sets MessageScheduleCacheClear
        /// </summary>
        [DataMember(Name="messageScheduleCacheClear", EmitDefaultValue=false)]
        public int? MessageScheduleCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets MessageTemplateCacheClear
        /// </summary>
        [DataMember(Name="messageTemplateCacheClear", EmitDefaultValue=false)]
        public int? MessageTemplateCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets CallFinished
        /// </summary>
        [DataMember(Name="callFinished", EmitDefaultValue=false)]
        public int? CallFinished { get; set; }

        /// <summary>
        /// Gets or Sets ChatCreated
        /// </summary>
        [DataMember(Name="chatCreated", EmitDefaultValue=false)]
        public int? ChatCreated { get; set; }

        /// <summary>
        /// Gets or Sets ChatMarkedAsRead
        /// </summary>
        [DataMember(Name="chatMarkedAsRead", EmitDefaultValue=false)]
        public int? ChatMarkedAsRead { get; set; }

        /// <summary>
        /// Gets or Sets ChatMuted
        /// </summary>
        [DataMember(Name="chatMuted", EmitDefaultValue=false)]
        public int? ChatMuted { get; set; }

        /// <summary>
        /// Gets or Sets ChatUnmuted
        /// </summary>
        [DataMember(Name="chatUnmuted", EmitDefaultValue=false)]
        public int? ChatUnmuted { get; set; }

        /// <summary>
        /// Gets or Sets ChatPinned
        /// </summary>
        [DataMember(Name="chatPinned", EmitDefaultValue=false)]
        public int? ChatPinned { get; set; }

        /// <summary>
        /// Gets or Sets ChatUnpinned
        /// </summary>
        [DataMember(Name="chatUnpinned", EmitDefaultValue=false)]
        public int? ChatUnpinned { get; set; }

        /// <summary>
        /// Gets or Sets ChatDeleted
        /// </summary>
        [DataMember(Name="chatDeleted", EmitDefaultValue=false)]
        public int? ChatDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ChatClosed
        /// </summary>
        [DataMember(Name="chatClosed", EmitDefaultValue=false)]
        public int? ChatClosed { get; set; }

        /// <summary>
        /// Gets or Sets ChatReopened
        /// </summary>
        [DataMember(Name="chatReopened", EmitDefaultValue=false)]
        public int? ChatReopened { get; set; }

        /// <summary>
        /// Gets or Sets ChatCacheClear
        /// </summary>
        [DataMember(Name="chatCacheClear", EmitDefaultValue=false)]
        public int? ChatCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets ChatRead
        /// </summary>
        [DataMember(Name="chatRead", EmitDefaultValue=false)]
        public int? ChatRead { get; set; }

        /// <summary>
        /// Gets or Sets ChatUnread
        /// </summary>
        [DataMember(Name="chatUnread", EmitDefaultValue=false)]
        public int? ChatUnread { get; set; }

        /// <summary>
        /// Gets or Sets ContactAdded
        /// </summary>
        [DataMember(Name="contactAdded", EmitDefaultValue=false)]
        public int? ContactAdded { get; set; }

        /// <summary>
        /// Gets or Sets ContactDeleted
        /// </summary>
        [DataMember(Name="contactDeleted", EmitDefaultValue=false)]
        public int? ContactDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ContactStateChanged
        /// </summary>
        [DataMember(Name="contactStateChanged", EmitDefaultValue=false)]
        public int? ContactStateChanged { get; set; }

        /// <summary>
        /// Gets or Sets ListAdded
        /// </summary>
        [DataMember(Name="listAdded", EmitDefaultValue=false)]
        public int? ListAdded { get; set; }

        /// <summary>
        /// Gets or Sets ListDeleted
        /// </summary>
        [DataMember(Name="listDeleted", EmitDefaultValue=false)]
        public int? ListDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ListStateChanged
        /// </summary>
        [DataMember(Name="listStateChanged", EmitDefaultValue=false)]
        public int? ListStateChanged { get; set; }

        /// <summary>
        /// Gets or Sets ContactWipeEnd
        /// </summary>
        [DataMember(Name="contactWipeEnd", EmitDefaultValue=false)]
        public int? ContactWipeEnd { get; set; }

        /// <summary>
        /// Gets or Sets ContactImportEnd
        /// </summary>
        [DataMember(Name="contactImportEnd", EmitDefaultValue=false)]
        public int? ContactImportEnd { get; set; }

        /// <summary>
        /// Gets or Sets ContactCacheClear
        /// </summary>
        [DataMember(Name="contactCacheClear", EmitDefaultValue=false)]
        public int? ContactCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets ListCacheClear
        /// </summary>
        [DataMember(Name="listCacheClear", EmitDefaultValue=false)]
        public int? ListCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets CustomFieldsCacheClear
        /// </summary>
        [DataMember(Name="customFieldsCacheClear", EmitDefaultValue=false)]
        public int? CustomFieldsCacheClear { get; set; }

        /// <summary>
        /// Gets or Sets ProgressCarrierBulkLookup
        /// </summary>
        [DataMember(Name="progressCarrierBulkLookup", EmitDefaultValue=false)]
        public int? ProgressCarrierBulkLookup { get; set; }

        /// <summary>
        /// Gets or Sets ProgressEmailBulkLookup
        /// </summary>
        [DataMember(Name="progressEmailBulkLookup", EmitDefaultValue=false)]
        public int? ProgressEmailBulkLookup { get; set; }

        /// <summary>
        /// Gets or Sets ProgressSubAccountBulkImport
        /// </summary>
        [DataMember(Name="progressSubAccountBulkImport", EmitDefaultValue=false)]
        public int? ProgressSubAccountBulkImport { get; set; }

        /// <summary>
        /// Gets or Sets ProgressContactBulkImport
        /// </summary>
        [DataMember(Name="progressContactBulkImport", EmitDefaultValue=false)]
        public int? ProgressContactBulkImport { get; set; }

        /// <summary>
        /// Gets or Sets ForceRefreshWebApp
        /// </summary>
        [DataMember(Name="forceRefreshWebApp", EmitDefaultValue=false)]
        public int? ForceRefreshWebApp { get; set; }

        /// <summary>
        /// Gets or Sets ChatSenderSettingsChanged
        /// </summary>
        [DataMember(Name="chatSenderSettingsChanged", EmitDefaultValue=false)]
        public int? ChatSenderSettingsChanged { get; set; }

        /// <summary>
        /// Gets or Sets CountrySenderSettingsChanged
        /// </summary>
        [DataMember(Name="countrySenderSettingsChanged", EmitDefaultValue=false)]
        public int? CountrySenderSettingsChanged { get; set; }

        /// <summary>
        /// Gets or Sets ChatSummaryChunk
        /// </summary>
        [DataMember(Name="chatSummaryChunk", EmitDefaultValue=false)]
        public int? ChatSummaryChunk { get; set; }

        /// <summary>
        /// Gets or Sets ChatWaysToReplyChunk
        /// </summary>
        [DataMember(Name="chatWaysToReplyChunk", EmitDefaultValue=false)]
        public int? ChatWaysToReplyChunk { get; set; }

        /// <summary>
        /// Gets or Sets ChatSuggestedReplyChunk
        /// </summary>
        [DataMember(Name="chatSuggestedReplyChunk", EmitDefaultValue=false)]
        public int? ChatSuggestedReplyChunk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetStateResponse {\n");
            sb.Append("  SystemCacheClear: ").Append(SystemCacheClear).Append("\n");
            sb.Append("  SystemExit: ").Append(SystemExit).Append("\n");
            sb.Append("  SystemAlert: ").Append(SystemAlert).Append("\n");
            sb.Append("  SystemAccountStateChanged: ").Append(SystemAccountStateChanged).Append("\n");
            sb.Append("  SystemAccountClosed: ").Append(SystemAccountClosed).Append("\n");
            sb.Append("  SystemAccountAdditionalFields: ").Append(SystemAccountAdditionalFields).Append("\n");
            sb.Append("  SystemAccountPermissionsChanged: ").Append(SystemAccountPermissionsChanged).Append("\n");
            sb.Append("  UserBalanceChanged: ").Append(UserBalanceChanged).Append("\n");
            sb.Append("  MessageDeleted: ").Append(MessageDeleted).Append("\n");
            sb.Append("  MessageIncoming: ").Append(MessageIncoming).Append("\n");
            sb.Append("  MessageIncomingDeleted: ").Append(MessageIncomingDeleted).Append("\n");
            sb.Append("  MessageStateChanged: ").Append(MessageStateChanged).Append("\n");
            sb.Append("  MessageBulkEnd: ").Append(MessageBulkEnd).Append("\n");
            sb.Append("  MessageWipeEnd: ").Append(MessageWipeEnd).Append("\n");
            sb.Append("  MessageSent: ").Append(MessageSent).Append("\n");
            sb.Append("  MessageSessionDeleted: ").Append(MessageSessionDeleted).Append("\n");
            sb.Append("  MessageCacheClear: ").Append(MessageCacheClear).Append("\n");
            sb.Append("  MessageIncomingCacheClear: ").Append(MessageIncomingCacheClear).Append("\n");
            sb.Append("  MessageScheduleAdded: ").Append(MessageScheduleAdded).Append("\n");
            sb.Append("  MessageScheduleStateChanged: ").Append(MessageScheduleStateChanged).Append("\n");
            sb.Append("  MessageScheduleDeleted: ").Append(MessageScheduleDeleted).Append("\n");
            sb.Append("  MessageScheduleNotSentStateChanged: ").Append(MessageScheduleNotSentStateChanged).Append("\n");
            sb.Append("  MessageScheduleCacheClear: ").Append(MessageScheduleCacheClear).Append("\n");
            sb.Append("  MessageTemplateCacheClear: ").Append(MessageTemplateCacheClear).Append("\n");
            sb.Append("  CallFinished: ").Append(CallFinished).Append("\n");
            sb.Append("  ChatCreated: ").Append(ChatCreated).Append("\n");
            sb.Append("  ChatMarkedAsRead: ").Append(ChatMarkedAsRead).Append("\n");
            sb.Append("  ChatMuted: ").Append(ChatMuted).Append("\n");
            sb.Append("  ChatUnmuted: ").Append(ChatUnmuted).Append("\n");
            sb.Append("  ChatPinned: ").Append(ChatPinned).Append("\n");
            sb.Append("  ChatUnpinned: ").Append(ChatUnpinned).Append("\n");
            sb.Append("  ChatDeleted: ").Append(ChatDeleted).Append("\n");
            sb.Append("  ChatClosed: ").Append(ChatClosed).Append("\n");
            sb.Append("  ChatReopened: ").Append(ChatReopened).Append("\n");
            sb.Append("  ChatCacheClear: ").Append(ChatCacheClear).Append("\n");
            sb.Append("  ChatRead: ").Append(ChatRead).Append("\n");
            sb.Append("  ChatUnread: ").Append(ChatUnread).Append("\n");
            sb.Append("  ContactAdded: ").Append(ContactAdded).Append("\n");
            sb.Append("  ContactDeleted: ").Append(ContactDeleted).Append("\n");
            sb.Append("  ContactStateChanged: ").Append(ContactStateChanged).Append("\n");
            sb.Append("  ListAdded: ").Append(ListAdded).Append("\n");
            sb.Append("  ListDeleted: ").Append(ListDeleted).Append("\n");
            sb.Append("  ListStateChanged: ").Append(ListStateChanged).Append("\n");
            sb.Append("  ContactWipeEnd: ").Append(ContactWipeEnd).Append("\n");
            sb.Append("  ContactImportEnd: ").Append(ContactImportEnd).Append("\n");
            sb.Append("  ContactCacheClear: ").Append(ContactCacheClear).Append("\n");
            sb.Append("  ListCacheClear: ").Append(ListCacheClear).Append("\n");
            sb.Append("  CustomFieldsCacheClear: ").Append(CustomFieldsCacheClear).Append("\n");
            sb.Append("  ProgressCarrierBulkLookup: ").Append(ProgressCarrierBulkLookup).Append("\n");
            sb.Append("  ProgressEmailBulkLookup: ").Append(ProgressEmailBulkLookup).Append("\n");
            sb.Append("  ProgressSubAccountBulkImport: ").Append(ProgressSubAccountBulkImport).Append("\n");
            sb.Append("  ProgressContactBulkImport: ").Append(ProgressContactBulkImport).Append("\n");
            sb.Append("  ForceRefreshWebApp: ").Append(ForceRefreshWebApp).Append("\n");
            sb.Append("  ChatSenderSettingsChanged: ").Append(ChatSenderSettingsChanged).Append("\n");
            sb.Append("  CountrySenderSettingsChanged: ").Append(CountrySenderSettingsChanged).Append("\n");
            sb.Append("  ChatSummaryChunk: ").Append(ChatSummaryChunk).Append("\n");
            sb.Append("  ChatWaysToReplyChunk: ").Append(ChatWaysToReplyChunk).Append("\n");
            sb.Append("  ChatSuggestedReplyChunk: ").Append(ChatSuggestedReplyChunk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetStateResponse);
        }

        /// <summary>
        /// Returns true if GetStateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetStateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStateResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SystemCacheClear == input.SystemCacheClear ||
                    (this.SystemCacheClear != null &&
                    this.SystemCacheClear.Equals(input.SystemCacheClear))
                ) && 
                (
                    this.SystemExit == input.SystemExit ||
                    (this.SystemExit != null &&
                    this.SystemExit.Equals(input.SystemExit))
                ) && 
                (
                    this.SystemAlert == input.SystemAlert ||
                    (this.SystemAlert != null &&
                    this.SystemAlert.Equals(input.SystemAlert))
                ) && 
                (
                    this.SystemAccountStateChanged == input.SystemAccountStateChanged ||
                    (this.SystemAccountStateChanged != null &&
                    this.SystemAccountStateChanged.Equals(input.SystemAccountStateChanged))
                ) && 
                (
                    this.SystemAccountClosed == input.SystemAccountClosed ||
                    (this.SystemAccountClosed != null &&
                    this.SystemAccountClosed.Equals(input.SystemAccountClosed))
                ) && 
                (
                    this.SystemAccountAdditionalFields == input.SystemAccountAdditionalFields ||
                    (this.SystemAccountAdditionalFields != null &&
                    this.SystemAccountAdditionalFields.Equals(input.SystemAccountAdditionalFields))
                ) && 
                (
                    this.SystemAccountPermissionsChanged == input.SystemAccountPermissionsChanged ||
                    (this.SystemAccountPermissionsChanged != null &&
                    this.SystemAccountPermissionsChanged.Equals(input.SystemAccountPermissionsChanged))
                ) && 
                (
                    this.UserBalanceChanged == input.UserBalanceChanged ||
                    (this.UserBalanceChanged != null &&
                    this.UserBalanceChanged.Equals(input.UserBalanceChanged))
                ) && 
                (
                    this.MessageDeleted == input.MessageDeleted ||
                    (this.MessageDeleted != null &&
                    this.MessageDeleted.Equals(input.MessageDeleted))
                ) && 
                (
                    this.MessageIncoming == input.MessageIncoming ||
                    (this.MessageIncoming != null &&
                    this.MessageIncoming.Equals(input.MessageIncoming))
                ) && 
                (
                    this.MessageIncomingDeleted == input.MessageIncomingDeleted ||
                    (this.MessageIncomingDeleted != null &&
                    this.MessageIncomingDeleted.Equals(input.MessageIncomingDeleted))
                ) && 
                (
                    this.MessageStateChanged == input.MessageStateChanged ||
                    (this.MessageStateChanged != null &&
                    this.MessageStateChanged.Equals(input.MessageStateChanged))
                ) && 
                (
                    this.MessageBulkEnd == input.MessageBulkEnd ||
                    (this.MessageBulkEnd != null &&
                    this.MessageBulkEnd.Equals(input.MessageBulkEnd))
                ) && 
                (
                    this.MessageWipeEnd == input.MessageWipeEnd ||
                    (this.MessageWipeEnd != null &&
                    this.MessageWipeEnd.Equals(input.MessageWipeEnd))
                ) && 
                (
                    this.MessageSent == input.MessageSent ||
                    (this.MessageSent != null &&
                    this.MessageSent.Equals(input.MessageSent))
                ) && 
                (
                    this.MessageSessionDeleted == input.MessageSessionDeleted ||
                    (this.MessageSessionDeleted != null &&
                    this.MessageSessionDeleted.Equals(input.MessageSessionDeleted))
                ) && 
                (
                    this.MessageCacheClear == input.MessageCacheClear ||
                    (this.MessageCacheClear != null &&
                    this.MessageCacheClear.Equals(input.MessageCacheClear))
                ) && 
                (
                    this.MessageIncomingCacheClear == input.MessageIncomingCacheClear ||
                    (this.MessageIncomingCacheClear != null &&
                    this.MessageIncomingCacheClear.Equals(input.MessageIncomingCacheClear))
                ) && 
                (
                    this.MessageScheduleAdded == input.MessageScheduleAdded ||
                    (this.MessageScheduleAdded != null &&
                    this.MessageScheduleAdded.Equals(input.MessageScheduleAdded))
                ) && 
                (
                    this.MessageScheduleStateChanged == input.MessageScheduleStateChanged ||
                    (this.MessageScheduleStateChanged != null &&
                    this.MessageScheduleStateChanged.Equals(input.MessageScheduleStateChanged))
                ) && 
                (
                    this.MessageScheduleDeleted == input.MessageScheduleDeleted ||
                    (this.MessageScheduleDeleted != null &&
                    this.MessageScheduleDeleted.Equals(input.MessageScheduleDeleted))
                ) && 
                (
                    this.MessageScheduleNotSentStateChanged == input.MessageScheduleNotSentStateChanged ||
                    (this.MessageScheduleNotSentStateChanged != null &&
                    this.MessageScheduleNotSentStateChanged.Equals(input.MessageScheduleNotSentStateChanged))
                ) && 
                (
                    this.MessageScheduleCacheClear == input.MessageScheduleCacheClear ||
                    (this.MessageScheduleCacheClear != null &&
                    this.MessageScheduleCacheClear.Equals(input.MessageScheduleCacheClear))
                ) && 
                (
                    this.MessageTemplateCacheClear == input.MessageTemplateCacheClear ||
                    (this.MessageTemplateCacheClear != null &&
                    this.MessageTemplateCacheClear.Equals(input.MessageTemplateCacheClear))
                ) && 
                (
                    this.CallFinished == input.CallFinished ||
                    (this.CallFinished != null &&
                    this.CallFinished.Equals(input.CallFinished))
                ) && 
                (
                    this.ChatCreated == input.ChatCreated ||
                    (this.ChatCreated != null &&
                    this.ChatCreated.Equals(input.ChatCreated))
                ) && 
                (
                    this.ChatMarkedAsRead == input.ChatMarkedAsRead ||
                    (this.ChatMarkedAsRead != null &&
                    this.ChatMarkedAsRead.Equals(input.ChatMarkedAsRead))
                ) && 
                (
                    this.ChatMuted == input.ChatMuted ||
                    (this.ChatMuted != null &&
                    this.ChatMuted.Equals(input.ChatMuted))
                ) && 
                (
                    this.ChatUnmuted == input.ChatUnmuted ||
                    (this.ChatUnmuted != null &&
                    this.ChatUnmuted.Equals(input.ChatUnmuted))
                ) && 
                (
                    this.ChatPinned == input.ChatPinned ||
                    (this.ChatPinned != null &&
                    this.ChatPinned.Equals(input.ChatPinned))
                ) && 
                (
                    this.ChatUnpinned == input.ChatUnpinned ||
                    (this.ChatUnpinned != null &&
                    this.ChatUnpinned.Equals(input.ChatUnpinned))
                ) && 
                (
                    this.ChatDeleted == input.ChatDeleted ||
                    (this.ChatDeleted != null &&
                    this.ChatDeleted.Equals(input.ChatDeleted))
                ) && 
                (
                    this.ChatClosed == input.ChatClosed ||
                    (this.ChatClosed != null &&
                    this.ChatClosed.Equals(input.ChatClosed))
                ) && 
                (
                    this.ChatReopened == input.ChatReopened ||
                    (this.ChatReopened != null &&
                    this.ChatReopened.Equals(input.ChatReopened))
                ) && 
                (
                    this.ChatCacheClear == input.ChatCacheClear ||
                    (this.ChatCacheClear != null &&
                    this.ChatCacheClear.Equals(input.ChatCacheClear))
                ) && 
                (
                    this.ChatRead == input.ChatRead ||
                    (this.ChatRead != null &&
                    this.ChatRead.Equals(input.ChatRead))
                ) && 
                (
                    this.ChatUnread == input.ChatUnread ||
                    (this.ChatUnread != null &&
                    this.ChatUnread.Equals(input.ChatUnread))
                ) && 
                (
                    this.ContactAdded == input.ContactAdded ||
                    (this.ContactAdded != null &&
                    this.ContactAdded.Equals(input.ContactAdded))
                ) && 
                (
                    this.ContactDeleted == input.ContactDeleted ||
                    (this.ContactDeleted != null &&
                    this.ContactDeleted.Equals(input.ContactDeleted))
                ) && 
                (
                    this.ContactStateChanged == input.ContactStateChanged ||
                    (this.ContactStateChanged != null &&
                    this.ContactStateChanged.Equals(input.ContactStateChanged))
                ) && 
                (
                    this.ListAdded == input.ListAdded ||
                    (this.ListAdded != null &&
                    this.ListAdded.Equals(input.ListAdded))
                ) && 
                (
                    this.ListDeleted == input.ListDeleted ||
                    (this.ListDeleted != null &&
                    this.ListDeleted.Equals(input.ListDeleted))
                ) && 
                (
                    this.ListStateChanged == input.ListStateChanged ||
                    (this.ListStateChanged != null &&
                    this.ListStateChanged.Equals(input.ListStateChanged))
                ) && 
                (
                    this.ContactWipeEnd == input.ContactWipeEnd ||
                    (this.ContactWipeEnd != null &&
                    this.ContactWipeEnd.Equals(input.ContactWipeEnd))
                ) && 
                (
                    this.ContactImportEnd == input.ContactImportEnd ||
                    (this.ContactImportEnd != null &&
                    this.ContactImportEnd.Equals(input.ContactImportEnd))
                ) && 
                (
                    this.ContactCacheClear == input.ContactCacheClear ||
                    (this.ContactCacheClear != null &&
                    this.ContactCacheClear.Equals(input.ContactCacheClear))
                ) && 
                (
                    this.ListCacheClear == input.ListCacheClear ||
                    (this.ListCacheClear != null &&
                    this.ListCacheClear.Equals(input.ListCacheClear))
                ) && 
                (
                    this.CustomFieldsCacheClear == input.CustomFieldsCacheClear ||
                    (this.CustomFieldsCacheClear != null &&
                    this.CustomFieldsCacheClear.Equals(input.CustomFieldsCacheClear))
                ) && 
                (
                    this.ProgressCarrierBulkLookup == input.ProgressCarrierBulkLookup ||
                    (this.ProgressCarrierBulkLookup != null &&
                    this.ProgressCarrierBulkLookup.Equals(input.ProgressCarrierBulkLookup))
                ) && 
                (
                    this.ProgressEmailBulkLookup == input.ProgressEmailBulkLookup ||
                    (this.ProgressEmailBulkLookup != null &&
                    this.ProgressEmailBulkLookup.Equals(input.ProgressEmailBulkLookup))
                ) && 
                (
                    this.ProgressSubAccountBulkImport == input.ProgressSubAccountBulkImport ||
                    (this.ProgressSubAccountBulkImport != null &&
                    this.ProgressSubAccountBulkImport.Equals(input.ProgressSubAccountBulkImport))
                ) && 
                (
                    this.ProgressContactBulkImport == input.ProgressContactBulkImport ||
                    (this.ProgressContactBulkImport != null &&
                    this.ProgressContactBulkImport.Equals(input.ProgressContactBulkImport))
                ) && 
                (
                    this.ForceRefreshWebApp == input.ForceRefreshWebApp ||
                    (this.ForceRefreshWebApp != null &&
                    this.ForceRefreshWebApp.Equals(input.ForceRefreshWebApp))
                ) && 
                (
                    this.ChatSenderSettingsChanged == input.ChatSenderSettingsChanged ||
                    (this.ChatSenderSettingsChanged != null &&
                    this.ChatSenderSettingsChanged.Equals(input.ChatSenderSettingsChanged))
                ) && 
                (
                    this.CountrySenderSettingsChanged == input.CountrySenderSettingsChanged ||
                    (this.CountrySenderSettingsChanged != null &&
                    this.CountrySenderSettingsChanged.Equals(input.CountrySenderSettingsChanged))
                ) && 
                (
                    this.ChatSummaryChunk == input.ChatSummaryChunk ||
                    (this.ChatSummaryChunk != null &&
                    this.ChatSummaryChunk.Equals(input.ChatSummaryChunk))
                ) && 
                (
                    this.ChatWaysToReplyChunk == input.ChatWaysToReplyChunk ||
                    (this.ChatWaysToReplyChunk != null &&
                    this.ChatWaysToReplyChunk.Equals(input.ChatWaysToReplyChunk))
                ) && 
                (
                    this.ChatSuggestedReplyChunk == input.ChatSuggestedReplyChunk ||
                    (this.ChatSuggestedReplyChunk != null &&
                    this.ChatSuggestedReplyChunk.Equals(input.ChatSuggestedReplyChunk))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemCacheClear != null)
                    hashCode = hashCode * 59 + this.SystemCacheClear.GetHashCode();
                if (this.SystemExit != null)
                    hashCode = hashCode * 59 + this.SystemExit.GetHashCode();
                if (this.SystemAlert != null)
                    hashCode = hashCode * 59 + this.SystemAlert.GetHashCode();
                if (this.SystemAccountStateChanged != null)
                    hashCode = hashCode * 59 + this.SystemAccountStateChanged.GetHashCode();
                if (this.SystemAccountClosed != null)
                    hashCode = hashCode * 59 + this.SystemAccountClosed.GetHashCode();
                if (this.SystemAccountAdditionalFields != null)
                    hashCode = hashCode * 59 + this.SystemAccountAdditionalFields.GetHashCode();
                if (this.SystemAccountPermissionsChanged != null)
                    hashCode = hashCode * 59 + this.SystemAccountPermissionsChanged.GetHashCode();
                if (this.UserBalanceChanged != null)
                    hashCode = hashCode * 59 + this.UserBalanceChanged.GetHashCode();
                if (this.MessageDeleted != null)
                    hashCode = hashCode * 59 + this.MessageDeleted.GetHashCode();
                if (this.MessageIncoming != null)
                    hashCode = hashCode * 59 + this.MessageIncoming.GetHashCode();
                if (this.MessageIncomingDeleted != null)
                    hashCode = hashCode * 59 + this.MessageIncomingDeleted.GetHashCode();
                if (this.MessageStateChanged != null)
                    hashCode = hashCode * 59 + this.MessageStateChanged.GetHashCode();
                if (this.MessageBulkEnd != null)
                    hashCode = hashCode * 59 + this.MessageBulkEnd.GetHashCode();
                if (this.MessageWipeEnd != null)
                    hashCode = hashCode * 59 + this.MessageWipeEnd.GetHashCode();
                if (this.MessageSent != null)
                    hashCode = hashCode * 59 + this.MessageSent.GetHashCode();
                if (this.MessageSessionDeleted != null)
                    hashCode = hashCode * 59 + this.MessageSessionDeleted.GetHashCode();
                if (this.MessageCacheClear != null)
                    hashCode = hashCode * 59 + this.MessageCacheClear.GetHashCode();
                if (this.MessageIncomingCacheClear != null)
                    hashCode = hashCode * 59 + this.MessageIncomingCacheClear.GetHashCode();
                if (this.MessageScheduleAdded != null)
                    hashCode = hashCode * 59 + this.MessageScheduleAdded.GetHashCode();
                if (this.MessageScheduleStateChanged != null)
                    hashCode = hashCode * 59 + this.MessageScheduleStateChanged.GetHashCode();
                if (this.MessageScheduleDeleted != null)
                    hashCode = hashCode * 59 + this.MessageScheduleDeleted.GetHashCode();
                if (this.MessageScheduleNotSentStateChanged != null)
                    hashCode = hashCode * 59 + this.MessageScheduleNotSentStateChanged.GetHashCode();
                if (this.MessageScheduleCacheClear != null)
                    hashCode = hashCode * 59 + this.MessageScheduleCacheClear.GetHashCode();
                if (this.MessageTemplateCacheClear != null)
                    hashCode = hashCode * 59 + this.MessageTemplateCacheClear.GetHashCode();
                if (this.CallFinished != null)
                    hashCode = hashCode * 59 + this.CallFinished.GetHashCode();
                if (this.ChatCreated != null)
                    hashCode = hashCode * 59 + this.ChatCreated.GetHashCode();
                if (this.ChatMarkedAsRead != null)
                    hashCode = hashCode * 59 + this.ChatMarkedAsRead.GetHashCode();
                if (this.ChatMuted != null)
                    hashCode = hashCode * 59 + this.ChatMuted.GetHashCode();
                if (this.ChatUnmuted != null)
                    hashCode = hashCode * 59 + this.ChatUnmuted.GetHashCode();
                if (this.ChatPinned != null)
                    hashCode = hashCode * 59 + this.ChatPinned.GetHashCode();
                if (this.ChatUnpinned != null)
                    hashCode = hashCode * 59 + this.ChatUnpinned.GetHashCode();
                if (this.ChatDeleted != null)
                    hashCode = hashCode * 59 + this.ChatDeleted.GetHashCode();
                if (this.ChatClosed != null)
                    hashCode = hashCode * 59 + this.ChatClosed.GetHashCode();
                if (this.ChatReopened != null)
                    hashCode = hashCode * 59 + this.ChatReopened.GetHashCode();
                if (this.ChatCacheClear != null)
                    hashCode = hashCode * 59 + this.ChatCacheClear.GetHashCode();
                if (this.ChatRead != null)
                    hashCode = hashCode * 59 + this.ChatRead.GetHashCode();
                if (this.ChatUnread != null)
                    hashCode = hashCode * 59 + this.ChatUnread.GetHashCode();
                if (this.ContactAdded != null)
                    hashCode = hashCode * 59 + this.ContactAdded.GetHashCode();
                if (this.ContactDeleted != null)
                    hashCode = hashCode * 59 + this.ContactDeleted.GetHashCode();
                if (this.ContactStateChanged != null)
                    hashCode = hashCode * 59 + this.ContactStateChanged.GetHashCode();
                if (this.ListAdded != null)
                    hashCode = hashCode * 59 + this.ListAdded.GetHashCode();
                if (this.ListDeleted != null)
                    hashCode = hashCode * 59 + this.ListDeleted.GetHashCode();
                if (this.ListStateChanged != null)
                    hashCode = hashCode * 59 + this.ListStateChanged.GetHashCode();
                if (this.ContactWipeEnd != null)
                    hashCode = hashCode * 59 + this.ContactWipeEnd.GetHashCode();
                if (this.ContactImportEnd != null)
                    hashCode = hashCode * 59 + this.ContactImportEnd.GetHashCode();
                if (this.ContactCacheClear != null)
                    hashCode = hashCode * 59 + this.ContactCacheClear.GetHashCode();
                if (this.ListCacheClear != null)
                    hashCode = hashCode * 59 + this.ListCacheClear.GetHashCode();
                if (this.CustomFieldsCacheClear != null)
                    hashCode = hashCode * 59 + this.CustomFieldsCacheClear.GetHashCode();
                if (this.ProgressCarrierBulkLookup != null)
                    hashCode = hashCode * 59 + this.ProgressCarrierBulkLookup.GetHashCode();
                if (this.ProgressEmailBulkLookup != null)
                    hashCode = hashCode * 59 + this.ProgressEmailBulkLookup.GetHashCode();
                if (this.ProgressSubAccountBulkImport != null)
                    hashCode = hashCode * 59 + this.ProgressSubAccountBulkImport.GetHashCode();
                if (this.ProgressContactBulkImport != null)
                    hashCode = hashCode * 59 + this.ProgressContactBulkImport.GetHashCode();
                if (this.ForceRefreshWebApp != null)
                    hashCode = hashCode * 59 + this.ForceRefreshWebApp.GetHashCode();
                if (this.ChatSenderSettingsChanged != null)
                    hashCode = hashCode * 59 + this.ChatSenderSettingsChanged.GetHashCode();
                if (this.CountrySenderSettingsChanged != null)
                    hashCode = hashCode * 59 + this.CountrySenderSettingsChanged.GetHashCode();
                if (this.ChatSummaryChunk != null)
                    hashCode = hashCode * 59 + this.ChatSummaryChunk.GetHashCode();
                if (this.ChatWaysToReplyChunk != null)
                    hashCode = hashCode * 59 + this.ChatWaysToReplyChunk.GetHashCode();
                if (this.ChatSuggestedReplyChunk != null)
                    hashCode = hashCode * 59 + this.ChatSuggestedReplyChunk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
