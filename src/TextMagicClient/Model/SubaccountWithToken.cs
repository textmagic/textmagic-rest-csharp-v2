/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// SubaccountWithToken
    /// </summary>
    [DataContract]
    public partial class SubaccountWithToken :  IEquatable<SubaccountWithToken>, IValidatableObject
    {
        /// <summary>
        /// Current account status: * **A** for Active; * **T** for Trial. 
        /// </summary>
        /// <value>Current account status: * **A** for Active; * **T** for Trial. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,
            
            /// <summary>
            /// Enum T for value: T
            /// </summary>
            [EnumMember(Value = "T")]
            T = 2
        }

        /// <summary>
        /// Current account status: * **A** for Active; * **T** for Trial. 
        /// </summary>
        /// <value>Current account status: * **A** for Active; * **T** for Trial. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Type of account: *   **A** for Administrator sub-account; *   **U** for Regular User. 
        /// </summary>
        /// <value>Type of account: *   **A** for Administrator sub-account; *   **U** for Regular User. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubaccountTypeEnum
        {
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,
            
            /// <summary>
            /// Enum U for value: U
            /// </summary>
            [EnumMember(Value = "U")]
            U = 2
        }

        /// <summary>
        /// Type of account: *   **A** for Administrator sub-account; *   **U** for Regular User. 
        /// </summary>
        /// <value>Type of account: *   **A** for Administrator sub-account; *   **U** for Regular User. </value>
        [DataMember(Name="subaccountType", EmitDefaultValue=false)]
        public SubaccountTypeEnum SubaccountType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountWithToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubaccountWithToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountWithToken" /> class.
        /// </summary>
        /// <param name="id">Sub-account ID. (required).</param>
        /// <param name="username">Username. (required).</param>
        /// <param name="firstName">Account first name. (required).</param>
        /// <param name="lastName">Account last name. (required).</param>
        /// <param name="email">Account Email address. (required).</param>
        /// <param name="status">Current account status: * **A** for Active; * **T** for Trial.  (required).</param>
        /// <param name="balance">Account balance (in account currency). (required).</param>
        /// <param name="phone">Contact phone number. (required).</param>
        /// <param name="company">Account company name. (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="timezone">timezone (required).</param>
        /// <param name="subaccountType">Type of account: *   **A** for Administrator sub-account; *   **U** for Regular User.  (required).</param>
        /// <param name="emailAccepted">Does the account have a confirmed Email?. (required).</param>
        /// <param name="phoneAccepted">Does the account have a confirmed Phone Number?. (required).</param>
        /// <param name="avatar">avatar (required).</param>
        /// <param name="token">Access token of account. (required).</param>
        public SubaccountWithToken(int? id = default(int?), string username = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), StatusEnum status = default(StatusEnum), double? balance = default(double?), string phone = default(string), string company = default(string), Currency currency = default(Currency), Country country = default(Country), Timezone timezone = default(Timezone), SubaccountTypeEnum subaccountType = default(SubaccountTypeEnum), bool? emailAccepted = default(bool?), bool? phoneAccepted = default(bool?), UserImage avatar = default(UserImage), string token = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new InvalidDataException("balance is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Balance = balance;
            }
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            // to ensure "company" is required (not null)
            if (company == null)
            {
                throw new InvalidDataException("company is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Company = company;
            }
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new InvalidDataException("timezone is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Timezone = timezone;
            }
            // to ensure "subaccountType" is required (not null)
            if (subaccountType == null)
            {
                throw new InvalidDataException("subaccountType is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.SubaccountType = subaccountType;
            }
            // to ensure "emailAccepted" is required (not null)
            if (emailAccepted == null)
            {
                throw new InvalidDataException("emailAccepted is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.EmailAccepted = emailAccepted;
            }
            // to ensure "phoneAccepted" is required (not null)
            if (phoneAccepted == null)
            {
                throw new InvalidDataException("phoneAccepted is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.PhoneAccepted = phoneAccepted;
            }
            // to ensure "avatar" is required (not null)
            if (avatar == null)
            {
                throw new InvalidDataException("avatar is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Avatar = avatar;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for SubaccountWithToken and cannot be null");
            }
            else
            {
                this.Token = token;
            }
        }
        
        /// <summary>
        /// Sub-account ID.
        /// </summary>
        /// <value>Sub-account ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Username.
        /// </summary>
        /// <value>Username.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Account first name.
        /// </summary>
        /// <value>Account first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Account last name.
        /// </summary>
        /// <value>Account last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Account Email address.
        /// </summary>
        /// <value>Account Email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }


        /// <summary>
        /// Account balance (in account currency).
        /// </summary>
        /// <value>Account balance (in account currency).</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// Contact phone number.
        /// </summary>
        /// <value>Contact phone number.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Account company name.
        /// </summary>
        /// <value>Account company name.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public Timezone Timezone { get; set; }


        /// <summary>
        /// Does the account have a confirmed Email?.
        /// </summary>
        /// <value>Does the account have a confirmed Email?.</value>
        [DataMember(Name="emailAccepted", EmitDefaultValue=false)]
        public bool? EmailAccepted { get; set; }

        /// <summary>
        /// Does the account have a confirmed Phone Number?.
        /// </summary>
        /// <value>Does the account have a confirmed Phone Number?.</value>
        [DataMember(Name="phoneAccepted", EmitDefaultValue=false)]
        public bool? PhoneAccepted { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public UserImage Avatar { get; set; }

        /// <summary>
        /// Access token of account.
        /// </summary>
        /// <value>Access token of account.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubaccountWithToken {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  SubaccountType: ").Append(SubaccountType).Append("\n");
            sb.Append("  EmailAccepted: ").Append(EmailAccepted).Append("\n");
            sb.Append("  PhoneAccepted: ").Append(PhoneAccepted).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubaccountWithToken);
        }

        /// <summary>
        /// Returns true if SubaccountWithToken instances are equal
        /// </summary>
        /// <param name="input">Instance of SubaccountWithToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubaccountWithToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.SubaccountType == input.SubaccountType ||
                    (this.SubaccountType != null &&
                    this.SubaccountType.Equals(input.SubaccountType))
                ) && 
                (
                    this.EmailAccepted == input.EmailAccepted ||
                    (this.EmailAccepted != null &&
                    this.EmailAccepted.Equals(input.EmailAccepted))
                ) && 
                (
                    this.PhoneAccepted == input.PhoneAccepted ||
                    (this.PhoneAccepted != null &&
                    this.PhoneAccepted.Equals(input.PhoneAccepted))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.SubaccountType != null)
                    hashCode = hashCode * 59 + this.SubaccountType.GetHashCode();
                if (this.EmailAccepted != null)
                    hashCode = hashCode * 59 + this.EmailAccepted.GetHashCode();
                if (this.PhoneAccepted != null)
                    hashCode = hashCode * 59 + this.PhoneAccepted.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
