/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetContactImportSessionProgressResponse
    /// </summary>
    [DataContract]
    public partial class GetContactImportSessionProgressResponse :  IEquatable<GetContactImportSessionProgressResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactImportSessionProgressResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetContactImportSessionProgressResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactImportSessionProgressResponse" /> class.
        /// </summary>
        /// <param name="status">Session status: * **1** - if session has been initialized but not yet started; * **3** - if session is being processed; * **4** - if session has errors; * **5** - if session completed successfully.  (required).</param>
        /// <param name="processed">How many contacts have been imported? (required).</param>
        public GetContactImportSessionProgressResponse(int? status = default(int?), int? processed = default(int?))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for GetContactImportSessionProgressResponse and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "processed" is required (not null)
            if (processed == null)
            {
                throw new InvalidDataException("processed is a required property for GetContactImportSessionProgressResponse and cannot be null");
            }
            else
            {
                this.Processed = processed;
            }
        }
        
        /// <summary>
        /// Session status: * **1** - if session has been initialized but not yet started; * **3** - if session is being processed; * **4** - if session has errors; * **5** - if session completed successfully. 
        /// </summary>
        /// <value>Session status: * **1** - if session has been initialized but not yet started; * **3** - if session is being processed; * **4** - if session has errors; * **5** - if session completed successfully. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// How many contacts have been imported?
        /// </summary>
        /// <value>How many contacts have been imported?</value>
        [DataMember(Name="processed", EmitDefaultValue=false)]
        public int? Processed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetContactImportSessionProgressResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetContactImportSessionProgressResponse);
        }

        /// <summary>
        /// Returns true if GetContactImportSessionProgressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetContactImportSessionProgressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetContactImportSessionProgressResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Processed == input.Processed ||
                    (this.Processed != null &&
                    this.Processed.Equals(input.Processed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Processed != null)
                    hashCode = hashCode * 59 + this.Processed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
