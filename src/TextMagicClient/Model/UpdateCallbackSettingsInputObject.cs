/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// UpdateCallbackSettingsInputObject
    /// </summary>
    [DataContract]
    public partial class UpdateCallbackSettingsInputObject :  IEquatable<UpdateCallbackSettingsInputObject>, IValidatableObject
    {
        /// <summary>
        /// Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded, j - application/json
        /// </summary>
        /// <value>Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded, j - application/json</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum M for value: m
            /// </summary>
            [EnumMember(Value = "m")]
            M = 1,
            
            /// <summary>
            /// Enum U for value: u
            /// </summary>
            [EnumMember(Value = "u")]
            U = 2,
            
            /// <summary>
            /// Enum J for value: j
            /// </summary>
            [EnumMember(Value = "j")]
            J = 3
        }

        /// <summary>
        /// Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded, j - application/json
        /// </summary>
        /// <value>Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded, j - application/json</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCallbackSettingsInputObject" /> class.
        /// </summary>
        /// <param name="outUrl">This URL is used to push message delivery status updates to your application..</param>
        /// <param name="inUrl">This URL is used to push incoming SMS to your application..</param>
        /// <param name="format">Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded, j - application/json.</param>
        public UpdateCallbackSettingsInputObject(string outUrl = default(string), string inUrl = default(string), FormatEnum? format = default(FormatEnum?))
        {
            this.OutUrl = outUrl;
            this.InUrl = inUrl;
            this.Format = format;
        }
        
        /// <summary>
        /// This URL is used to push message delivery status updates to your application.
        /// </summary>
        /// <value>This URL is used to push message delivery status updates to your application.</value>
        [DataMember(Name="outUrl", EmitDefaultValue=false)]
        public string OutUrl { get; set; }

        /// <summary>
        /// This URL is used to push incoming SMS to your application.
        /// </summary>
        /// <value>This URL is used to push incoming SMS to your application.</value>
        [DataMember(Name="inUrl", EmitDefaultValue=false)]
        public string InUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCallbackSettingsInputObject {\n");
            sb.Append("  OutUrl: ").Append(OutUrl).Append("\n");
            sb.Append("  InUrl: ").Append(InUrl).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCallbackSettingsInputObject);
        }

        /// <summary>
        /// Returns true if UpdateCallbackSettingsInputObject instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCallbackSettingsInputObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCallbackSettingsInputObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutUrl == input.OutUrl ||
                    (this.OutUrl != null &&
                    this.OutUrl.Equals(input.OutUrl))
                ) && 
                (
                    this.InUrl == input.InUrl ||
                    (this.InUrl != null &&
                    this.InUrl.Equals(input.InUrl))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutUrl != null)
                    hashCode = hashCode * 59 + this.OutUrl.GetHashCode();
                if (this.InUrl != null)
                    hashCode = hashCode * 59 + this.InUrl.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
