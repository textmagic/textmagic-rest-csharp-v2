/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// PingResponse
    /// </summary>
    [DataContract]
    public partial class PingResponse :  IEquatable<PingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PingResponse" /> class.
        /// </summary>
        /// <param name="userId">Current user Id. (required).</param>
        /// <param name="ping">Pong. (required).</param>
        /// <param name="utcDateTime">Current date and time. (required).</param>
        public PingResponse(int? userId = default(int?), string ping = default(string), string utcDateTime = default(string))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for PingResponse and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "ping" is required (not null)
            if (ping == null)
            {
                throw new InvalidDataException("ping is a required property for PingResponse and cannot be null");
            }
            else
            {
                this.Ping = ping;
            }
            // to ensure "utcDateTime" is required (not null)
            if (utcDateTime == null)
            {
                throw new InvalidDataException("utcDateTime is a required property for PingResponse and cannot be null");
            }
            else
            {
                this.UtcDateTime = utcDateTime;
            }
        }
        
        /// <summary>
        /// Current user Id.
        /// </summary>
        /// <value>Current user Id.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Pong.
        /// </summary>
        /// <value>Pong.</value>
        [DataMember(Name="ping", EmitDefaultValue=false)]
        public string Ping { get; set; }

        /// <summary>
        /// Current date and time.
        /// </summary>
        /// <value>Current date and time.</value>
        [DataMember(Name="utcDateTime", EmitDefaultValue=false)]
        public string UtcDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PingResponse {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Ping: ").Append(Ping).Append("\n");
            sb.Append("  UtcDateTime: ").Append(UtcDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PingResponse);
        }

        /// <summary>
        /// Returns true if PingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Ping == input.Ping ||
                    (this.Ping != null &&
                    this.Ping.Equals(input.Ping))
                ) && 
                (
                    this.UtcDateTime == input.UtcDateTime ||
                    (this.UtcDateTime != null &&
                    this.UtcDateTime.Equals(input.UtcDateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Ping != null)
                    hashCode = hashCode * 59 + this.Ping.GetHashCode();
                if (this.UtcDateTime != null)
                    hashCode = hashCode * 59 + this.UtcDateTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
