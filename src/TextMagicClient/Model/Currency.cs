/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// Currency
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Currency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="id">The 3-letter ISO currency ID. (required).</param>
        /// <param name="unicodeSymbol">Unicode-compatible currency symbol. (required).</param>
        /// <param name="htmlSymbol">HTML-compatible currency symbol. (required).</param>
        public Currency(string id = default(string), string unicodeSymbol = default(string), string htmlSymbol = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Currency and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "unicodeSymbol" is required (not null)
            if (unicodeSymbol == null)
            {
                throw new InvalidDataException("unicodeSymbol is a required property for Currency and cannot be null");
            }
            else
            {
                this.UnicodeSymbol = unicodeSymbol;
            }
            // to ensure "htmlSymbol" is required (not null)
            if (htmlSymbol == null)
            {
                throw new InvalidDataException("htmlSymbol is a required property for Currency and cannot be null");
            }
            else
            {
                this.HtmlSymbol = htmlSymbol;
            }
        }
        
        /// <summary>
        /// The 3-letter ISO currency ID.
        /// </summary>
        /// <value>The 3-letter ISO currency ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Unicode-compatible currency symbol.
        /// </summary>
        /// <value>Unicode-compatible currency symbol.</value>
        [DataMember(Name="unicodeSymbol", EmitDefaultValue=false)]
        public string UnicodeSymbol { get; set; }

        /// <summary>
        /// HTML-compatible currency symbol.
        /// </summary>
        /// <value>HTML-compatible currency symbol.</value>
        [DataMember(Name="htmlSymbol", EmitDefaultValue=false)]
        public string HtmlSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UnicodeSymbol: ").Append(UnicodeSymbol).Append("\n");
            sb.Append("  HtmlSymbol: ").Append(HtmlSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UnicodeSymbol == input.UnicodeSymbol ||
                    (this.UnicodeSymbol != null &&
                    this.UnicodeSymbol.Equals(input.UnicodeSymbol))
                ) && 
                (
                    this.HtmlSymbol == input.HtmlSymbol ||
                    (this.HtmlSymbol != null &&
                    this.HtmlSymbol.Equals(input.HtmlSymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UnicodeSymbol != null)
                    hashCode = hashCode * 59 + this.UnicodeSymbol.GetHashCode();
                if (this.HtmlSymbol != null)
                    hashCode = hashCode * 59 + this.HtmlSymbol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
