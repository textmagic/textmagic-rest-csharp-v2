/* 
 * Textmagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TextMagicClient.Client;
using TextMagicClient.Api;
using TextMagicClient.Model;

namespace TextMagicClient.Test
{
    /// <summary>
    ///  Class for testing TextMagicApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TextMagicApiTests
    {
        private TextMagicApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TextMagicApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TextMagicApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TextMagicApi
            //Assert.IsInstanceOfType(typeof(TextMagicApi), instance, "instance is a TextMagicApi");
        }

        
        /// <summary>
        /// Test AssignContactsToList
        /// </summary>
        [Test]
        public void AssignContactsToListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssignContactsToListInputObject assignContactsToListInputObject = null;
            //int? id = null;
            //var response = instance.AssignContactsToList(assignContactsToListInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test BlockContact
        /// </summary>
        [Test]
        public void BlockContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BlockContactInputObject blockContactInputObject = null;
            //var response = instance.BlockContact(blockContactInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test BuyDedicatedNumber
        /// </summary>
        [Test]
        public void BuyDedicatedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuyDedicatedNumberInputObject buyDedicatedNumberInputObject = null;
            //instance.BuyDedicatedNumber(buyDedicatedNumberInputObject);
            
        }
        
        /// <summary>
        /// Test ClearAndAssignContactsToList
        /// </summary>
        [Test]
        public void ClearAndAssignContactsToListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject = null;
            //int? id = null;
            //var response = instance.ClearAndAssignContactsToList(clearAndAssignContactsToListInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CloseChatsBulk
        /// </summary>
        [Test]
        public void CloseChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseChatsBulkInputObject closeChatsBulkInputObject = null;
            //instance.CloseChatsBulk(closeChatsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test CloseReadChats
        /// </summary>
        [Test]
        public void CloseReadChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.CloseReadChats();
            
        }
        
        /// <summary>
        /// Test CloseSubaccount
        /// </summary>
        [Test]
        public void CloseSubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.CloseSubaccount(id);
            
        }
        
        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Test]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContactInputObject createContactInputObject = null;
            //var response = instance.CreateContact(createContactInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateContactNote
        /// </summary>
        [Test]
        public void CreateContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContactNoteInputObject createContactNoteInputObject = null;
            //int? id = null;
            //var response = instance.CreateContactNote(createContactNoteInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateCustomField
        /// </summary>
        [Test]
        public void CreateCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateCustomFieldInputObject createCustomFieldInputObject = null;
            //var response = instance.CreateCustomField(createCustomFieldInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateList
        /// </summary>
        [Test]
        public void CreateListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateListInputObject createListInputObject = null;
            //var response = instance.CreateList(createListInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTemplateInputObject createTemplateInputObject = null;
            //var response = instance.CreateTemplate(createTemplateInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test DeleteAllContacts
        /// </summary>
        [Test]
        public void DeleteAllContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAllContacts();
            
        }
        
        /// <summary>
        /// Test DeleteAllOutboundMessages
        /// </summary>
        [Test]
        public void DeleteAllOutboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAllOutboundMessages();
            
        }
        
        /// <summary>
        /// Test DeleteAvatar
        /// </summary>
        [Test]
        public void DeleteAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAvatar();
            
        }
        
        /// <summary>
        /// Test DeleteChatMessages
        /// </summary>
        [Test]
        public void DeleteChatMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject = null;
            //int? id = null;
            //instance.DeleteChatMessages(deleteChatMessagesBulkInputObject, id);
            
        }
        
        /// <summary>
        /// Test DeleteChatsBulk
        /// </summary>
        [Test]
        public void DeleteChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteChatsBulkInputObject deleteChatsBulkInputObject = null;
            //instance.DeleteChatsBulk(deleteChatsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteContact
        /// </summary>
        [Test]
        public void DeleteContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteContact(id);
            
        }
        
        /// <summary>
        /// Test DeleteContactAvatar
        /// </summary>
        [Test]
        public void DeleteContactAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteContactAvatar(id);
            
        }
        
        /// <summary>
        /// Test DeleteContactNote
        /// </summary>
        [Test]
        public void DeleteContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteContactNote(id);
            
        }
        
        /// <summary>
        /// Test DeleteContactNotesBulk
        /// </summary>
        [Test]
        public void DeleteContactNotesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject = null;
            //instance.DeleteContactNotesBulk(id, deleteContactNotesBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteContactsByIds
        /// </summary>
        [Test]
        public void DeleteContactsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteContactsByIdsInputObject deleteContactsByIdsInputObject = null;
            //instance.DeleteContactsByIds(deleteContactsByIdsInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteContactsFromList
        /// </summary>
        [Test]
        public void DeleteContactsFromListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteContacsFromListObject deleteContacsFromListObject = null;
            //int? id = null;
            //instance.DeleteContactsFromList(deleteContacsFromListObject, id);
            
        }
        
        /// <summary>
        /// Test DeleteCustomField
        /// </summary>
        [Test]
        public void DeleteCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteCustomField(id);
            
        }
        
        /// <summary>
        /// Test DeleteDedicatedNumber
        /// </summary>
        [Test]
        public void DeleteDedicatedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteDedicatedNumber(id);
            
        }
        
        /// <summary>
        /// Test DeleteInboundMessage
        /// </summary>
        [Test]
        public void DeleteInboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteInboundMessage(id);
            
        }
        
        /// <summary>
        /// Test DeleteInboundMessagesBulk
        /// </summary>
        [Test]
        public void DeleteInboundMessagesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject = null;
            //instance.DeleteInboundMessagesBulk(deleteInboundMessagesBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteList
        /// </summary>
        [Test]
        public void DeleteListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteList(id);
            
        }
        
        /// <summary>
        /// Test DeleteListAvatar
        /// </summary>
        [Test]
        public void DeleteListAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteListAvatar(id);
            
        }
        
        /// <summary>
        /// Test DeleteListContactsBulk
        /// </summary>
        [Test]
        public void DeleteListContactsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteListContactsBulkInputObject deleteListContactsBulkInputObject = null;
            //int? id = null;
            //instance.DeleteListContactsBulk(deleteListContactsBulkInputObject, id);
            
        }
        
        /// <summary>
        /// Test DeleteListsBulk
        /// </summary>
        [Test]
        public void DeleteListsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteListsBulkInputObject deleteListsBulkInputObject = null;
            //instance.DeleteListsBulk(deleteListsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteMessageSession
        /// </summary>
        [Test]
        public void DeleteMessageSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteMessageSession(id);
            
        }
        
        /// <summary>
        /// Test DeleteMessageSessionsBulk
        /// </summary>
        [Test]
        public void DeleteMessageSessionsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject = null;
            //instance.DeleteMessageSessionsBulk(deleteMessageSessionsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteOutboundMessage
        /// </summary>
        [Test]
        public void DeleteOutboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteOutboundMessage(id);
            
        }
        
        /// <summary>
        /// Test DeleteOutboundMessagesBulk
        /// </summary>
        [Test]
        public void DeleteOutboundMessagesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject = null;
            //instance.DeleteOutboundMessagesBulk(deleteOutboundMessagesBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteScheduledMessage
        /// </summary>
        [Test]
        public void DeleteScheduledMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteScheduledMessage(id);
            
        }
        
        /// <summary>
        /// Test DeleteScheduledMessagesBulk
        /// </summary>
        [Test]
        public void DeleteScheduledMessagesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject = null;
            //instance.DeleteScheduledMessagesBulk(deleteScheduledMessagesBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DeleteSenderId
        /// </summary>
        [Test]
        public void DeleteSenderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteSenderId(id);
            
        }
        
        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Test]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteTemplate(id);
            
        }
        
        /// <summary>
        /// Test DeleteTemplatesBulk
        /// </summary>
        [Test]
        public void DeleteTemplatesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject = null;
            //instance.DeleteTemplatesBulk(deleteTemplatesBulkInputObject);
            
        }
        
        /// <summary>
        /// Test DoCarrierLookup
        /// </summary>
        [Test]
        public void DoCarrierLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //string country = null;
            //var response = instance.DoCarrierLookup(phone, country);
            //Assert.IsInstanceOf<DoCarrierLookupResponse> (response, "response is DoCarrierLookupResponse");
        }
        
        /// <summary>
        /// Test DoEmailLookup
        /// </summary>
        [Test]
        public void DoEmailLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.DoEmailLookup(email);
            //Assert.IsInstanceOf<DoEmailLookupResponse> (response, "response is DoEmailLookupResponse");
        }
        
        /// <summary>
        /// Test GetAllBulkSessions
        /// </summary>
        [Test]
        public void GetAllBulkSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetAllBulkSessions(page, limit);
            //Assert.IsInstanceOf<GetAllBulkSessionsPaginatedResponse> (response, "response is GetAllBulkSessionsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAllChats
        /// </summary>
        [Test]
        public void GetAllChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string status = null;
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //int? voice = null;
            //int? flat = null;
            //var response = instance.GetAllChats(status, page, limit, orderBy, voice, flat);
            //Assert.IsInstanceOf<GetAllChatsPaginatedResponse> (response, "response is GetAllChatsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAllInboundMessages
        /// </summary>
        [Test]
        public void GetAllInboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetAllInboundMessages(page, limit, orderBy, direction);
            //Assert.IsInstanceOf<GetAllInboundMessagesPaginatedResponse> (response, "response is GetAllInboundMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAllMessageSessions
        /// </summary>
        [Test]
        public void GetAllMessageSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetAllMessageSessions(page, limit);
            //Assert.IsInstanceOf<GetAllMessageSessionsPaginatedResponse> (response, "response is GetAllMessageSessionsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAllOutboundMessages
        /// </summary>
        [Test]
        public void GetAllOutboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? lastId = null;
            //var response = instance.GetAllOutboundMessages(page, limit, lastId);
            //Assert.IsInstanceOf<GetAllOutboundMessagesPaginatedResponse> (response, "response is GetAllOutboundMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAllScheduledMessages
        /// </summary>
        [Test]
        public void GetAllScheduledMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string status = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetAllScheduledMessages(page, limit, status, orderBy, direction);
            //Assert.IsInstanceOf<GetAllScheduledMessagesPaginatedResponse> (response, "response is GetAllScheduledMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAllTemplates
        /// </summary>
        [Test]
        public void GetAllTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetAllTemplates(page, limit);
            //Assert.IsInstanceOf<GetAllTemplatesPaginatedResponse> (response, "response is GetAllTemplatesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetAvailableDedicatedNumbers
        /// </summary>
        [Test]
        public void GetAvailableDedicatedNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //int? prefix = null;
            //int? tollfree = null;
            //var response = instance.GetAvailableDedicatedNumbers(country, prefix, tollfree);
            //Assert.IsInstanceOf<GetAvailableDedicatedNumbersResponse> (response, "response is GetAvailableDedicatedNumbersResponse");
        }
        
        /// <summary>
        /// Test GetAvailableSenderSettingOptions
        /// </summary>
        [Test]
        public void GetAvailableSenderSettingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //var response = instance.GetAvailableSenderSettingOptions(country);
            //Assert.IsInstanceOf<GetAvailableSenderSettingOptionsResponse> (response, "response is GetAvailableSenderSettingOptionsResponse");
        }
        
        /// <summary>
        /// Test GetBalanceNotificationOptions
        /// </summary>
        [Test]
        public void GetBalanceNotificationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBalanceNotificationOptions();
            //Assert.IsInstanceOf<GetBalanceNotificationOptionsResponse> (response, "response is GetBalanceNotificationOptionsResponse");
        }
        
        /// <summary>
        /// Test GetBalanceNotificationSettings
        /// </summary>
        [Test]
        public void GetBalanceNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBalanceNotificationSettings();
            //Assert.IsInstanceOf<GetBalanceNotificationSettingsResponse> (response, "response is GetBalanceNotificationSettingsResponse");
        }
        
        /// <summary>
        /// Test GetBlockedContacts
        /// </summary>
        [Test]
        public void GetBlockedContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetBlockedContacts(page, limit, query, orderBy, direction);
            //Assert.IsInstanceOf<GetBlockedContactsPaginatedResponse> (response, "response is GetBlockedContactsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetBulkSession
        /// </summary>
        [Test]
        public void GetBulkSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetBulkSession(id);
            //Assert.IsInstanceOf<BulkSession> (response, "response is BulkSession");
        }
        
        /// <summary>
        /// Test GetCallbackSettings
        /// </summary>
        [Test]
        public void GetCallbackSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCallbackSettings();
            //Assert.IsInstanceOf<GetCallbackSettingsResponse> (response, "response is GetCallbackSettingsResponse");
        }
        
        /// <summary>
        /// Test GetChat
        /// </summary>
        [Test]
        public void GetChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetChat(id);
            //Assert.IsInstanceOf<Chat> (response, "response is Chat");
        }
        
        /// <summary>
        /// Test GetChatByPhone
        /// </summary>
        [Test]
        public void GetChatByPhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //int? upsert = null;
            //int? reopen = null;
            //var response = instance.GetChatByPhone(phone, upsert, reopen);
            //Assert.IsInstanceOf<Chat> (response, "response is Chat");
        }
        
        /// <summary>
        /// Test GetChatMessages
        /// </summary>
        [Test]
        public void GetChatMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string start = null;
            //string end = null;
            //string direction = null;
            //int? voice = null;
            //int? includeNotes = null;
            //var response = instance.GetChatMessages(id, page, limit, query, start, end, direction, voice, includeNotes);
            //Assert.IsInstanceOf<GetChatMessagesPaginatedResponse> (response, "response is GetChatMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetContact
        /// </summary>
        [Test]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetContact(id);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test GetContactByPhone
        /// </summary>
        [Test]
        public void GetContactByPhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //var response = instance.GetContactByPhone(phone);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test GetContactIfBlocked
        /// </summary>
        [Test]
        public void GetContactIfBlockedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //var response = instance.GetContactIfBlocked(phone);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test GetContactImportSessionProgress
        /// </summary>
        [Test]
        public void GetContactImportSessionProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetContactImportSessionProgress(id);
            //Assert.IsInstanceOf<GetContactImportSessionProgressResponse> (response, "response is GetContactImportSessionProgressResponse");
        }
        
        /// <summary>
        /// Test GetContactNote
        /// </summary>
        [Test]
        public void GetContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetContactNote(id);
            //Assert.IsInstanceOf<ContactNote> (response, "response is ContactNote");
        }
        
        /// <summary>
        /// Test GetContactNotes
        /// </summary>
        [Test]
        public void GetContactNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetContactNotes(id, page, limit);
            //Assert.IsInstanceOf<GetContactNotesPaginatedResponse> (response, "response is GetContactNotesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Test]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? shared = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetContacts(page, limit, shared, orderBy, direction);
            //Assert.IsInstanceOf<GetContactsPaginatedResponse> (response, "response is GetContactsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetContactsAutocomplete
        /// </summary>
        [Test]
        public void GetContactsAutocompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? limit = null;
            //int? lists = null;
            //var response = instance.GetContactsAutocomplete(query, limit, lists);
            //Assert.IsInstanceOf<GetContactsAutocompleteResponse> (response, "response is GetContactsAutocompleteResponse");
        }
        
        /// <summary>
        /// Test GetContactsByListId
        /// </summary>
        [Test]
        public void GetContactsByListIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetContactsByListId(id, page, limit, orderBy, direction);
            //Assert.IsInstanceOf<GetContactsByListIdPaginatedResponse> (response, "response is GetContactsByListIdPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetCountries
        /// </summary>
        [Test]
        public void GetCountriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCountries();
            //Assert.IsInstanceOf<GetCountriesResponse> (response, "response is GetCountriesResponse");
        }
        
        /// <summary>
        /// Test GetCurrentUser
        /// </summary>
        [Test]
        public void GetCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentUser();
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetCustomField
        /// </summary>
        [Test]
        public void GetCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetCustomField(id);
            //Assert.IsInstanceOf<UserCustomField> (response, "response is UserCustomField");
        }
        
        /// <summary>
        /// Test GetCustomFields
        /// </summary>
        [Test]
        public void GetCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetCustomFields(page, limit);
            //Assert.IsInstanceOf<GetCustomFieldsPaginatedResponse> (response, "response is GetCustomFieldsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetDedicatedNumber
        /// </summary>
        [Test]
        public void GetDedicatedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetDedicatedNumber(id);
            //Assert.IsInstanceOf<UsersInbound> (response, "response is UsersInbound");
        }
        
        /// <summary>
        /// Test GetFavorites
        /// </summary>
        [Test]
        public void GetFavoritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //var response = instance.GetFavorites(page, limit, query);
            //Assert.IsInstanceOf<GetFavoritesPaginatedResponse> (response, "response is GetFavoritesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetInboundMessage
        /// </summary>
        [Test]
        public void GetInboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetInboundMessage(id);
            //Assert.IsInstanceOf<MessageIn> (response, "response is MessageIn");
        }
        
        /// <summary>
        /// Test GetInboundMessagesNotificationSettings
        /// </summary>
        [Test]
        public void GetInboundMessagesNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetInboundMessagesNotificationSettings();
            //Assert.IsInstanceOf<GetInboundMessagesNotificationSettingsResponse> (response, "response is GetInboundMessagesNotificationSettingsResponse");
        }
        
        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Test]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetInvoices(page, limit);
            //Assert.IsInstanceOf<GetInvoicesPaginatedResponse> (response, "response is GetInvoicesPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetList
        /// </summary>
        [Test]
        public void GetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetList(id);
            //Assert.IsInstanceOf<List> (response, "response is List");
        }
        
        /// <summary>
        /// Test GetListContactsIds
        /// </summary>
        [Test]
        public void GetListContactsIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetListContactsIds(id);
            //Assert.IsInstanceOf<GetListContactsIdsResponse> (response, "response is GetListContactsIdsResponse");
        }
        
        /// <summary>
        /// Test GetLists
        /// </summary>
        [Test]
        public void GetListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //string direction = null;
            //int? favoriteOnly = null;
            //int? onlyMine = null;
            //var response = instance.GetLists(page, limit, orderBy, direction, favoriteOnly, onlyMine);
            //Assert.IsInstanceOf<GetListsPaginatedResponse> (response, "response is GetListsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetListsOfContact
        /// </summary>
        [Test]
        public void GetListsOfContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetListsOfContact(id, page, limit);
            //Assert.IsInstanceOf<GetListsOfContactPaginatedResponse> (response, "response is GetListsOfContactPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetMessagePreview
        /// </summary>
        [Test]
        public void GetMessagePreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //int? templateId = null;
            //int? sendingTime = null;
            //string sendingDateTime = null;
            //string sendingTimezone = null;
            //string contacts = null;
            //string lists = null;
            //string phones = null;
            //int? cutExtra = null;
            //int? partsCount = null;
            //int? referenceId = null;
            //string from = null;
            //string rule = null;
            //int? createChat = null;
            //int? tts = null;
            //int? local = null;
            //string localCountry = null;
            //var response = instance.GetMessagePreview(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
            //Assert.IsInstanceOf<GetMessagePreviewResponse> (response, "response is GetMessagePreviewResponse");
        }
        
        /// <summary>
        /// Test GetMessagePrice
        /// </summary>
        [Test]
        public void GetMessagePriceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? includeBlocked = null;
            //string text = null;
            //int? templateId = null;
            //int? sendingTime = null;
            //string sendingDateTime = null;
            //string sendingTimezone = null;
            //string contacts = null;
            //string lists = null;
            //string phones = null;
            //int? cutExtra = null;
            //int? partsCount = null;
            //int? referenceId = null;
            //string from = null;
            //string rule = null;
            //int? createChat = null;
            //int? tts = null;
            //int? local = null;
            //string localCountry = null;
            //var response = instance.GetMessagePrice(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
            //Assert.IsInstanceOf<GetMessagePriceResponse> (response, "response is GetMessagePriceResponse");
        }
        
        /// <summary>
        /// Test GetMessageSession
        /// </summary>
        [Test]
        public void GetMessageSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetMessageSession(id);
            //Assert.IsInstanceOf<MessageSession> (response, "response is MessageSession");
        }
        
        /// <summary>
        /// Test GetMessageSessionStat
        /// </summary>
        [Test]
        public void GetMessageSessionStatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? includeDeleted = null;
            //var response = instance.GetMessageSessionStat(id, includeDeleted);
            //Assert.IsInstanceOf<GetMessageSessionStatResponse> (response, "response is GetMessageSessionStatResponse");
        }
        
        /// <summary>
        /// Test GetMessagesBySessionId
        /// </summary>
        [Test]
        public void GetMessagesBySessionIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //string statuses = null;
            //int? includeDeleted = null;
            //var response = instance.GetMessagesBySessionId(id, page, limit, statuses, includeDeleted);
            //Assert.IsInstanceOf<GetMessagesBySessionIdPaginatedResponse> (response, "response is GetMessagesBySessionIdPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetMessagingCounters
        /// </summary>
        [Test]
        public void GetMessagingCountersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMessagingCounters();
            //Assert.IsInstanceOf<GetMessagingCountersResponse> (response, "response is GetMessagingCountersResponse");
        }
        
        /// <summary>
        /// Test GetMessagingStat
        /// </summary>
        [Test]
        public void GetMessagingStatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string by = null;
            //int? start = null;
            //int? end = null;
            //var response = instance.GetMessagingStat(by, start, end);
            //Assert.IsInstanceOf<GetMessagingStatResponse> (response, "response is GetMessagingStatResponse");
        }
        
        /// <summary>
        /// Test GetOutboundMessage
        /// </summary>
        [Test]
        public void GetOutboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetOutboundMessage(id);
            //Assert.IsInstanceOf<MessageOut> (response, "response is MessageOut");
        }
        
        /// <summary>
        /// Test GetOutboundMessagesHistory
        /// </summary>
        [Test]
        public void GetOutboundMessagesHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? lastId = null;
            //string query = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetOutboundMessagesHistory(limit, lastId, query, orderBy, direction);
            //Assert.IsInstanceOf<GetOutboundMessagesHistoryPaginatedResponse> (response, "response is GetOutboundMessagesHistoryPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetScheduledMessage
        /// </summary>
        [Test]
        public void GetScheduledMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetScheduledMessage(id);
            //Assert.IsInstanceOf<MessagesIcs> (response, "response is MessagesIcs");
        }
        
        /// <summary>
        /// Test GetSenderId
        /// </summary>
        [Test]
        public void GetSenderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSenderId(id);
            //Assert.IsInstanceOf<SenderId> (response, "response is SenderId");
        }
        
        /// <summary>
        /// Test GetSenderIds
        /// </summary>
        [Test]
        public void GetSenderIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetSenderIds(page, limit);
            //Assert.IsInstanceOf<GetSenderIdsPaginatedResponse> (response, "response is GetSenderIdsPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetSenderSettings
        /// </summary>
        [Test]
        public void GetSenderSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //var response = instance.GetSenderSettings(country);
            //Assert.IsInstanceOf<GetSenderSettingsResponse> (response, "response is GetSenderSettingsResponse");
        }
        
        /// <summary>
        /// Test GetSpendingStat
        /// </summary>
        [Test]
        public void GetSpendingStatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string start = null;
            //string end = null;
            //var response = instance.GetSpendingStat(page, limit, start, end);
            //Assert.IsInstanceOf<GetSpendingStatPaginatedResponse> (response, "response is GetSpendingStatPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetSubaccount
        /// </summary>
        [Test]
        public void GetSubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSubaccount(id);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetSubaccounts
        /// </summary>
        [Test]
        public void GetSubaccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetSubaccounts(page, limit);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetSubaccountsWithTokens
        /// </summary>
        [Test]
        public void GetSubaccountsWithTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject = null;
            //decimal? page = null;
            //int? limit = null;
            //var response = instance.GetSubaccountsWithTokens(getSubaccountsWithTokensInputObject, page, limit);
            //Assert.IsInstanceOf<GetSubaccountsWithTokensResponse> (response, "response is GetSubaccountsWithTokensResponse");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetTemplate(id);
            //Assert.IsInstanceOf<MessageTemplate> (response, "response is MessageTemplate");
        }
        
        /// <summary>
        /// Test GetTimezones
        /// </summary>
        [Test]
        public void GetTimezonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? full = null;
            //var response = instance.GetTimezones(full);
            //Assert.IsInstanceOf<GetTimezonesResponse> (response, "response is GetTimezonesResponse");
        }
        
        /// <summary>
        /// Test GetUnreadMessagesTotal
        /// </summary>
        [Test]
        public void GetUnreadMessagesTotalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUnreadMessagesTotal();
            //Assert.IsInstanceOf<GetUnreadMessagesTotalResponse> (response, "response is GetUnreadMessagesTotalResponse");
        }
        
        /// <summary>
        /// Test GetUnsubscribedContact
        /// </summary>
        [Test]
        public void GetUnsubscribedContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetUnsubscribedContact(id);
            //Assert.IsInstanceOf<UnsubscribedContact> (response, "response is UnsubscribedContact");
        }
        
        /// <summary>
        /// Test GetUnsubscribers
        /// </summary>
        [Test]
        public void GetUnsubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetUnsubscribers(page, limit);
            //Assert.IsInstanceOf<GetUnsubscribersPaginatedResponse> (response, "response is GetUnsubscribersPaginatedResponse");
        }
        
        /// <summary>
        /// Test GetUserDedicatedNumbers
        /// </summary>
        [Test]
        public void GetUserDedicatedNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? surveyId = null;
            //var response = instance.GetUserDedicatedNumbers(page, limit, surveyId);
            //Assert.IsInstanceOf<GetUserDedicatedNumbersPaginatedResponse> (response, "response is GetUserDedicatedNumbersPaginatedResponse");
        }
        
        /// <summary>
        /// Test ImportContacts
        /// </summary>
        [Test]
        public void ImportContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //string column = null;
            //int? listId = null;
            //string listName = null;
            //var response = instance.ImportContacts(file, column, listId, listName);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test InviteSubaccount
        /// </summary>
        [Test]
        public void InviteSubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InviteSubaccountInputObject inviteSubaccountInputObject = null;
            //instance.InviteSubaccount(inviteSubaccountInputObject);
            
        }
        
        /// <summary>
        /// Test MarkChatsReadBulk
        /// </summary>
        [Test]
        public void MarkChatsReadBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkChatsReadBulkInputObject markChatsReadBulkInputObject = null;
            //instance.MarkChatsReadBulk(markChatsReadBulkInputObject);
            
        }
        
        /// <summary>
        /// Test MarkChatsUnreadBulk
        /// </summary>
        [Test]
        public void MarkChatsUnreadBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject = null;
            //instance.MarkChatsUnreadBulk(markChatsUnreadBulkInputObject);
            
        }
        
        /// <summary>
        /// Test MuteChat
        /// </summary>
        [Test]
        public void MuteChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MuteChatInputObject muteChatInputObject = null;
            //var response = instance.MuteChat(muteChatInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test MuteChatsBulk
        /// </summary>
        [Test]
        public void MuteChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MuteChatsBulkInputObject muteChatsBulkInputObject = null;
            //instance.MuteChatsBulk(muteChatsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test Ping
        /// </summary>
        [Test]
        public void PingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Ping();
            //Assert.IsInstanceOf<PingResponse> (response, "response is PingResponse");
        }
        
        /// <summary>
        /// Test ReopenChatsBulk
        /// </summary>
        [Test]
        public void ReopenChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReopenChatsBulkInputObject reopenChatsBulkInputObject = null;
            //instance.ReopenChatsBulk(reopenChatsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test RequestNewSubaccountToken
        /// </summary>
        [Test]
        public void RequestNewSubaccountTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject = null;
            //var response = instance.RequestNewSubaccountToken(requestNewSubaccountTokenInputObject);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test RequestSenderId
        /// </summary>
        [Test]
        public void RequestSenderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestSenderIdInputObject requestSenderIdInputObject = null;
            //var response = instance.RequestSenderId(requestSenderIdInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test SearchChats
        /// </summary>
        [Test]
        public void SearchChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //var response = instance.SearchChats(page, limit, query);
            //Assert.IsInstanceOf<SearchChatsPaginatedResponse> (response, "response is SearchChatsPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchChatsByIds
        /// </summary>
        [Test]
        public void SearchChatsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //var response = instance.SearchChatsByIds(page, limit, ids);
            //Assert.IsInstanceOf<SearchChatsByIdsPaginatedResponse> (response, "response is SearchChatsByIdsPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchChatsByReceipent
        /// </summary>
        [Test]
        public void SearchChatsByReceipentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string orderBy = null;
            //var response = instance.SearchChatsByReceipent(page, limit, query, orderBy);
            //Assert.IsInstanceOf<SearchChatsByReceipentPaginatedResponse> (response, "response is SearchChatsByReceipentPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchContacts
        /// </summary>
        [Test]
        public void SearchContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? shared = null;
            //string ids = null;
            //int? listId = null;
            //int? includeBlocked = null;
            //string query = null;
            //int? local = null;
            //int? exactMatch = null;
            //string country = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.SearchContacts(page, limit, shared, ids, listId, includeBlocked, query, local, exactMatch, country, orderBy, direction);
            //Assert.IsInstanceOf<SearchContactsPaginatedResponse> (response, "response is SearchContactsPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchInboundMessages
        /// </summary>
        [Test]
        public void SearchInboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //string query = null;
            //string orderBy = null;
            //string direction = null;
            //int? expand = null;
            //var response = instance.SearchInboundMessages(page, limit, ids, query, orderBy, direction, expand);
            //Assert.IsInstanceOf<SearchInboundMessagesPaginatedResponse> (response, "response is SearchInboundMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchLists
        /// </summary>
        [Test]
        public void SearchListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //string query = null;
            //int? onlyMine = null;
            //int? onlyDefault = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.SearchLists(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
            //Assert.IsInstanceOf<SearchListsPaginatedResponse> (response, "response is SearchListsPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchOutboundMessages
        /// </summary>
        [Test]
        public void SearchOutboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? lastId = null;
            //string ids = null;
            //int? sessionId = null;
            //string statuses = null;
            //int? includeDeleted = null;
            //string query = null;
            //var response = instance.SearchOutboundMessages(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
            //Assert.IsInstanceOf<SearchOutboundMessagesPaginatedResponse> (response, "response is SearchOutboundMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchScheduledMessages
        /// </summary>
        [Test]
        public void SearchScheduledMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string ids = null;
            //string status = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.SearchScheduledMessages(page, limit, query, ids, status, orderBy, direction);
            //Assert.IsInstanceOf<SearchScheduledMessagesPaginatedResponse> (response, "response is SearchScheduledMessagesPaginatedResponse");
        }
        
        /// <summary>
        /// Test SearchTemplates
        /// </summary>
        [Test]
        public void SearchTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //string name = null;
            //string content = null;
            //var response = instance.SearchTemplates(page, limit, ids, name, content);
            //Assert.IsInstanceOf<SearchTemplatesPaginatedResponse> (response, "response is SearchTemplatesPaginatedResponse");
        }
        
        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendMessageInputObject sendMessageInputObject = null;
            //var response = instance.SendMessage(sendMessageInputObject);
            //Assert.IsInstanceOf<SendMessageResponse> (response, "response is SendMessageResponse");
        }
        
        /// <summary>
        /// Test SetChatStatus
        /// </summary>
        [Test]
        public void SetChatStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetChatStatusInputObject setChatStatusInputObject = null;
            //var response = instance.SetChatStatus(setChatStatusInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UnblockContact
        /// </summary>
        [Test]
        public void UnblockContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnblockContactInputObject unblockContactInputObject = null;
            //instance.UnblockContact(unblockContactInputObject);
            
        }
        
        /// <summary>
        /// Test UnblockContactsBulk
        /// </summary>
        [Test]
        public void UnblockContactsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnblockContactsBulkInputObject unblockContactsBulkInputObject = null;
            //instance.UnblockContactsBulk(unblockContactsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test UnmuteChatsBulk
        /// </summary>
        [Test]
        public void UnmuteChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnmuteChatsBulkInputObject unmuteChatsBulkInputObject = null;
            //instance.UnmuteChatsBulk(unmuteChatsBulkInputObject);
            
        }
        
        /// <summary>
        /// Test UnsubscribeContact
        /// </summary>
        [Test]
        public void UnsubscribeContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnsubscribeContactInputObject unsubscribeContactInputObject = null;
            //var response = instance.UnsubscribeContact(unsubscribeContactInputObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateBalanceNotificationSettings
        /// </summary>
        [Test]
        public void UpdateBalanceNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject = null;
            //instance.UpdateBalanceNotificationSettings(updateBalanceNotificationSettingsInputObject);
            
        }
        
        /// <summary>
        /// Test UpdateCallbackSettings
        /// </summary>
        [Test]
        public void UpdateCallbackSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject = null;
            //instance.UpdateCallbackSettings(updateCallbackSettingsInputObject);
            
        }
        
        /// <summary>
        /// Test UpdateChatDesktopNotificationSettings
        /// </summary>
        [Test]
        public void UpdateChatDesktopNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject = null;
            //instance.UpdateChatDesktopNotificationSettings(updateChatDesktopNotificationSettingsInputObject);
            
        }
        
        /// <summary>
        /// Test UpdateContact
        /// </summary>
        [Test]
        public void UpdateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateContactInputObject updateContactInputObject = null;
            //int? id = null;
            //var response = instance.UpdateContact(updateContactInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateContactNote
        /// </summary>
        [Test]
        public void UpdateContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateContactNoteInputObject updateContactNoteInputObject = null;
            //int? id = null;
            //var response = instance.UpdateContactNote(updateContactNoteInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateCurrentUser
        /// </summary>
        [Test]
        public void UpdateCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCurrentUserInputObject updateCurrentUserInputObject = null;
            //var response = instance.UpdateCurrentUser(updateCurrentUserInputObject);
            //Assert.IsInstanceOf<UpdateCurrentUserResponse> (response, "response is UpdateCurrentUserResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomField
        /// </summary>
        [Test]
        public void UpdateCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCustomFieldInputObject updateCustomFieldInputObject = null;
            //int? id = null;
            //var response = instance.UpdateCustomField(updateCustomFieldInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomFieldValue
        /// </summary>
        [Test]
        public void UpdateCustomFieldValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject = null;
            //int? id = null;
            //var response = instance.UpdateCustomFieldValue(updateCustomFieldValueInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateInboundMessagesNotificationSettings
        /// </summary>
        [Test]
        public void UpdateInboundMessagesNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject = null;
            //instance.UpdateInboundMessagesNotificationSettings(updateInboundMessagesNotificationSettingsInputObject);
            
        }
        
        /// <summary>
        /// Test UpdateList
        /// </summary>
        [Test]
        public void UpdateListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //UpdateListObject updateListObject = null;
            //var response = instance.UpdateList(id, updateListObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateSenderSetting
        /// </summary>
        [Test]
        public void UpdateSenderSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateSenderSettingInputObject updateSenderSettingInputObject = null;
            //instance.UpdateSenderSetting(updateSenderSettingInputObject);
            
        }
        
        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Test]
        public void UpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateTemplateInputObject updateTemplateInputObject = null;
            //int? id = null;
            //var response = instance.UpdateTemplate(updateTemplateInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UploadAvatar
        /// </summary>
        [Test]
        public void UploadAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream image = null;
            //instance.UploadAvatar(image);
            
        }
        
        /// <summary>
        /// Test UploadContactAvatar
        /// </summary>
        [Test]
        public void UploadContactAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream image = null;
            //int? id = null;
            //var response = instance.UploadContactAvatar(image, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UploadListAvatar
        /// </summary>
        [Test]
        public void UploadListAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream image = null;
            //int? id = null;
            //var response = instance.UploadListAvatar(image, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UploadMessageAttachment
        /// </summary>
        [Test]
        public void UploadMessageAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.UploadMessageAttachment(file);
            //Assert.IsInstanceOf<UploadMessageAttachmentResponse> (response, "response is UploadMessageAttachmentResponse");
        }
        
        /// <summary>
        /// Test UploadMessageMMSAttachment
        /// </summary>
        [Test]
        public void UploadMessageMMSAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.UploadMessageMMSAttachment(file);
            //Assert.IsInstanceOf<UploadMessageAttachmentResponse> (response, "response is UploadMessageAttachmentResponse");
        }
        
    }

}
